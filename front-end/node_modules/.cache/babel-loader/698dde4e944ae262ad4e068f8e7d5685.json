{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFObject from \"./PDFObject\";\nimport CharCodes from \"../syntax/CharCodes\";\nimport { copyStringIntoBuffer, padStart, utf16Decode, pdfDocEncodingDecode, toCharCode, parseDate, hasUtf16BOM } from \"../../utils\";\nimport { InvalidPDFDateStringError } from \"../errors\";\n\nvar PDFString =\n/** @class */\nfunction (_super) {\n  __extends(PDFString, _super);\n\n  function PDFString(value) {\n    var _this = _super.call(this) || this;\n\n    _this.value = value;\n    return _this;\n  }\n\n  PDFString.prototype.asBytes = function () {\n    var bytes = [];\n    var octal = '';\n    var escaped = false;\n\n    var pushByte = function (byte) {\n      if (byte !== undefined) bytes.push(byte);\n      escaped = false;\n    };\n\n    for (var idx = 0, len = this.value.length; idx < len; idx++) {\n      var char = this.value[idx];\n      var byte = toCharCode(char);\n      var nextChar = this.value[idx + 1];\n\n      if (!escaped) {\n        if (byte === CharCodes.BackSlash) escaped = true;else pushByte(byte);\n      } else {\n        if (byte === CharCodes.Newline) pushByte();else if (byte === CharCodes.CarriageReturn) pushByte();else if (byte === CharCodes.n) pushByte(CharCodes.Newline);else if (byte === CharCodes.r) pushByte(CharCodes.CarriageReturn);else if (byte === CharCodes.t) pushByte(CharCodes.Tab);else if (byte === CharCodes.b) pushByte(CharCodes.Backspace);else if (byte === CharCodes.f) pushByte(CharCodes.FormFeed);else if (byte === CharCodes.LeftParen) pushByte(CharCodes.LeftParen);else if (byte === CharCodes.RightParen) pushByte(CharCodes.RightParen);else if (byte === CharCodes.Backspace) pushByte(CharCodes.BackSlash);else if (byte >= CharCodes.Zero && byte <= CharCodes.Seven) {\n          octal += char;\n\n          if (octal.length === 3 || !(nextChar >= '0' && nextChar <= '7')) {\n            pushByte(parseInt(octal, 8));\n            octal = '';\n          }\n        } else {\n          pushByte(byte);\n        }\n      }\n    }\n\n    return new Uint8Array(bytes);\n  };\n\n  PDFString.prototype.decodeText = function () {\n    var bytes = this.asBytes();\n    if (hasUtf16BOM(bytes)) return utf16Decode(bytes);\n    return pdfDocEncodingDecode(bytes);\n  };\n\n  PDFString.prototype.decodeDate = function () {\n    var text = this.decodeText();\n    var date = parseDate(text);\n    if (!date) throw new InvalidPDFDateStringError(text);\n    return date;\n  };\n\n  PDFString.prototype.asString = function () {\n    return this.value;\n  };\n\n  PDFString.prototype.clone = function () {\n    return PDFString.of(this.value);\n  };\n\n  PDFString.prototype.toString = function () {\n    return \"(\" + this.value + \")\";\n  };\n\n  PDFString.prototype.sizeInBytes = function () {\n    return this.value.length + 2;\n  };\n\n  PDFString.prototype.copyBytesInto = function (buffer, offset) {\n    buffer[offset++] = CharCodes.LeftParen;\n    offset += copyStringIntoBuffer(this.value, buffer, offset);\n    buffer[offset++] = CharCodes.RightParen;\n    return this.value.length + 2;\n  }; // The PDF spec allows newlines and parens to appear directly within a literal\n  // string. These character _may_ be escaped. But they do not _have_ to be. So\n  // for simplicity, we will not bother escaping them.\n\n\n  PDFString.of = function (value) {\n    return new PDFString(value);\n  };\n\n  PDFString.fromDate = function (date) {\n    var year = padStart(String(date.getUTCFullYear()), 4, '0');\n    var month = padStart(String(date.getUTCMonth() + 1), 2, '0');\n    var day = padStart(String(date.getUTCDate()), 2, '0');\n    var hours = padStart(String(date.getUTCHours()), 2, '0');\n    var mins = padStart(String(date.getUTCMinutes()), 2, '0');\n    var secs = padStart(String(date.getUTCSeconds()), 2, '0');\n    return new PDFString(\"D:\" + year + month + day + hours + mins + secs + \"Z\");\n  };\n\n  return PDFString;\n}(PDFObject);\n\nexport default PDFString;","map":{"version":3,"sources":["../../../src/core/objects/PDFString.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport PDFObject from \"./PDFObject\";\nimport CharCodes from \"../syntax/CharCodes\";\nimport { copyStringIntoBuffer, padStart, utf16Decode, pdfDocEncodingDecode, toCharCode, parseDate, hasUtf16BOM, } from \"../../utils\";\nimport { InvalidPDFDateStringError } from \"../errors\";\nvar PDFString = /** @class */ (function (_super) {\n    __extends(PDFString, _super);\n    function PDFString(value) {\n        var _this = _super.call(this) || this;\n        _this.value = value;\n        return _this;\n    }\n    PDFString.prototype.asBytes = function () {\n        var bytes = [];\n        var octal = '';\n        var escaped = false;\n        var pushByte = function (byte) {\n            if (byte !== undefined)\n                bytes.push(byte);\n            escaped = false;\n        };\n        for (var idx = 0, len = this.value.length; idx < len; idx++) {\n            var char = this.value[idx];\n            var byte = toCharCode(char);\n            var nextChar = this.value[idx + 1];\n            if (!escaped) {\n                if (byte === CharCodes.BackSlash)\n                    escaped = true;\n                else\n                    pushByte(byte);\n            }\n            else {\n                if (byte === CharCodes.Newline)\n                    pushByte();\n                else if (byte === CharCodes.CarriageReturn)\n                    pushByte();\n                else if (byte === CharCodes.n)\n                    pushByte(CharCodes.Newline);\n                else if (byte === CharCodes.r)\n                    pushByte(CharCodes.CarriageReturn);\n                else if (byte === CharCodes.t)\n                    pushByte(CharCodes.Tab);\n                else if (byte === CharCodes.b)\n                    pushByte(CharCodes.Backspace);\n                else if (byte === CharCodes.f)\n                    pushByte(CharCodes.FormFeed);\n                else if (byte === CharCodes.LeftParen)\n                    pushByte(CharCodes.LeftParen);\n                else if (byte === CharCodes.RightParen)\n                    pushByte(CharCodes.RightParen);\n                else if (byte === CharCodes.Backspace)\n                    pushByte(CharCodes.BackSlash);\n                else if (byte >= CharCodes.Zero && byte <= CharCodes.Seven) {\n                    octal += char;\n                    if (octal.length === 3 || !(nextChar >= '0' && nextChar <= '7')) {\n                        pushByte(parseInt(octal, 8));\n                        octal = '';\n                    }\n                }\n                else {\n                    pushByte(byte);\n                }\n            }\n        }\n        return new Uint8Array(bytes);\n    };\n    PDFString.prototype.decodeText = function () {\n        var bytes = this.asBytes();\n        if (hasUtf16BOM(bytes))\n            return utf16Decode(bytes);\n        return pdfDocEncodingDecode(bytes);\n    };\n    PDFString.prototype.decodeDate = function () {\n        var text = this.decodeText();\n        var date = parseDate(text);\n        if (!date)\n            throw new InvalidPDFDateStringError(text);\n        return date;\n    };\n    PDFString.prototype.asString = function () {\n        return this.value;\n    };\n    PDFString.prototype.clone = function () {\n        return PDFString.of(this.value);\n    };\n    PDFString.prototype.toString = function () {\n        return \"(\" + this.value + \")\";\n    };\n    PDFString.prototype.sizeInBytes = function () {\n        return this.value.length + 2;\n    };\n    PDFString.prototype.copyBytesInto = function (buffer, offset) {\n        buffer[offset++] = CharCodes.LeftParen;\n        offset += copyStringIntoBuffer(this.value, buffer, offset);\n        buffer[offset++] = CharCodes.RightParen;\n        return this.value.length + 2;\n    };\n    // The PDF spec allows newlines and parens to appear directly within a literal\n    // string. These character _may_ be escaped. But they do not _have_ to be. So\n    // for simplicity, we will not bother escaping them.\n    PDFString.of = function (value) { return new PDFString(value); };\n    PDFString.fromDate = function (date) {\n        var year = padStart(String(date.getUTCFullYear()), 4, '0');\n        var month = padStart(String(date.getUTCMonth() + 1), 2, '0');\n        var day = padStart(String(date.getUTCDate()), 2, '0');\n        var hours = padStart(String(date.getUTCHours()), 2, '0');\n        var mins = padStart(String(date.getUTCMinutes()), 2, '0');\n        var secs = padStart(String(date.getUTCSeconds()), 2, '0');\n        return new PDFString(\"D:\" + year + month + day + hours + mins + secs + \"Z\");\n    };\n    return PDFString;\n}(PDFObject));\nexport default PDFString;\n//# sourceMappingURL=PDFString.js.map"]},"metadata":{},"sourceType":"module"}