{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport PDFDocument from \"./PDFDocument\";\nimport { PDFPageEmbedder, PDFRef } from \"../core\";\nimport { assertIs } from \"../utils\";\n/**\n * Represents a PDF page that has been embedded in a [[PDFDocument]].\n */\n\nvar PDFEmbeddedPage =\n/** @class */\nfunction () {\n  function PDFEmbeddedPage(ref, doc, embedder) {\n    this.alreadyEmbedded = false;\n    assertIs(ref, 'ref', [[PDFRef, 'PDFRef']]);\n    assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n    assertIs(embedder, 'embedder', [[PDFPageEmbedder, 'PDFPageEmbedder']]);\n    this.ref = ref;\n    this.doc = doc;\n    this.width = embedder.width;\n    this.height = embedder.height;\n    this.embedder = embedder;\n  }\n  /**\n   * Compute the width and height of this page after being scaled by the\n   * given `factor`. For example:\n   * ```js\n   * embeddedPage.width  // => 500\n   * embeddedPage.height // => 250\n   *\n   * const scaled = embeddedPage.scale(0.5)\n   * scaled.width  // => 250\n   * scaled.height // => 125\n   * ```\n   * This operation is often useful before drawing a page with\n   * [[PDFPage.drawPage]] to compute the `width` and `height` options.\n   * @param factor The factor by which this page should be scaled.\n   * @returns The width and height of the page after being scaled.\n   */\n\n\n  PDFEmbeddedPage.prototype.scale = function (factor) {\n    assertIs(factor, 'factor', ['number']);\n    return {\n      width: this.width * factor,\n      height: this.height * factor\n    };\n  };\n  /**\n   * Get the width and height of this page. For example:\n   * ```js\n   * const { width, height } = embeddedPage.size()\n   * ```\n   * @returns The width and height of the page.\n   */\n\n\n  PDFEmbeddedPage.prototype.size = function () {\n    return this.scale(1);\n  };\n  /**\n   * > **NOTE:** You probably don't need to call this method directly. The\n   * > [[PDFDocument.save]] and [[PDFDocument.saveAsBase64]] methods will\n   * > automatically ensure all embeddable pages get embedded.\n   *\n   * Embed this embeddable page in its document.\n   *\n   * @returns Resolves when the embedding is complete.\n   */\n\n\n  PDFEmbeddedPage.prototype.embed = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!this.alreadyEmbedded) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.embedder.embedIntoContext(this.doc.context, this.ref)];\n\n          case 1:\n            _a.sent();\n\n            this.alreadyEmbedded = true;\n            _a.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFDocument.embedPdf]] and\n   * > [[PDFDocument.embedPage]] methods, which will create instances of\n   * > [[PDFEmbeddedPage]] for you.\n   *\n   * Create an instance of [[PDFEmbeddedPage]] from an existing ref and embedder\n   *\n   * @param ref The unique reference for this embedded page.\n   * @param doc The document to which the embedded page will belong.\n   * @param embedder The embedder that will be used to embed the page.\n   */\n\n\n  PDFEmbeddedPage.of = function (ref, doc, embedder) {\n    return new PDFEmbeddedPage(ref, doc, embedder);\n  };\n\n  return PDFEmbeddedPage;\n}();\n\nexport default PDFEmbeddedPage;","map":{"version":3,"sources":["../../src/api/PDFEmbeddedPage.ts"],"names":[],"mappings":";AACA,OAAO,WAAP,MAAkB,eAAlB;AACA,SAAS,eAAT,EAA0B,MAA1B,QAAkC,SAAlC;AACA,SAAS,QAAT,QAAmB,UAAnB;AAEA;;AAEG;;AACH,IAAA,eAAA;AAAA;AAAA,YAAA;AA+BE,WAAA,eAAA,CACE,GADF,EAEE,GAFF,EAGE,QAHF,EAG2B;AANnB,SAAA,eAAA,GAAkB,KAAlB;AAQN,IAAA,QAAQ,CAAC,GAAD,EAAM,KAAN,EAAa,CAAC,CAAC,MAAD,EAAS,QAAT,CAAD,CAAb,CAAR;AACA,IAAA,QAAQ,CAAC,GAAD,EAAM,KAAN,EAAa,CAAC,CAAC,WAAD,EAAc,aAAd,CAAD,CAAb,CAAR;AACA,IAAA,QAAQ,CAAC,QAAD,EAAW,UAAX,EAAuB,CAAC,CAAC,eAAD,EAAkB,iBAAlB,CAAD,CAAvB,CAAR;AAEA,SAAK,GAAL,GAAW,GAAX;AACA,SAAK,GAAL,GAAW,GAAX;AACA,SAAK,KAAL,GAAa,QAAQ,CAAC,KAAtB;AACA,SAAK,MAAL,GAAc,QAAQ,CAAC,MAAvB;AAEA,SAAK,QAAL,GAAgB,QAAhB;AACD;AAED;;;;;;;;;;;;;;;AAeG;;;AACH,EAAA,eAAA,CAAA,SAAA,CAAA,KAAA,GAAA,UAAM,MAAN,EAAoB;AAClB,IAAA,QAAQ,CAAC,MAAD,EAAS,QAAT,EAAmB,CAAC,QAAD,CAAnB,CAAR;AACA,WAAO;AAAE,MAAA,KAAK,EAAE,KAAK,KAAL,GAAa,MAAtB;AAA8B,MAAA,MAAM,EAAE,KAAK,MAAL,GAAc;AAApD,KAAP;AACD,GAHD;AAKA;;;;;;AAMG;;;AACH,EAAA,eAAA,CAAA,SAAA,CAAA,IAAA,GAAA,YAAA;AACE,WAAO,KAAK,KAAL,CAAW,CAAX,CAAP;AACD,GAFD;AAIA;;;;;;;;AAQG;;;AACG,EAAA,eAAA,CAAA,SAAA,CAAA,KAAA,GAAN,YAAA;;;;;iBACM,CAAC,KAAK,e,EAAN,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AACF,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,QAAL,CAAc,gBAAd,CAA+B,KAAK,GAAL,CAAS,OAAxC,EAAiD,KAAK,GAAtD,CAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AACA,iBAAK,eAAL,GAAuB,IAAvB;;;;;;;;;;AAEH,GALK;AAxFN;;;;;;;;;;;AAWG;;;AACI,EAAA,eAAA,CAAA,EAAA,GAAK,UAAC,GAAD,EAAc,GAAd,EAAgC,QAAhC,EAAyD;AACnE,WAAA,IAAI,eAAJ,CAAoB,GAApB,EAAyB,GAAzB,EAA8B,QAA9B,CAAA;AAAuC,GADlC;;AAkFT,SAAA,eAAA;AAAC,CA/FD,EAAA;;eAAqB,e","sourceRoot":"","sourcesContent":["import { __awaiter, __generator } from \"tslib\";\nimport PDFDocument from \"./PDFDocument\";\nimport { PDFPageEmbedder, PDFRef } from \"../core\";\nimport { assertIs } from \"../utils\";\n/**\n * Represents a PDF page that has been embedded in a [[PDFDocument]].\n */\nvar PDFEmbeddedPage = /** @class */ (function () {\n    function PDFEmbeddedPage(ref, doc, embedder) {\n        this.alreadyEmbedded = false;\n        assertIs(ref, 'ref', [[PDFRef, 'PDFRef']]);\n        assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n        assertIs(embedder, 'embedder', [[PDFPageEmbedder, 'PDFPageEmbedder']]);\n        this.ref = ref;\n        this.doc = doc;\n        this.width = embedder.width;\n        this.height = embedder.height;\n        this.embedder = embedder;\n    }\n    /**\n     * Compute the width and height of this page after being scaled by the\n     * given `factor`. For example:\n     * ```js\n     * embeddedPage.width  // => 500\n     * embeddedPage.height // => 250\n     *\n     * const scaled = embeddedPage.scale(0.5)\n     * scaled.width  // => 250\n     * scaled.height // => 125\n     * ```\n     * This operation is often useful before drawing a page with\n     * [[PDFPage.drawPage]] to compute the `width` and `height` options.\n     * @param factor The factor by which this page should be scaled.\n     * @returns The width and height of the page after being scaled.\n     */\n    PDFEmbeddedPage.prototype.scale = function (factor) {\n        assertIs(factor, 'factor', ['number']);\n        return { width: this.width * factor, height: this.height * factor };\n    };\n    /**\n     * Get the width and height of this page. For example:\n     * ```js\n     * const { width, height } = embeddedPage.size()\n     * ```\n     * @returns The width and height of the page.\n     */\n    PDFEmbeddedPage.prototype.size = function () {\n        return this.scale(1);\n    };\n    /**\n     * > **NOTE:** You probably don't need to call this method directly. The\n     * > [[PDFDocument.save]] and [[PDFDocument.saveAsBase64]] methods will\n     * > automatically ensure all embeddable pages get embedded.\n     *\n     * Embed this embeddable page in its document.\n     *\n     * @returns Resolves when the embedding is complete.\n     */\n    PDFEmbeddedPage.prototype.embed = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!!this.alreadyEmbedded) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.embedder.embedIntoContext(this.doc.context, this.ref)];\n                    case 1:\n                        _a.sent();\n                        this.alreadyEmbedded = true;\n                        _a.label = 2;\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * > **NOTE:** You probably don't want to call this method directly. Instead,\n     * > consider using the [[PDFDocument.embedPdf]] and\n     * > [[PDFDocument.embedPage]] methods, which will create instances of\n     * > [[PDFEmbeddedPage]] for you.\n     *\n     * Create an instance of [[PDFEmbeddedPage]] from an existing ref and embedder\n     *\n     * @param ref The unique reference for this embedded page.\n     * @param doc The document to which the embedded page will belong.\n     * @param embedder The embedder that will be used to embed the page.\n     */\n    PDFEmbeddedPage.of = function (ref, doc, embedder) {\n        return new PDFEmbeddedPage(ref, doc, embedder);\n    };\n    return PDFEmbeddedPage;\n}());\nexport default PDFEmbeddedPage;\n//# sourceMappingURL=PDFEmbeddedPage.js.map"]},"metadata":{},"sourceType":"module"}