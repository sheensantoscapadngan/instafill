{"ast":null,"code":"import PDFRef from \"../objects/PDFRef\";\nimport CharCodes from \"../syntax/CharCodes\";\nimport { copyStringIntoBuffer, padStart } from \"../../utils\";\n/**\n * Entries should be added using the [[addEntry]] and [[addDeletedEntry]]\n * methods **in order of ascending object number**.\n */\n\nvar PDFCrossRefSection =\n/** @class */\nfunction () {\n  function PDFCrossRefSection(firstEntry) {\n    this.subsections = firstEntry ? [[firstEntry]] : [];\n    this.chunkIdx = 0;\n    this.chunkLength = firstEntry ? 1 : 0;\n  }\n\n  PDFCrossRefSection.prototype.addEntry = function (ref, offset) {\n    this.append({\n      ref: ref,\n      offset: offset,\n      deleted: false\n    });\n  };\n\n  PDFCrossRefSection.prototype.addDeletedEntry = function (ref, nextFreeObjectNumber) {\n    this.append({\n      ref: ref,\n      offset: nextFreeObjectNumber,\n      deleted: true\n    });\n  };\n\n  PDFCrossRefSection.prototype.toString = function () {\n    var section = \"xref\\n\";\n\n    for (var rangeIdx = 0, rangeLen = this.subsections.length; rangeIdx < rangeLen; rangeIdx++) {\n      var range = this.subsections[rangeIdx];\n      section += range[0].ref.objectNumber + \" \" + range.length + \"\\n\";\n\n      for (var entryIdx = 0, entryLen = range.length; entryIdx < entryLen; entryIdx++) {\n        var entry = range[entryIdx];\n        section += padStart(String(entry.offset), 10, '0');\n        section += ' ';\n        section += padStart(String(entry.ref.generationNumber), 5, '0');\n        section += ' ';\n        section += entry.deleted ? 'f' : 'n';\n        section += ' \\n';\n      }\n    }\n\n    return section;\n  };\n\n  PDFCrossRefSection.prototype.sizeInBytes = function () {\n    var size = 5;\n\n    for (var idx = 0, len = this.subsections.length; idx < len; idx++) {\n      var subsection = this.subsections[idx];\n      var subsectionLength = subsection.length;\n      var firstEntry = subsection[0];\n      size += 2;\n      size += String(firstEntry.ref.objectNumber).length;\n      size += String(subsectionLength).length;\n      size += 20 * subsectionLength;\n    }\n\n    return size;\n  };\n\n  PDFCrossRefSection.prototype.copyBytesInto = function (buffer, offset) {\n    var initialOffset = offset;\n    buffer[offset++] = CharCodes.x;\n    buffer[offset++] = CharCodes.r;\n    buffer[offset++] = CharCodes.e;\n    buffer[offset++] = CharCodes.f;\n    buffer[offset++] = CharCodes.Newline;\n    offset += this.copySubsectionsIntoBuffer(this.subsections, buffer, offset);\n    return offset - initialOffset;\n  };\n\n  PDFCrossRefSection.prototype.copySubsectionsIntoBuffer = function (subsections, buffer, offset) {\n    var initialOffset = offset;\n    var length = subsections.length;\n\n    for (var idx = 0; idx < length; idx++) {\n      var subsection = this.subsections[idx];\n      var firstObjectNumber = String(subsection[0].ref.objectNumber);\n      offset += copyStringIntoBuffer(firstObjectNumber, buffer, offset);\n      buffer[offset++] = CharCodes.Space;\n      var rangeLength = String(subsection.length);\n      offset += copyStringIntoBuffer(rangeLength, buffer, offset);\n      buffer[offset++] = CharCodes.Newline;\n      offset += this.copyEntriesIntoBuffer(subsection, buffer, offset);\n    }\n\n    return offset - initialOffset;\n  };\n\n  PDFCrossRefSection.prototype.copyEntriesIntoBuffer = function (entries, buffer, offset) {\n    var length = entries.length;\n\n    for (var idx = 0; idx < length; idx++) {\n      var entry = entries[idx];\n      var entryOffset = padStart(String(entry.offset), 10, '0');\n      offset += copyStringIntoBuffer(entryOffset, buffer, offset);\n      buffer[offset++] = CharCodes.Space;\n      var entryGen = padStart(String(entry.ref.generationNumber), 5, '0');\n      offset += copyStringIntoBuffer(entryGen, buffer, offset);\n      buffer[offset++] = CharCodes.Space;\n      buffer[offset++] = entry.deleted ? CharCodes.f : CharCodes.n;\n      buffer[offset++] = CharCodes.Space;\n      buffer[offset++] = CharCodes.Newline;\n    }\n\n    return 20 * length;\n  };\n\n  PDFCrossRefSection.prototype.append = function (currEntry) {\n    if (this.chunkLength === 0) {\n      this.subsections.push([currEntry]);\n      this.chunkIdx = 0;\n      this.chunkLength = 1;\n      return;\n    }\n\n    var chunk = this.subsections[this.chunkIdx];\n    var prevEntry = chunk[this.chunkLength - 1];\n\n    if (currEntry.ref.objectNumber - prevEntry.ref.objectNumber > 1) {\n      this.subsections.push([currEntry]);\n      this.chunkIdx += 1;\n      this.chunkLength = 1;\n    } else {\n      chunk.push(currEntry);\n      this.chunkLength += 1;\n    }\n  };\n\n  PDFCrossRefSection.create = function () {\n    return new PDFCrossRefSection({\n      ref: PDFRef.of(0, 65535),\n      offset: 0,\n      deleted: true\n    });\n  };\n\n  PDFCrossRefSection.createEmpty = function () {\n    return new PDFCrossRefSection();\n  };\n\n  return PDFCrossRefSection;\n}();\n\nexport default PDFCrossRefSection;","map":{"version":3,"sources":["../../../src/core/document/PDFCrossRefSection.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import PDFRef from \"../objects/PDFRef\";\nimport CharCodes from \"../syntax/CharCodes\";\nimport { copyStringIntoBuffer, padStart } from \"../../utils\";\n/**\n * Entries should be added using the [[addEntry]] and [[addDeletedEntry]]\n * methods **in order of ascending object number**.\n */\nvar PDFCrossRefSection = /** @class */ (function () {\n    function PDFCrossRefSection(firstEntry) {\n        this.subsections = firstEntry ? [[firstEntry]] : [];\n        this.chunkIdx = 0;\n        this.chunkLength = firstEntry ? 1 : 0;\n    }\n    PDFCrossRefSection.prototype.addEntry = function (ref, offset) {\n        this.append({ ref: ref, offset: offset, deleted: false });\n    };\n    PDFCrossRefSection.prototype.addDeletedEntry = function (ref, nextFreeObjectNumber) {\n        this.append({ ref: ref, offset: nextFreeObjectNumber, deleted: true });\n    };\n    PDFCrossRefSection.prototype.toString = function () {\n        var section = \"xref\\n\";\n        for (var rangeIdx = 0, rangeLen = this.subsections.length; rangeIdx < rangeLen; rangeIdx++) {\n            var range = this.subsections[rangeIdx];\n            section += range[0].ref.objectNumber + \" \" + range.length + \"\\n\";\n            for (var entryIdx = 0, entryLen = range.length; entryIdx < entryLen; entryIdx++) {\n                var entry = range[entryIdx];\n                section += padStart(String(entry.offset), 10, '0');\n                section += ' ';\n                section += padStart(String(entry.ref.generationNumber), 5, '0');\n                section += ' ';\n                section += entry.deleted ? 'f' : 'n';\n                section += ' \\n';\n            }\n        }\n        return section;\n    };\n    PDFCrossRefSection.prototype.sizeInBytes = function () {\n        var size = 5;\n        for (var idx = 0, len = this.subsections.length; idx < len; idx++) {\n            var subsection = this.subsections[idx];\n            var subsectionLength = subsection.length;\n            var firstEntry = subsection[0];\n            size += 2;\n            size += String(firstEntry.ref.objectNumber).length;\n            size += String(subsectionLength).length;\n            size += 20 * subsectionLength;\n        }\n        return size;\n    };\n    PDFCrossRefSection.prototype.copyBytesInto = function (buffer, offset) {\n        var initialOffset = offset;\n        buffer[offset++] = CharCodes.x;\n        buffer[offset++] = CharCodes.r;\n        buffer[offset++] = CharCodes.e;\n        buffer[offset++] = CharCodes.f;\n        buffer[offset++] = CharCodes.Newline;\n        offset += this.copySubsectionsIntoBuffer(this.subsections, buffer, offset);\n        return offset - initialOffset;\n    };\n    PDFCrossRefSection.prototype.copySubsectionsIntoBuffer = function (subsections, buffer, offset) {\n        var initialOffset = offset;\n        var length = subsections.length;\n        for (var idx = 0; idx < length; idx++) {\n            var subsection = this.subsections[idx];\n            var firstObjectNumber = String(subsection[0].ref.objectNumber);\n            offset += copyStringIntoBuffer(firstObjectNumber, buffer, offset);\n            buffer[offset++] = CharCodes.Space;\n            var rangeLength = String(subsection.length);\n            offset += copyStringIntoBuffer(rangeLength, buffer, offset);\n            buffer[offset++] = CharCodes.Newline;\n            offset += this.copyEntriesIntoBuffer(subsection, buffer, offset);\n        }\n        return offset - initialOffset;\n    };\n    PDFCrossRefSection.prototype.copyEntriesIntoBuffer = function (entries, buffer, offset) {\n        var length = entries.length;\n        for (var idx = 0; idx < length; idx++) {\n            var entry = entries[idx];\n            var entryOffset = padStart(String(entry.offset), 10, '0');\n            offset += copyStringIntoBuffer(entryOffset, buffer, offset);\n            buffer[offset++] = CharCodes.Space;\n            var entryGen = padStart(String(entry.ref.generationNumber), 5, '0');\n            offset += copyStringIntoBuffer(entryGen, buffer, offset);\n            buffer[offset++] = CharCodes.Space;\n            buffer[offset++] = entry.deleted ? CharCodes.f : CharCodes.n;\n            buffer[offset++] = CharCodes.Space;\n            buffer[offset++] = CharCodes.Newline;\n        }\n        return 20 * length;\n    };\n    PDFCrossRefSection.prototype.append = function (currEntry) {\n        if (this.chunkLength === 0) {\n            this.subsections.push([currEntry]);\n            this.chunkIdx = 0;\n            this.chunkLength = 1;\n            return;\n        }\n        var chunk = this.subsections[this.chunkIdx];\n        var prevEntry = chunk[this.chunkLength - 1];\n        if (currEntry.ref.objectNumber - prevEntry.ref.objectNumber > 1) {\n            this.subsections.push([currEntry]);\n            this.chunkIdx += 1;\n            this.chunkLength = 1;\n        }\n        else {\n            chunk.push(currEntry);\n            this.chunkLength += 1;\n        }\n    };\n    PDFCrossRefSection.create = function () {\n        return new PDFCrossRefSection({\n            ref: PDFRef.of(0, 65535),\n            offset: 0,\n            deleted: true,\n        });\n    };\n    PDFCrossRefSection.createEmpty = function () { return new PDFCrossRefSection(); };\n    return PDFCrossRefSection;\n}());\nexport default PDFCrossRefSection;\n//# sourceMappingURL=PDFCrossRefSection.js.map"]},"metadata":{},"sourceType":"module"}