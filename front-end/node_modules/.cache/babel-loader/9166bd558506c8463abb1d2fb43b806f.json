{"ast":null,"code":"/*\n * The `chars`, `lookup`, and `decodeFromBase64` members of this file are\n * licensed under the following:\n *\n *     base64-arraybuffer\n *     https://github.com/niklasvh/base64-arraybuffer\n *\n *     Copyright (c) 2012 Niklas von Hertzen\n *     Licensed under the MIT license.\n *\n */\nimport pako from 'pako';\nvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'; // Use a lookup table to find the index.\n\nvar lookup = new Uint8Array(256);\n\nfor (var i = 0; i < chars.length; i++) {\n  lookup[chars.charCodeAt(i)] = i;\n}\n\nexport var decodeFromBase64 = function (base64) {\n  var bufferLength = base64.length * 0.75;\n  var len = base64.length;\n  var i;\n  var p = 0;\n  var encoded1;\n  var encoded2;\n  var encoded3;\n  var encoded4;\n\n  if (base64[base64.length - 1] === '=') {\n    bufferLength--;\n\n    if (base64[base64.length - 2] === '=') {\n      bufferLength--;\n    }\n  }\n\n  var bytes = new Uint8Array(bufferLength);\n\n  for (i = 0; i < len; i += 4) {\n    encoded1 = lookup[base64.charCodeAt(i)];\n    encoded2 = lookup[base64.charCodeAt(i + 1)];\n    encoded3 = lookup[base64.charCodeAt(i + 2)];\n    encoded4 = lookup[base64.charCodeAt(i + 3)];\n    bytes[p++] = encoded1 << 2 | encoded2 >> 4;\n    bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n    bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\n  }\n\n  return bytes;\n};\n\nvar arrayToString = function (array) {\n  var str = '';\n\n  for (var i = 0; i < array.length; i++) {\n    str += String.fromCharCode(array[i]);\n  }\n\n  return str;\n};\n\nexport var decompressJson = function (compressedJson) {\n  return arrayToString(pako.inflate(decodeFromBase64(compressedJson)));\n};\nexport var padStart = function (value, length, padChar) {\n  var padding = '';\n\n  for (var idx = 0, len = length - value.length; idx < len; idx++) {\n    padding += padChar;\n  }\n\n  return padding + value;\n};","map":{"version":3,"sources":["E:/PROJECTS/instafill_local/instafill/front-end/node_modules/@pdf-lib/standard-fonts/es/utils.js"],"names":["pako","chars","lookup","Uint8Array","i","length","charCodeAt","decodeFromBase64","base64","bufferLength","len","p","encoded1","encoded2","encoded3","encoded4","bytes","arrayToString","array","str","String","fromCharCode","decompressJson","compressedJson","inflate","padStart","value","padChar","padding","idx"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,IAAP,MAAiB,MAAjB;AACA,IAAIC,KAAK,GAAG,kEAAZ,C,CACA;;AACA,IAAIC,MAAM,GAAG,IAAIC,UAAJ,CAAe,GAAf,CAAb;;AACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACI,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnCF,EAAAA,MAAM,CAACD,KAAK,CAACK,UAAN,CAAiBF,CAAjB,CAAD,CAAN,GAA8BA,CAA9B;AACH;;AACD,OAAO,IAAIG,gBAAgB,GAAG,UAAUC,MAAV,EAAkB;AAC5C,MAAIC,YAAY,GAAGD,MAAM,CAACH,MAAP,GAAgB,IAAnC;AACA,MAAIK,GAAG,GAAGF,MAAM,CAACH,MAAjB;AACA,MAAID,CAAJ;AACA,MAAIO,CAAC,GAAG,CAAR;AACA,MAAIC,QAAJ;AACA,MAAIC,QAAJ;AACA,MAAIC,QAAJ;AACA,MAAIC,QAAJ;;AACA,MAAIP,MAAM,CAACA,MAAM,CAACH,MAAP,GAAgB,CAAjB,CAAN,KAA8B,GAAlC,EAAuC;AACnCI,IAAAA,YAAY;;AACZ,QAAID,MAAM,CAACA,MAAM,CAACH,MAAP,GAAgB,CAAjB,CAAN,KAA8B,GAAlC,EAAuC;AACnCI,MAAAA,YAAY;AACf;AACJ;;AACD,MAAIO,KAAK,GAAG,IAAIb,UAAJ,CAAeM,YAAf,CAAZ;;AACA,OAAKL,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGM,GAAhB,EAAqBN,CAAC,IAAI,CAA1B,EAA6B;AACzBQ,IAAAA,QAAQ,GAAGV,MAAM,CAACM,MAAM,CAACF,UAAP,CAAkBF,CAAlB,CAAD,CAAjB;AACAS,IAAAA,QAAQ,GAAGX,MAAM,CAACM,MAAM,CAACF,UAAP,CAAkBF,CAAC,GAAG,CAAtB,CAAD,CAAjB;AACAU,IAAAA,QAAQ,GAAGZ,MAAM,CAACM,MAAM,CAACF,UAAP,CAAkBF,CAAC,GAAG,CAAtB,CAAD,CAAjB;AACAW,IAAAA,QAAQ,GAAGb,MAAM,CAACM,MAAM,CAACF,UAAP,CAAkBF,CAAC,GAAG,CAAtB,CAAD,CAAjB;AACAY,IAAAA,KAAK,CAACL,CAAC,EAAF,CAAL,GAAcC,QAAQ,IAAI,CAAb,GAAmBC,QAAQ,IAAI,CAA5C;AACAG,IAAAA,KAAK,CAACL,CAAC,EAAF,CAAL,GAAc,CAACE,QAAQ,GAAG,EAAZ,KAAmB,CAApB,GAA0BC,QAAQ,IAAI,CAAnD;AACAE,IAAAA,KAAK,CAACL,CAAC,EAAF,CAAL,GAAc,CAACG,QAAQ,GAAG,CAAZ,KAAkB,CAAnB,GAAyBC,QAAQ,GAAG,EAAjD;AACH;;AACD,SAAOC,KAAP;AACH,CA1BM;;AA2BP,IAAIC,aAAa,GAAG,UAAUC,KAAV,EAAiB;AACjC,MAAIC,GAAG,GAAG,EAAV;;AACA,OAAK,IAAIf,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGc,KAAK,CAACb,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnCe,IAAAA,GAAG,IAAIC,MAAM,CAACC,YAAP,CAAoBH,KAAK,CAACd,CAAD,CAAzB,CAAP;AACH;;AACD,SAAOe,GAAP;AACH,CAND;;AAOA,OAAO,IAAIG,cAAc,GAAG,UAAUC,cAAV,EAA0B;AAClD,SAAON,aAAa,CAACjB,IAAI,CAACwB,OAAL,CAAajB,gBAAgB,CAACgB,cAAD,CAA7B,CAAD,CAApB;AACH,CAFM;AAGP,OAAO,IAAIE,QAAQ,GAAG,UAAUC,KAAV,EAAiBrB,MAAjB,EAAyBsB,OAAzB,EAAkC;AACpD,MAAIC,OAAO,GAAG,EAAd;;AACA,OAAK,IAAIC,GAAG,GAAG,CAAV,EAAanB,GAAG,GAAGL,MAAM,GAAGqB,KAAK,CAACrB,MAAvC,EAA+CwB,GAAG,GAAGnB,GAArD,EAA0DmB,GAAG,EAA7D,EAAiE;AAC7DD,IAAAA,OAAO,IAAID,OAAX;AACH;;AACD,SAAOC,OAAO,GAAGF,KAAjB;AACH,CANM","sourcesContent":["/*\n * The `chars`, `lookup`, and `decodeFromBase64` members of this file are\n * licensed under the following:\n *\n *     base64-arraybuffer\n *     https://github.com/niklasvh/base64-arraybuffer\n *\n *     Copyright (c) 2012 Niklas von Hertzen\n *     Licensed under the MIT license.\n *\n */\nimport pako from 'pako';\nvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n// Use a lookup table to find the index.\nvar lookup = new Uint8Array(256);\nfor (var i = 0; i < chars.length; i++) {\n    lookup[chars.charCodeAt(i)] = i;\n}\nexport var decodeFromBase64 = function (base64) {\n    var bufferLength = base64.length * 0.75;\n    var len = base64.length;\n    var i;\n    var p = 0;\n    var encoded1;\n    var encoded2;\n    var encoded3;\n    var encoded4;\n    if (base64[base64.length - 1] === '=') {\n        bufferLength--;\n        if (base64[base64.length - 2] === '=') {\n            bufferLength--;\n        }\n    }\n    var bytes = new Uint8Array(bufferLength);\n    for (i = 0; i < len; i += 4) {\n        encoded1 = lookup[base64.charCodeAt(i)];\n        encoded2 = lookup[base64.charCodeAt(i + 1)];\n        encoded3 = lookup[base64.charCodeAt(i + 2)];\n        encoded4 = lookup[base64.charCodeAt(i + 3)];\n        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n    }\n    return bytes;\n};\nvar arrayToString = function (array) {\n    var str = '';\n    for (var i = 0; i < array.length; i++) {\n        str += String.fromCharCode(array[i]);\n    }\n    return str;\n};\nexport var decompressJson = function (compressedJson) {\n    return arrayToString(pako.inflate(decodeFromBase64(compressedJson)));\n};\nexport var padStart = function (value, length, padChar) {\n    var padding = '';\n    for (var idx = 0, len = length - value.length; idx < len; idx++) {\n        padding += padChar;\n    }\n    return padding + value;\n};\n"]},"metadata":{},"sourceType":"module"}