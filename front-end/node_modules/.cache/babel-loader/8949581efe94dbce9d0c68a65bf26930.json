{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { createCmap } from \"./CMap\";\nimport { deriveFontFlags } from \"./FontFlags\";\nimport PDFHexString from \"../objects/PDFHexString\";\nimport PDFString from \"../objects/PDFString\";\nimport { addRandomSuffix, byAscendingId, Cache, sortedUniq, toHexStringOfMinLength } from \"../../utils\";\n/**\r\n * A note of thanks to the developers of https://github.com/foliojs/pdfkit, as\r\n * this class borrows from:\r\n *   https://github.com/devongovett/pdfkit/blob/e71edab0dd4657b5a767804ba86c94c58d01fbca/lib/image/jpeg.coffee\r\n */\n\nvar CustomFontEmbedder =\n/** @class */\nfunction () {\n  function CustomFontEmbedder(font, fontData, customName, fontFeatures) {\n    var _this = this;\n\n    this.allGlyphsInFontSortedById = function () {\n      var glyphs = new Array(_this.font.characterSet.length);\n\n      for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n        var codePoint = _this.font.characterSet[idx];\n        glyphs[idx] = _this.font.glyphForCodePoint(codePoint);\n      }\n\n      return sortedUniq(glyphs.sort(byAscendingId), function (g) {\n        return g.id;\n      });\n    };\n\n    this.font = font;\n    this.scale = 1000 / this.font.unitsPerEm;\n    this.fontData = fontData;\n    this.fontName = this.font.postscriptName || 'Font';\n    this.customName = customName;\n    this.fontFeatures = fontFeatures;\n    this.baseFontName = '';\n    this.glyphCache = Cache.populatedBy(this.allGlyphsInFontSortedById);\n  }\n\n  CustomFontEmbedder.for = function (fontkit, fontData, customName, fontFeatures) {\n    return __awaiter(this, void 0, void 0, function () {\n      var font;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , fontkit.create(fontData)];\n\n          case 1:\n            font = _a.sent();\n            return [2\n            /*return*/\n            , new CustomFontEmbedder(font, fontData, customName, fontFeatures)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Encode the JavaScript string into this font. (JavaScript encodes strings in\r\n   * Unicode, but embedded fonts use their own custom encodings)\r\n   */\n\n\n  CustomFontEmbedder.prototype.encodeText = function (text) {\n    var glyphs = this.font.layout(text, this.fontFeatures).glyphs;\n    var hexCodes = new Array(glyphs.length);\n\n    for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n      hexCodes[idx] = toHexStringOfMinLength(glyphs[idx].id, 4);\n    }\n\n    return PDFHexString.of(hexCodes.join(''));\n  }; // The advanceWidth takes into account kerning automatically, so we don't\n  // have to do that manually like we do for the standard fonts.\n\n\n  CustomFontEmbedder.prototype.widthOfTextAtSize = function (text, size) {\n    var glyphs = this.font.layout(text, this.fontFeatures).glyphs;\n    var totalWidth = 0;\n\n    for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n      totalWidth += glyphs[idx].advanceWidth * this.scale;\n    }\n\n    var scale = size / 1000;\n    return totalWidth * scale;\n  };\n\n  CustomFontEmbedder.prototype.heightOfFontAtSize = function (size, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _a = options.descender,\n        descender = _a === void 0 ? true : _a;\n    var _b = this.font,\n        ascent = _b.ascent,\n        descent = _b.descent,\n        bbox = _b.bbox;\n    var yTop = (ascent || bbox.maxY) * this.scale;\n    var yBottom = (descent || bbox.minY) * this.scale;\n    var height = yTop - yBottom;\n    if (!descender) height -= Math.abs(descent) || 0;\n    return height / 1000 * size;\n  };\n\n  CustomFontEmbedder.prototype.sizeOfFontAtHeight = function (height) {\n    var _a = this.font,\n        ascent = _a.ascent,\n        descent = _a.descent,\n        bbox = _a.bbox;\n    var yTop = (ascent || bbox.maxY) * this.scale;\n    var yBottom = (descent || bbox.minY) * this.scale;\n    return 1000 * height / (yTop - yBottom);\n  };\n\n  CustomFontEmbedder.prototype.embedIntoContext = function (context, ref) {\n    this.baseFontName = this.customName || addRandomSuffix(this.fontName);\n    return this.embedFontDict(context, ref);\n  };\n\n  CustomFontEmbedder.prototype.embedFontDict = function (context, ref) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cidFontDictRef, unicodeCMapRef, fontDict;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.embedCIDFontDict(context)];\n\n          case 1:\n            cidFontDictRef = _a.sent();\n            unicodeCMapRef = this.embedUnicodeCmap(context);\n            fontDict = context.obj({\n              Type: 'Font',\n              Subtype: 'Type0',\n              BaseFont: this.baseFontName,\n              Encoding: 'Identity-H',\n              DescendantFonts: [cidFontDictRef],\n              ToUnicode: unicodeCMapRef\n            });\n\n            if (ref) {\n              context.assign(ref, fontDict);\n              return [2\n              /*return*/\n              , ref];\n            } else {\n              return [2\n              /*return*/\n              , context.register(fontDict)];\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  CustomFontEmbedder.prototype.isCFF = function () {\n    return this.font.cff;\n  };\n\n  CustomFontEmbedder.prototype.embedCIDFontDict = function (context) {\n    return __awaiter(this, void 0, void 0, function () {\n      var fontDescriptorRef, cidFontDict;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.embedFontDescriptor(context)];\n\n          case 1:\n            fontDescriptorRef = _a.sent();\n            cidFontDict = context.obj({\n              Type: 'Font',\n              Subtype: this.isCFF() ? 'CIDFontType0' : 'CIDFontType2',\n              CIDToGIDMap: 'Identity',\n              BaseFont: this.baseFontName,\n              CIDSystemInfo: {\n                Registry: PDFString.of('Adobe'),\n                Ordering: PDFString.of('Identity'),\n                Supplement: 0\n              },\n              FontDescriptor: fontDescriptorRef,\n              W: this.computeWidths()\n            });\n            return [2\n            /*return*/\n            , context.register(cidFontDict)];\n        }\n      });\n    });\n  };\n\n  CustomFontEmbedder.prototype.embedFontDescriptor = function (context) {\n    return __awaiter(this, void 0, void 0, function () {\n      var fontStreamRef, scale, _a, italicAngle, ascent, descent, capHeight, xHeight, _b, minX, minY, maxX, maxY, fontDescriptor;\n\n      var _c;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.embedFontStream(context)];\n\n          case 1:\n            fontStreamRef = _d.sent();\n            scale = this.scale;\n            _a = this.font, italicAngle = _a.italicAngle, ascent = _a.ascent, descent = _a.descent, capHeight = _a.capHeight, xHeight = _a.xHeight;\n            _b = this.font.bbox, minX = _b.minX, minY = _b.minY, maxX = _b.maxX, maxY = _b.maxY;\n            fontDescriptor = context.obj((_c = {\n              Type: 'FontDescriptor',\n              FontName: this.baseFontName,\n              Flags: deriveFontFlags(this.font),\n              FontBBox: [minX * scale, minY * scale, maxX * scale, maxY * scale],\n              ItalicAngle: italicAngle,\n              Ascent: ascent * scale,\n              Descent: descent * scale,\n              CapHeight: (capHeight || ascent) * scale,\n              XHeight: (xHeight || 0) * scale,\n              // Not sure how to compute/find this, nor is anybody else really:\n              // https://stackoverflow.com/questions/35485179/stemv-value-of-the-truetype-font\n              StemV: 0\n            }, _c[this.isCFF() ? 'FontFile3' : 'FontFile2'] = fontStreamRef, _c));\n            return [2\n            /*return*/\n            , context.register(fontDescriptor)];\n        }\n      });\n    });\n  };\n\n  CustomFontEmbedder.prototype.serializeFont = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.fontData];\n      });\n    });\n  };\n\n  CustomFontEmbedder.prototype.embedFontStream = function (context) {\n    return __awaiter(this, void 0, void 0, function () {\n      var fontStream, _a, _b;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _b = (_a = context).flateStream;\n            return [4\n            /*yield*/\n            , this.serializeFont()];\n\n          case 1:\n            fontStream = _b.apply(_a, [_c.sent(), {\n              Subtype: this.isCFF() ? 'CIDFontType0C' : undefined\n            }]);\n            return [2\n            /*return*/\n            , context.register(fontStream)];\n        }\n      });\n    });\n  };\n\n  CustomFontEmbedder.prototype.embedUnicodeCmap = function (context) {\n    var cmap = createCmap(this.glyphCache.access(), this.glyphId.bind(this));\n    var cmapStream = context.flateStream(cmap);\n    return context.register(cmapStream);\n  };\n\n  CustomFontEmbedder.prototype.glyphId = function (glyph) {\n    return glyph ? glyph.id : -1;\n  };\n\n  CustomFontEmbedder.prototype.computeWidths = function () {\n    var glyphs = this.glyphCache.access();\n    var widths = [];\n    var currSection = [];\n\n    for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n      var currGlyph = glyphs[idx];\n      var prevGlyph = glyphs[idx - 1];\n      var currGlyphId = this.glyphId(currGlyph);\n      var prevGlyphId = this.glyphId(prevGlyph);\n\n      if (idx === 0) {\n        widths.push(currGlyphId);\n      } else if (currGlyphId - prevGlyphId !== 1) {\n        widths.push(currSection);\n        widths.push(currGlyphId);\n        currSection = [];\n      }\n\n      currSection.push(currGlyph.advanceWidth * this.scale);\n    }\n\n    widths.push(currSection);\n    return widths;\n  };\n\n  return CustomFontEmbedder;\n}();\n\nexport default CustomFontEmbedder;","map":{"version":3,"sources":["../../../src/core/embedders/CustomFontEmbedder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __awaiter, __generator } from \"tslib\";\r\nimport { createCmap } from \"./CMap\";\r\nimport { deriveFontFlags } from \"./FontFlags\";\r\nimport PDFHexString from \"../objects/PDFHexString\";\r\nimport PDFString from \"../objects/PDFString\";\r\nimport { addRandomSuffix, byAscendingId, Cache, sortedUniq, toHexStringOfMinLength, } from \"../../utils\";\r\n/**\r\n * A note of thanks to the developers of https://github.com/foliojs/pdfkit, as\r\n * this class borrows from:\r\n *   https://github.com/devongovett/pdfkit/blob/e71edab0dd4657b5a767804ba86c94c58d01fbca/lib/image/jpeg.coffee\r\n */\r\nvar CustomFontEmbedder = /** @class */ (function () {\r\n    function CustomFontEmbedder(font, fontData, customName, fontFeatures) {\r\n        var _this = this;\r\n        this.allGlyphsInFontSortedById = function () {\r\n            var glyphs = new Array(_this.font.characterSet.length);\r\n            for (var idx = 0, len = glyphs.length; idx < len; idx++) {\r\n                var codePoint = _this.font.characterSet[idx];\r\n                glyphs[idx] = _this.font.glyphForCodePoint(codePoint);\r\n            }\r\n            return sortedUniq(glyphs.sort(byAscendingId), function (g) { return g.id; });\r\n        };\r\n        this.font = font;\r\n        this.scale = 1000 / this.font.unitsPerEm;\r\n        this.fontData = fontData;\r\n        this.fontName = this.font.postscriptName || 'Font';\r\n        this.customName = customName;\r\n        this.fontFeatures = fontFeatures;\r\n        this.baseFontName = '';\r\n        this.glyphCache = Cache.populatedBy(this.allGlyphsInFontSortedById);\r\n    }\r\n    CustomFontEmbedder.for = function (fontkit, fontData, customName, fontFeatures) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var font;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, fontkit.create(fontData)];\r\n                    case 1:\r\n                        font = _a.sent();\r\n                        return [2 /*return*/, new CustomFontEmbedder(font, fontData, customName, fontFeatures)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Encode the JavaScript string into this font. (JavaScript encodes strings in\r\n     * Unicode, but embedded fonts use their own custom encodings)\r\n     */\r\n    CustomFontEmbedder.prototype.encodeText = function (text) {\r\n        var glyphs = this.font.layout(text, this.fontFeatures).glyphs;\r\n        var hexCodes = new Array(glyphs.length);\r\n        for (var idx = 0, len = glyphs.length; idx < len; idx++) {\r\n            hexCodes[idx] = toHexStringOfMinLength(glyphs[idx].id, 4);\r\n        }\r\n        return PDFHexString.of(hexCodes.join(''));\r\n    };\r\n    // The advanceWidth takes into account kerning automatically, so we don't\r\n    // have to do that manually like we do for the standard fonts.\r\n    CustomFontEmbedder.prototype.widthOfTextAtSize = function (text, size) {\r\n        var glyphs = this.font.layout(text, this.fontFeatures).glyphs;\r\n        var totalWidth = 0;\r\n        for (var idx = 0, len = glyphs.length; idx < len; idx++) {\r\n            totalWidth += glyphs[idx].advanceWidth * this.scale;\r\n        }\r\n        var scale = size / 1000;\r\n        return totalWidth * scale;\r\n    };\r\n    CustomFontEmbedder.prototype.heightOfFontAtSize = function (size, options) {\r\n        if (options === void 0) { options = {}; }\r\n        var _a = options.descender, descender = _a === void 0 ? true : _a;\r\n        var _b = this.font, ascent = _b.ascent, descent = _b.descent, bbox = _b.bbox;\r\n        var yTop = (ascent || bbox.maxY) * this.scale;\r\n        var yBottom = (descent || bbox.minY) * this.scale;\r\n        var height = yTop - yBottom;\r\n        if (!descender)\r\n            height -= Math.abs(descent) || 0;\r\n        return (height / 1000) * size;\r\n    };\r\n    CustomFontEmbedder.prototype.sizeOfFontAtHeight = function (height) {\r\n        var _a = this.font, ascent = _a.ascent, descent = _a.descent, bbox = _a.bbox;\r\n        var yTop = (ascent || bbox.maxY) * this.scale;\r\n        var yBottom = (descent || bbox.minY) * this.scale;\r\n        return (1000 * height) / (yTop - yBottom);\r\n    };\r\n    CustomFontEmbedder.prototype.embedIntoContext = function (context, ref) {\r\n        this.baseFontName = this.customName || addRandomSuffix(this.fontName);\r\n        return this.embedFontDict(context, ref);\r\n    };\r\n    CustomFontEmbedder.prototype.embedFontDict = function (context, ref) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var cidFontDictRef, unicodeCMapRef, fontDict;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.embedCIDFontDict(context)];\r\n                    case 1:\r\n                        cidFontDictRef = _a.sent();\r\n                        unicodeCMapRef = this.embedUnicodeCmap(context);\r\n                        fontDict = context.obj({\r\n                            Type: 'Font',\r\n                            Subtype: 'Type0',\r\n                            BaseFont: this.baseFontName,\r\n                            Encoding: 'Identity-H',\r\n                            DescendantFonts: [cidFontDictRef],\r\n                            ToUnicode: unicodeCMapRef,\r\n                        });\r\n                        if (ref) {\r\n                            context.assign(ref, fontDict);\r\n                            return [2 /*return*/, ref];\r\n                        }\r\n                        else {\r\n                            return [2 /*return*/, context.register(fontDict)];\r\n                        }\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    CustomFontEmbedder.prototype.isCFF = function () {\r\n        return this.font.cff;\r\n    };\r\n    CustomFontEmbedder.prototype.embedCIDFontDict = function (context) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var fontDescriptorRef, cidFontDict;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.embedFontDescriptor(context)];\r\n                    case 1:\r\n                        fontDescriptorRef = _a.sent();\r\n                        cidFontDict = context.obj({\r\n                            Type: 'Font',\r\n                            Subtype: this.isCFF() ? 'CIDFontType0' : 'CIDFontType2',\r\n                            CIDToGIDMap: 'Identity',\r\n                            BaseFont: this.baseFontName,\r\n                            CIDSystemInfo: {\r\n                                Registry: PDFString.of('Adobe'),\r\n                                Ordering: PDFString.of('Identity'),\r\n                                Supplement: 0,\r\n                            },\r\n                            FontDescriptor: fontDescriptorRef,\r\n                            W: this.computeWidths(),\r\n                        });\r\n                        return [2 /*return*/, context.register(cidFontDict)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    CustomFontEmbedder.prototype.embedFontDescriptor = function (context) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var fontStreamRef, scale, _a, italicAngle, ascent, descent, capHeight, xHeight, _b, minX, minY, maxX, maxY, fontDescriptor;\r\n            var _c;\r\n            return __generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0: return [4 /*yield*/, this.embedFontStream(context)];\r\n                    case 1:\r\n                        fontStreamRef = _d.sent();\r\n                        scale = this.scale;\r\n                        _a = this.font, italicAngle = _a.italicAngle, ascent = _a.ascent, descent = _a.descent, capHeight = _a.capHeight, xHeight = _a.xHeight;\r\n                        _b = this.font.bbox, minX = _b.minX, minY = _b.minY, maxX = _b.maxX, maxY = _b.maxY;\r\n                        fontDescriptor = context.obj((_c = {\r\n                                Type: 'FontDescriptor',\r\n                                FontName: this.baseFontName,\r\n                                Flags: deriveFontFlags(this.font),\r\n                                FontBBox: [minX * scale, minY * scale, maxX * scale, maxY * scale],\r\n                                ItalicAngle: italicAngle,\r\n                                Ascent: ascent * scale,\r\n                                Descent: descent * scale,\r\n                                CapHeight: (capHeight || ascent) * scale,\r\n                                XHeight: (xHeight || 0) * scale,\r\n                                // Not sure how to compute/find this, nor is anybody else really:\r\n                                // https://stackoverflow.com/questions/35485179/stemv-value-of-the-truetype-font\r\n                                StemV: 0\r\n                            },\r\n                            _c[this.isCFF() ? 'FontFile3' : 'FontFile2'] = fontStreamRef,\r\n                            _c));\r\n                        return [2 /*return*/, context.register(fontDescriptor)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    CustomFontEmbedder.prototype.serializeFont = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.fontData];\r\n            });\r\n        });\r\n    };\r\n    CustomFontEmbedder.prototype.embedFontStream = function (context) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var fontStream, _a, _b;\r\n            return __generator(this, function (_c) {\r\n                switch (_c.label) {\r\n                    case 0:\r\n                        _b = (_a = context).flateStream;\r\n                        return [4 /*yield*/, this.serializeFont()];\r\n                    case 1:\r\n                        fontStream = _b.apply(_a, [_c.sent(), {\r\n                                Subtype: this.isCFF() ? 'CIDFontType0C' : undefined,\r\n                            }]);\r\n                        return [2 /*return*/, context.register(fontStream)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    CustomFontEmbedder.prototype.embedUnicodeCmap = function (context) {\r\n        var cmap = createCmap(this.glyphCache.access(), this.glyphId.bind(this));\r\n        var cmapStream = context.flateStream(cmap);\r\n        return context.register(cmapStream);\r\n    };\r\n    CustomFontEmbedder.prototype.glyphId = function (glyph) {\r\n        return glyph ? glyph.id : -1;\r\n    };\r\n    CustomFontEmbedder.prototype.computeWidths = function () {\r\n        var glyphs = this.glyphCache.access();\r\n        var widths = [];\r\n        var currSection = [];\r\n        for (var idx = 0, len = glyphs.length; idx < len; idx++) {\r\n            var currGlyph = glyphs[idx];\r\n            var prevGlyph = glyphs[idx - 1];\r\n            var currGlyphId = this.glyphId(currGlyph);\r\n            var prevGlyphId = this.glyphId(prevGlyph);\r\n            if (idx === 0) {\r\n                widths.push(currGlyphId);\r\n            }\r\n            else if (currGlyphId - prevGlyphId !== 1) {\r\n                widths.push(currSection);\r\n                widths.push(currGlyphId);\r\n                currSection = [];\r\n            }\r\n            currSection.push(currGlyph.advanceWidth * this.scale);\r\n        }\r\n        widths.push(currSection);\r\n        return widths;\r\n    };\r\n    return CustomFontEmbedder;\r\n}());\r\nexport default CustomFontEmbedder;\r\n//# sourceMappingURL=CustomFontEmbedder.js.map"]},"metadata":{},"sourceType":"module"}