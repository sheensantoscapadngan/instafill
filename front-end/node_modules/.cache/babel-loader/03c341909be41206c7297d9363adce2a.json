{"ast":null,"code":"import { useContext, useRef, createElement, Fragment, cloneElement, Children, isValidElement } from 'react';\nimport { __spread } from 'tslib';\nimport { SharedLayoutContext, isSharedLayout } from '../../context/SharedLayoutContext.js';\nimport { useForceUpdate } from '../../utils/use-force-update.js';\nimport { PresenceChild } from './PresenceChild.js';\n\nfunction getChildKey(child) {\n  return child.key || \"\";\n}\n\nfunction updateChildLookup(children, allChildren) {\n  var seenChildren = process.env.NODE_ENV !== \"production\" ? new Set() : null;\n  children.forEach(function (child) {\n    var key = getChildKey(child);\n\n    if (process.env.NODE_ENV !== \"production\" && seenChildren) {\n      if (seenChildren.has(key)) {\n        console.warn(\"Children of AnimatePresence require unique keys. \\\"\" + key + \"\\\" is a duplicate.\");\n      }\n\n      seenChildren.add(key);\n    }\n\n    allChildren.set(key, child);\n  });\n}\n\nfunction onlyElements(children) {\n  var filtered = []; // We use forEach here instead of map as map mutates the component key by preprending `.$`\n\n  Children.forEach(children, function (child) {\n    if (isValidElement(child)) filtered.push(child);\n  });\n  return filtered;\n}\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * @library\n *\n * Any `Frame` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { Frame, AnimatePresence } from 'framer'\n *\n * // As items are added and removed from `items`\n * export function Items({ items }) {\n *   return (\n *     <AnimatePresence>\n *       {items.map(item => (\n *         <Frame\n *           key={item.id}\n *           initial={{ opacity: 0 }}\n *           animate={{ opacity: 1 }}\n *           exit={{ opacity: 0 }}\n *         />\n *       ))}\n *     </AnimatePresence>\n *   )\n * }\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * @motion\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\n\n\nvar AnimatePresence = function (_a) {\n  var children = _a.children,\n      custom = _a.custom,\n      _b = _a.initial,\n      initial = _b === void 0 ? true : _b,\n      onExitComplete = _a.onExitComplete,\n      exitBeforeEnter = _a.exitBeforeEnter,\n      _c = _a.presenceAffectsLayout,\n      presenceAffectsLayout = _c === void 0 ? true : _c; // We want to force a re-render once all exiting animations have finished. We\n  // either use a local forceRender function, or one from a parent context if it exists.\n\n  var forceRender = useForceUpdate();\n  var layoutContext = useContext(SharedLayoutContext);\n\n  if (isSharedLayout(layoutContext)) {\n    forceRender = layoutContext.forceUpdate;\n  }\n\n  var isInitialRender = useRef(true); // Filter out any children that aren't ReactElements. We can only track ReactElements with a props.key\n\n  var filteredChildren = onlyElements(children); // Keep a living record of the children we're actually rendering so we\n  // can diff to figure out which are entering and exiting\n\n  var presentChildren = useRef(filteredChildren); // A lookup table to quickly reference components by key\n\n  var allChildren = useRef(new Map()).current; // A living record of all currently exiting components.\n\n  var exiting = useRef(new Set()).current;\n  updateChildLookup(filteredChildren, allChildren); // If this is the initial component render, just deal with logic surrounding whether\n  // we play onMount animations or not.\n\n  if (isInitialRender.current) {\n    isInitialRender.current = false;\n    return createElement(Fragment, null, filteredChildren.map(function (child) {\n      return createElement(PresenceChild, {\n        key: getChildKey(child),\n        isPresent: true,\n        initial: initial ? undefined : false,\n        presenceAffectsLayout: presenceAffectsLayout\n      }, child);\n    }));\n  } // If this is a subsequent render, deal with entering and exiting children\n\n\n  var childrenToRender = __spread(filteredChildren); // Diff the keys of the currently-present and target children to update our\n  // exiting list.\n\n\n  var presentKeys = presentChildren.current.map(getChildKey);\n  var targetKeys = filteredChildren.map(getChildKey); // Diff the present children with our target children and mark those that are exiting\n\n  var numPresent = presentKeys.length;\n\n  for (var i = 0; i < numPresent; i++) {\n    var key = presentKeys[i];\n\n    if (targetKeys.indexOf(key) === -1) {\n      exiting.add(key);\n    } else {\n      // In case this key has re-entered, remove from the exiting list\n      exiting.delete(key);\n    }\n  } // If we currently have exiting children, and we're deferring rendering incoming children\n  // until after all current children have exiting, empty the childrenToRender array\n\n\n  if (exitBeforeEnter && exiting.size) {\n    childrenToRender = [];\n  } // Loop through all currently exiting components and clone them to overwrite `animate`\n  // with any `exit` prop they might have defined.\n\n\n  exiting.forEach(function (key) {\n    // If this component is actually entering again, early return\n    if (targetKeys.indexOf(key) !== -1) return;\n    var child = allChildren.get(key);\n    if (!child) return;\n    var insertionIndex = presentKeys.indexOf(key);\n\n    var onExit = function () {\n      allChildren.delete(key);\n      exiting.delete(key); // Remove this child from the present children\n\n      var removeIndex = presentChildren.current.findIndex(function (presentChild) {\n        return presentChild.key === key;\n      });\n      presentChildren.current.splice(removeIndex, 1); // Defer re-rendering until all exiting children have indeed left\n\n      if (!exiting.size) {\n        presentChildren.current = filteredChildren;\n        forceRender();\n        onExitComplete && onExitComplete();\n      }\n    };\n\n    childrenToRender.splice(insertionIndex, 0, createElement(PresenceChild, {\n      key: getChildKey(child),\n      isPresent: false,\n      onExitComplete: onExit,\n      custom: custom,\n      presenceAffectsLayout: presenceAffectsLayout\n    }, child));\n  }); // Add `MotionContext` even to children that don't need it to ensure we're rendering\n  // the same tree between renders\n\n  childrenToRender = childrenToRender.map(function (child) {\n    var key = child.key;\n    return exiting.has(key) ? child : createElement(PresenceChild, {\n      key: getChildKey(child),\n      isPresent: true,\n      presenceAffectsLayout: presenceAffectsLayout\n    }, child);\n  });\n  presentChildren.current = childrenToRender;\n\n  if (process.env.NODE_ENV !== \"production\" && exitBeforeEnter && childrenToRender.length > 1) {\n    console.warn(\"You're attempting to animate multiple children within AnimatePresence, but its exitBeforeEnter prop is set to true. This will lead to odd visual behaviour.\");\n  }\n\n  return createElement(Fragment, null, exiting.size ? childrenToRender : childrenToRender.map(function (child) {\n    return cloneElement(child);\n  }));\n};\n\nexport { AnimatePresence };","map":{"version":3,"sources":["F:/github_repos/instafill/front-end/node_modules/framer-motion/dist/es/components/AnimatePresence/index.js"],"names":["useContext","useRef","createElement","Fragment","cloneElement","Children","isValidElement","__spread","SharedLayoutContext","isSharedLayout","useForceUpdate","PresenceChild","getChildKey","child","key","updateChildLookup","children","allChildren","seenChildren","process","env","NODE_ENV","Set","forEach","has","console","warn","add","set","onlyElements","filtered","push","AnimatePresence","_a","custom","_b","initial","onExitComplete","exitBeforeEnter","_c","presenceAffectsLayout","forceRender","layoutContext","forceUpdate","isInitialRender","filteredChildren","presentChildren","Map","current","exiting","map","isPresent","undefined","childrenToRender","presentKeys","targetKeys","numPresent","length","i","indexOf","delete","size","get","insertionIndex","onExit","removeIndex","findIndex","presentChild","splice"],"mappings":"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","sourcesContent":["import { useContext, useRef, createElement, Fragment, cloneElement, Children, isValidElement } from 'react';\nimport { __spread } from 'tslib';\nimport { SharedLayoutContext, isSharedLayout } from '../../context/SharedLayoutContext.js';\nimport { useForceUpdate } from '../../utils/use-force-update.js';\nimport { PresenceChild } from './PresenceChild.js';\n\nfunction getChildKey(child) {\n    return child.key || \"\";\n}\nfunction updateChildLookup(children, allChildren) {\n    var seenChildren = process.env.NODE_ENV !== \"production\" ? new Set() : null;\n    children.forEach(function (child) {\n        var key = getChildKey(child);\n        if (process.env.NODE_ENV !== \"production\" && seenChildren) {\n            if (seenChildren.has(key)) {\n                console.warn(\"Children of AnimatePresence require unique keys. \\\"\" + key + \"\\\" is a duplicate.\");\n            }\n            seenChildren.add(key);\n        }\n        allChildren.set(key, child);\n    });\n}\nfunction onlyElements(children) {\n    var filtered = [];\n    // We use forEach here instead of map as map mutates the component key by preprending `.$`\n    Children.forEach(children, function (child) {\n        if (isValidElement(child))\n            filtered.push(child);\n    });\n    return filtered;\n}\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * @library\n *\n * Any `Frame` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { Frame, AnimatePresence } from 'framer'\n *\n * // As items are added and removed from `items`\n * export function Items({ items }) {\n *   return (\n *     <AnimatePresence>\n *       {items.map(item => (\n *         <Frame\n *           key={item.id}\n *           initial={{ opacity: 0 }}\n *           animate={{ opacity: 1 }}\n *           exit={{ opacity: 0 }}\n *         />\n *       ))}\n *     </AnimatePresence>\n *   )\n * }\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * @motion\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\nvar AnimatePresence = function (_a) {\n    var children = _a.children, custom = _a.custom, _b = _a.initial, initial = _b === void 0 ? true : _b, onExitComplete = _a.onExitComplete, exitBeforeEnter = _a.exitBeforeEnter, _c = _a.presenceAffectsLayout, presenceAffectsLayout = _c === void 0 ? true : _c;\n    // We want to force a re-render once all exiting animations have finished. We\n    // either use a local forceRender function, or one from a parent context if it exists.\n    var forceRender = useForceUpdate();\n    var layoutContext = useContext(SharedLayoutContext);\n    if (isSharedLayout(layoutContext)) {\n        forceRender = layoutContext.forceUpdate;\n    }\n    var isInitialRender = useRef(true);\n    // Filter out any children that aren't ReactElements. We can only track ReactElements with a props.key\n    var filteredChildren = onlyElements(children);\n    // Keep a living record of the children we're actually rendering so we\n    // can diff to figure out which are entering and exiting\n    var presentChildren = useRef(filteredChildren);\n    // A lookup table to quickly reference components by key\n    var allChildren = useRef(new Map())\n        .current;\n    // A living record of all currently exiting components.\n    var exiting = useRef(new Set()).current;\n    updateChildLookup(filteredChildren, allChildren);\n    // If this is the initial component render, just deal with logic surrounding whether\n    // we play onMount animations or not.\n    if (isInitialRender.current) {\n        isInitialRender.current = false;\n        return (createElement(Fragment, null, filteredChildren.map(function (child) { return (createElement(PresenceChild, { key: getChildKey(child), isPresent: true, initial: initial ? undefined : false, presenceAffectsLayout: presenceAffectsLayout }, child)); })));\n    }\n    // If this is a subsequent render, deal with entering and exiting children\n    var childrenToRender = __spread(filteredChildren);\n    // Diff the keys of the currently-present and target children to update our\n    // exiting list.\n    var presentKeys = presentChildren.current.map(getChildKey);\n    var targetKeys = filteredChildren.map(getChildKey);\n    // Diff the present children with our target children and mark those that are exiting\n    var numPresent = presentKeys.length;\n    for (var i = 0; i < numPresent; i++) {\n        var key = presentKeys[i];\n        if (targetKeys.indexOf(key) === -1) {\n            exiting.add(key);\n        }\n        else {\n            // In case this key has re-entered, remove from the exiting list\n            exiting.delete(key);\n        }\n    }\n    // If we currently have exiting children, and we're deferring rendering incoming children\n    // until after all current children have exiting, empty the childrenToRender array\n    if (exitBeforeEnter && exiting.size) {\n        childrenToRender = [];\n    }\n    // Loop through all currently exiting components and clone them to overwrite `animate`\n    // with any `exit` prop they might have defined.\n    exiting.forEach(function (key) {\n        // If this component is actually entering again, early return\n        if (targetKeys.indexOf(key) !== -1)\n            return;\n        var child = allChildren.get(key);\n        if (!child)\n            return;\n        var insertionIndex = presentKeys.indexOf(key);\n        var onExit = function () {\n            allChildren.delete(key);\n            exiting.delete(key);\n            // Remove this child from the present children\n            var removeIndex = presentChildren.current.findIndex(function (presentChild) { return presentChild.key === key; });\n            presentChildren.current.splice(removeIndex, 1);\n            // Defer re-rendering until all exiting children have indeed left\n            if (!exiting.size) {\n                presentChildren.current = filteredChildren;\n                forceRender();\n                onExitComplete && onExitComplete();\n            }\n        };\n        childrenToRender.splice(insertionIndex, 0, createElement(PresenceChild, { key: getChildKey(child), isPresent: false, onExitComplete: onExit, custom: custom, presenceAffectsLayout: presenceAffectsLayout }, child));\n    });\n    // Add `MotionContext` even to children that don't need it to ensure we're rendering\n    // the same tree between renders\n    childrenToRender = childrenToRender.map(function (child) {\n        var key = child.key;\n        return exiting.has(key) ? (child) : (createElement(PresenceChild, { key: getChildKey(child), isPresent: true, presenceAffectsLayout: presenceAffectsLayout }, child));\n    });\n    presentChildren.current = childrenToRender;\n    if (process.env.NODE_ENV !== \"production\" &&\n        exitBeforeEnter &&\n        childrenToRender.length > 1) {\n        console.warn(\"You're attempting to animate multiple children within AnimatePresence, but its exitBeforeEnter prop is set to true. This will lead to odd visual behaviour.\");\n    }\n    return (createElement(Fragment, null, exiting.size\n        ? childrenToRender\n        : childrenToRender.map(function (child) { return cloneElement(child); })));\n};\n\nexport { AnimatePresence };\n"]},"metadata":{},"sourceType":"module"}