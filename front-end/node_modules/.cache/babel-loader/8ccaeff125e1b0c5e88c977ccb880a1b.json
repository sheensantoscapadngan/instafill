{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\"; // prettier-ignore\n\nvar MARKERS = [0xffc0, 0xffc1, 0xffc2, 0xffc3, 0xffc5, 0xffc6, 0xffc7, 0xffc8, 0xffc9, 0xffca, 0xffcb, 0xffcc, 0xffcd, 0xffce, 0xffcf];\nvar ColorSpace;\n\n(function (ColorSpace) {\n  ColorSpace[\"DeviceGray\"] = \"DeviceGray\";\n  ColorSpace[\"DeviceRGB\"] = \"DeviceRGB\";\n  ColorSpace[\"DeviceCMYK\"] = \"DeviceCMYK\";\n})(ColorSpace || (ColorSpace = {}));\n\nvar ChannelToColorSpace = {\n  1: ColorSpace.DeviceGray,\n  3: ColorSpace.DeviceRGB,\n  4: ColorSpace.DeviceCMYK\n};\n/**\n * A note of thanks to the developers of https://github.com/foliojs/pdfkit, as\n * this class borrows from:\n *   https://github.com/foliojs/pdfkit/blob/a6af76467ce06bd6a2af4aa7271ccac9ff152a7d/lib/image/jpeg.js\n */\n\nvar JpegEmbedder =\n/** @class */\nfunction () {\n  function JpegEmbedder(imageData, bitsPerComponent, width, height, colorSpace) {\n    this.imageData = imageData;\n    this.bitsPerComponent = bitsPerComponent;\n    this.width = width;\n    this.height = height;\n    this.colorSpace = colorSpace;\n  }\n\n  JpegEmbedder.for = function (imageData) {\n    return __awaiter(this, void 0, void 0, function () {\n      var dataView, soi, pos, marker, bitsPerComponent, height, width, channelByte, channelName, colorSpace;\n      return __generator(this, function (_a) {\n        dataView = new DataView(imageData.buffer);\n        soi = dataView.getUint16(0);\n        if (soi !== 0xffd8) throw new Error('SOI not found in JPEG');\n        pos = 2;\n\n        while (pos < dataView.byteLength) {\n          marker = dataView.getUint16(pos);\n          pos += 2;\n          if (MARKERS.includes(marker)) break;\n          pos += dataView.getUint16(pos);\n        }\n\n        if (!MARKERS.includes(marker)) throw new Error('Invalid JPEG');\n        pos += 2;\n        bitsPerComponent = dataView.getUint8(pos++);\n        height = dataView.getUint16(pos);\n        pos += 2;\n        width = dataView.getUint16(pos);\n        pos += 2;\n        channelByte = dataView.getUint8(pos++);\n        channelName = ChannelToColorSpace[channelByte];\n        if (!channelName) throw new Error('Unknown JPEG channel.');\n        colorSpace = channelName;\n        return [2\n        /*return*/\n        , new JpegEmbedder(imageData, bitsPerComponent, width, height, colorSpace)];\n      });\n    });\n  };\n\n  JpegEmbedder.prototype.embedIntoContext = function (context, ref) {\n    return __awaiter(this, void 0, void 0, function () {\n      var xObject;\n      return __generator(this, function (_a) {\n        xObject = context.stream(this.imageData, {\n          Type: 'XObject',\n          Subtype: 'Image',\n          BitsPerComponent: this.bitsPerComponent,\n          Width: this.width,\n          Height: this.height,\n          ColorSpace: this.colorSpace,\n          Filter: 'DCTDecode',\n          // CMYK JPEG streams in PDF are typically stored complemented,\n          // with 1 as 'off' and 0 as 'on' (PDF 32000-1:2008, 8.6.4.4).\n          //\n          // Standalone CMYK JPEG (usually exported by Photoshop) are\n          // stored inverse, with 0 as 'off' and 1 as 'on', like RGB.\n          //\n          // Applying a swap here as a hedge that most bytes passing\n          // through this method will benefit from it.\n          Decode: this.colorSpace === ColorSpace.DeviceCMYK ? [1, 0, 1, 0, 1, 0, 1, 0] : undefined\n        });\n\n        if (ref) {\n          context.assign(ref, xObject);\n          return [2\n          /*return*/\n          , ref];\n        } else {\n          return [2\n          /*return*/\n          , context.register(xObject)];\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  return JpegEmbedder;\n}();\n\nexport default JpegEmbedder;","map":{"version":3,"sources":["../../../src/core/embedders/JpegEmbedder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __awaiter, __generator } from \"tslib\";\n// prettier-ignore\nvar MARKERS = [\n    0xffc0, 0xffc1, 0xffc2,\n    0xffc3, 0xffc5, 0xffc6,\n    0xffc7, 0xffc8, 0xffc9,\n    0xffca, 0xffcb, 0xffcc,\n    0xffcd, 0xffce, 0xffcf,\n];\nvar ColorSpace;\n(function (ColorSpace) {\n    ColorSpace[\"DeviceGray\"] = \"DeviceGray\";\n    ColorSpace[\"DeviceRGB\"] = \"DeviceRGB\";\n    ColorSpace[\"DeviceCMYK\"] = \"DeviceCMYK\";\n})(ColorSpace || (ColorSpace = {}));\nvar ChannelToColorSpace = {\n    1: ColorSpace.DeviceGray,\n    3: ColorSpace.DeviceRGB,\n    4: ColorSpace.DeviceCMYK,\n};\n/**\n * A note of thanks to the developers of https://github.com/foliojs/pdfkit, as\n * this class borrows from:\n *   https://github.com/foliojs/pdfkit/blob/a6af76467ce06bd6a2af4aa7271ccac9ff152a7d/lib/image/jpeg.js\n */\nvar JpegEmbedder = /** @class */ (function () {\n    function JpegEmbedder(imageData, bitsPerComponent, width, height, colorSpace) {\n        this.imageData = imageData;\n        this.bitsPerComponent = bitsPerComponent;\n        this.width = width;\n        this.height = height;\n        this.colorSpace = colorSpace;\n    }\n    JpegEmbedder.for = function (imageData) {\n        return __awaiter(this, void 0, void 0, function () {\n            var dataView, soi, pos, marker, bitsPerComponent, height, width, channelByte, channelName, colorSpace;\n            return __generator(this, function (_a) {\n                dataView = new DataView(imageData.buffer);\n                soi = dataView.getUint16(0);\n                if (soi !== 0xffd8)\n                    throw new Error('SOI not found in JPEG');\n                pos = 2;\n                while (pos < dataView.byteLength) {\n                    marker = dataView.getUint16(pos);\n                    pos += 2;\n                    if (MARKERS.includes(marker))\n                        break;\n                    pos += dataView.getUint16(pos);\n                }\n                if (!MARKERS.includes(marker))\n                    throw new Error('Invalid JPEG');\n                pos += 2;\n                bitsPerComponent = dataView.getUint8(pos++);\n                height = dataView.getUint16(pos);\n                pos += 2;\n                width = dataView.getUint16(pos);\n                pos += 2;\n                channelByte = dataView.getUint8(pos++);\n                channelName = ChannelToColorSpace[channelByte];\n                if (!channelName)\n                    throw new Error('Unknown JPEG channel.');\n                colorSpace = channelName;\n                return [2 /*return*/, new JpegEmbedder(imageData, bitsPerComponent, width, height, colorSpace)];\n            });\n        });\n    };\n    JpegEmbedder.prototype.embedIntoContext = function (context, ref) {\n        return __awaiter(this, void 0, void 0, function () {\n            var xObject;\n            return __generator(this, function (_a) {\n                xObject = context.stream(this.imageData, {\n                    Type: 'XObject',\n                    Subtype: 'Image',\n                    BitsPerComponent: this.bitsPerComponent,\n                    Width: this.width,\n                    Height: this.height,\n                    ColorSpace: this.colorSpace,\n                    Filter: 'DCTDecode',\n                    // CMYK JPEG streams in PDF are typically stored complemented,\n                    // with 1 as 'off' and 0 as 'on' (PDF 32000-1:2008, 8.6.4.4).\n                    //\n                    // Standalone CMYK JPEG (usually exported by Photoshop) are\n                    // stored inverse, with 0 as 'off' and 1 as 'on', like RGB.\n                    //\n                    // Applying a swap here as a hedge that most bytes passing\n                    // through this method will benefit from it.\n                    Decode: this.colorSpace === ColorSpace.DeviceCMYK\n                        ? [1, 0, 1, 0, 1, 0, 1, 0]\n                        : undefined,\n                });\n                if (ref) {\n                    context.assign(ref, xObject);\n                    return [2 /*return*/, ref];\n                }\n                else {\n                    return [2 /*return*/, context.register(xObject)];\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    return JpegEmbedder;\n}());\nexport default JpegEmbedder;\n//# sourceMappingURL=JpegEmbedder.js.map"]},"metadata":{},"sourceType":"module"}