{"ast":null,"code":"import { useRef, useContext, useEffect } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.js';\nimport { usePointerEvent } from '../events/use-pointer-event.js';\nimport { PanSession } from './PanSession.js';\nimport { useUnmountEffect } from '../utils/use-unmount-effect.js';\n/**\r\n *\r\n * @param handlers -\r\n * @param ref -\r\n *\r\n * @internalremarks\r\n * Currently this sets new pan gesture functions every render. The memo route has been explored\r\n * in the past but ultimately we're still creating new functions every render. An optimisation\r\n * to explore is creating the pan gestures and loading them into a `ref`.\r\n *\r\n * @internal\r\n */\n\nfunction usePanGesture(_a, ref) {\n  var onPan = _a.onPan,\n      onPanStart = _a.onPanStart,\n      onPanEnd = _a.onPanEnd,\n      onPanSessionStart = _a.onPanSessionStart;\n  var hasPanEvents = onPan || onPanStart || onPanEnd || onPanSessionStart;\n  var panSession = useRef(null);\n  var transformPagePoint = useContext(MotionConfigContext).transformPagePoint;\n  var handlers = {\n    onSessionStart: onPanSessionStart,\n    onStart: onPanStart,\n    onMove: onPan,\n    onEnd: function (event, info) {\n      panSession.current = null;\n      onPanEnd && onPanEnd(event, info);\n    }\n  };\n  useEffect(function () {\n    if (panSession.current !== null) {\n      panSession.current.updateHandlers(handlers);\n    }\n  });\n\n  function onPointerDown(event) {\n    panSession.current = new PanSession(event, handlers, {\n      transformPagePoint: transformPagePoint\n    });\n  }\n\n  usePointerEvent(ref, \"pointerdown\", hasPanEvents && onPointerDown);\n  useUnmountEffect(function () {\n    return panSession.current && panSession.current.end();\n  });\n}\n\nexport { usePanGesture };","map":{"version":3,"sources":["E:/PROJECTS/instafill_local/instafill/front-end/node_modules/framer-motion/dist/es/gestures/use-pan-gesture.js"],"names":["useRef","useContext","useEffect","MotionConfigContext","usePointerEvent","PanSession","useUnmountEffect","usePanGesture","_a","ref","onPan","onPanStart","onPanEnd","onPanSessionStart","hasPanEvents","panSession","transformPagePoint","handlers","onSessionStart","onStart","onMove","onEnd","event","info","current","updateHandlers","onPointerDown","end"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,UAAjB,EAA6BC,SAA7B,QAA8C,OAA9C;AACA,SAASC,mBAAT,QAAoC,mCAApC;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,aAAT,CAAuBC,EAAvB,EAA2BC,GAA3B,EAAgC;AAC5B,MAAIC,KAAK,GAAGF,EAAE,CAACE,KAAf;AAAA,MAAsBC,UAAU,GAAGH,EAAE,CAACG,UAAtC;AAAA,MAAkDC,QAAQ,GAAGJ,EAAE,CAACI,QAAhE;AAAA,MAA0EC,iBAAiB,GAAGL,EAAE,CAACK,iBAAjG;AACA,MAAIC,YAAY,GAAGJ,KAAK,IAAIC,UAAT,IAAuBC,QAAvB,IAAmCC,iBAAtD;AACA,MAAIE,UAAU,GAAGf,MAAM,CAAC,IAAD,CAAvB;AACA,MAAIgB,kBAAkB,GAAGf,UAAU,CAACE,mBAAD,CAAV,CAAgCa,kBAAzD;AACA,MAAIC,QAAQ,GAAG;AACXC,IAAAA,cAAc,EAAEL,iBADL;AAEXM,IAAAA,OAAO,EAAER,UAFE;AAGXS,IAAAA,MAAM,EAAEV,KAHG;AAIXW,IAAAA,KAAK,EAAE,UAAUC,KAAV,EAAiBC,IAAjB,EAAuB;AAC1BR,MAAAA,UAAU,CAACS,OAAX,GAAqB,IAArB;AACAZ,MAAAA,QAAQ,IAAIA,QAAQ,CAACU,KAAD,EAAQC,IAAR,CAApB;AACH;AAPU,GAAf;AASArB,EAAAA,SAAS,CAAC,YAAY;AAClB,QAAIa,UAAU,CAACS,OAAX,KAAuB,IAA3B,EAAiC;AAC7BT,MAAAA,UAAU,CAACS,OAAX,CAAmBC,cAAnB,CAAkCR,QAAlC;AACH;AACJ,GAJQ,CAAT;;AAKA,WAASS,aAAT,CAAuBJ,KAAvB,EAA8B;AAC1BP,IAAAA,UAAU,CAACS,OAAX,GAAqB,IAAInB,UAAJ,CAAeiB,KAAf,EAAsBL,QAAtB,EAAgC;AACjDD,MAAAA,kBAAkB,EAAEA;AAD6B,KAAhC,CAArB;AAGH;;AACDZ,EAAAA,eAAe,CAACK,GAAD,EAAM,aAAN,EAAqBK,YAAY,IAAIY,aAArC,CAAf;AACApB,EAAAA,gBAAgB,CAAC,YAAY;AAAE,WAAOS,UAAU,CAACS,OAAX,IAAsBT,UAAU,CAACS,OAAX,CAAmBG,GAAnB,EAA7B;AAAwD,GAAvE,CAAhB;AACH;;AAED,SAASpB,aAAT","sourcesContent":["import { useRef, useContext, useEffect } from 'react';\r\nimport { MotionConfigContext } from '../context/MotionConfigContext.js';\r\nimport { usePointerEvent } from '../events/use-pointer-event.js';\r\nimport { PanSession } from './PanSession.js';\r\nimport { useUnmountEffect } from '../utils/use-unmount-effect.js';\r\n\r\n/**\r\n *\r\n * @param handlers -\r\n * @param ref -\r\n *\r\n * @internalremarks\r\n * Currently this sets new pan gesture functions every render. The memo route has been explored\r\n * in the past but ultimately we're still creating new functions every render. An optimisation\r\n * to explore is creating the pan gestures and loading them into a `ref`.\r\n *\r\n * @internal\r\n */\r\nfunction usePanGesture(_a, ref) {\r\n    var onPan = _a.onPan, onPanStart = _a.onPanStart, onPanEnd = _a.onPanEnd, onPanSessionStart = _a.onPanSessionStart;\r\n    var hasPanEvents = onPan || onPanStart || onPanEnd || onPanSessionStart;\r\n    var panSession = useRef(null);\r\n    var transformPagePoint = useContext(MotionConfigContext).transformPagePoint;\r\n    var handlers = {\r\n        onSessionStart: onPanSessionStart,\r\n        onStart: onPanStart,\r\n        onMove: onPan,\r\n        onEnd: function (event, info) {\r\n            panSession.current = null;\r\n            onPanEnd && onPanEnd(event, info);\r\n        },\r\n    };\r\n    useEffect(function () {\r\n        if (panSession.current !== null) {\r\n            panSession.current.updateHandlers(handlers);\r\n        }\r\n    });\r\n    function onPointerDown(event) {\r\n        panSession.current = new PanSession(event, handlers, {\r\n            transformPagePoint: transformPagePoint,\r\n        });\r\n    }\r\n    usePointerEvent(ref, \"pointerdown\", hasPanEvents && onPointerDown);\r\n    useUnmountEffect(function () { return panSession.current && panSession.current.end(); });\r\n}\r\n\r\nexport { usePanGesture };\r\n"]},"metadata":{},"sourceType":"module"}