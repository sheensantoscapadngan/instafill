{"ast":null,"code":"import PDFArray from \"../objects/PDFArray\";\nimport PDFBool from \"../objects/PDFBool\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFNumber from \"../objects/PDFNumber\";\nimport { assertEachIs, assertInteger, assertIsOneOf, assertRange } from \"../../utils\";\n\nvar asEnum = function (rawValue, enumType) {\n  if (rawValue === undefined) return undefined;\n  return enumType[rawValue];\n};\n\nexport var NonFullScreenPageMode;\n\n(function (NonFullScreenPageMode) {\n  /**\n   * After exiting FullScreen mode, neither the document outline nor thumbnail\n   * images should be visible.\n   */\n  NonFullScreenPageMode[\"UseNone\"] = \"UseNone\";\n  /** After exiting FullScreen mode, the document outline should be visible. */\n\n  NonFullScreenPageMode[\"UseOutlines\"] = \"UseOutlines\";\n  /** After exiting FullScreen mode, thumbnail images should be visible. */\n\n  NonFullScreenPageMode[\"UseThumbs\"] = \"UseThumbs\";\n  /**\n   * After exiting FullScreen mode, the optional content group panel should be\n   * visible.\n   */\n\n  NonFullScreenPageMode[\"UseOC\"] = \"UseOC\";\n})(NonFullScreenPageMode || (NonFullScreenPageMode = {}));\n\nexport var ReadingDirection;\n\n(function (ReadingDirection) {\n  /** The predominant reading order is Left to Right. */\n  ReadingDirection[\"L2R\"] = \"L2R\";\n  /**\n   * The predominant reading order is Right to left (including vertical writing\n   * systems, such as Chinese, Japanese and Korean).\n   */\n\n  ReadingDirection[\"R2L\"] = \"R2L\";\n})(ReadingDirection || (ReadingDirection = {}));\n\nexport var PrintScaling;\n\n(function (PrintScaling) {\n  /** No page scaling. */\n  PrintScaling[\"None\"] = \"None\";\n  /* Use the PDF reader's default print scaling. */\n\n  PrintScaling[\"AppDefault\"] = \"AppDefault\";\n})(PrintScaling || (PrintScaling = {}));\n\nexport var Duplex;\n\n(function (Duplex) {\n  /** The PDF reader should print single-sided. */\n  Duplex[\"Simplex\"] = \"Simplex\";\n  /**\n   * The PDF reader should print double sided and flip on the short edge of the\n   * sheet.\n   */\n\n  Duplex[\"DuplexFlipShortEdge\"] = \"DuplexFlipShortEdge\";\n  /**\n   * The PDF reader should print double sided and flip on the long edge of the\n   * sheet.\n   */\n\n  Duplex[\"DuplexFlipLongEdge\"] = \"DuplexFlipLongEdge\";\n})(Duplex || (Duplex = {}));\n\nvar ViewerPreferences =\n/** @class */\nfunction () {\n  function ViewerPreferences(dict) {\n    this.dict = dict;\n  }\n\n  ViewerPreferences.prototype.lookupBool = function (key) {\n    var returnObj = this.dict.lookup(PDFName.of(key));\n    if (returnObj instanceof PDFBool) return returnObj;\n    return undefined;\n  };\n\n  ViewerPreferences.prototype.lookupName = function (key) {\n    var returnObj = this.dict.lookup(PDFName.of(key));\n    if (returnObj instanceof PDFName) return returnObj;\n    return undefined;\n  };\n\n  ViewerPreferences.prototype.HideToolbar = function () {\n    return this.lookupBool('HideToolbar');\n  };\n\n  ViewerPreferences.prototype.HideMenubar = function () {\n    return this.lookupBool('HideMenubar');\n  };\n\n  ViewerPreferences.prototype.HideWindowUI = function () {\n    return this.lookupBool('HideWindowUI');\n  };\n\n  ViewerPreferences.prototype.FitWindow = function () {\n    return this.lookupBool('FitWindow');\n  };\n\n  ViewerPreferences.prototype.CenterWindow = function () {\n    return this.lookupBool('CenterWindow');\n  };\n\n  ViewerPreferences.prototype.DisplayDocTitle = function () {\n    return this.lookupBool('DisplayDocTitle');\n  };\n\n  ViewerPreferences.prototype.NonFullScreenPageMode = function () {\n    return this.lookupName('NonFullScreenPageMode');\n  };\n\n  ViewerPreferences.prototype.Direction = function () {\n    return this.lookupName('Direction');\n  };\n\n  ViewerPreferences.prototype.PrintScaling = function () {\n    return this.lookupName('PrintScaling');\n  };\n\n  ViewerPreferences.prototype.Duplex = function () {\n    return this.lookupName('Duplex');\n  };\n\n  ViewerPreferences.prototype.PickTrayByPDFSize = function () {\n    return this.lookupBool('PickTrayByPDFSize');\n  };\n\n  ViewerPreferences.prototype.PrintPageRange = function () {\n    var PrintPageRange = this.dict.lookup(PDFName.of('PrintPageRange'));\n    if (PrintPageRange instanceof PDFArray) return PrintPageRange;\n    return undefined;\n  };\n\n  ViewerPreferences.prototype.NumCopies = function () {\n    var NumCopies = this.dict.lookup(PDFName.of('NumCopies'));\n    if (NumCopies instanceof PDFNumber) return NumCopies;\n    return undefined;\n  };\n  /**\n   * Returns `true` if PDF readers should hide the toolbar menus when displaying\n   * this document.\n   * @returns Whether or not toolbars should be hidden.\n   */\n\n\n  ViewerPreferences.prototype.getHideToolbar = function () {\n    var _a, _b;\n\n    return (_b = (_a = this.HideToolbar()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n  };\n  /**\n   * Returns `true` if PDF readers should hide the menu bar when displaying this\n   * document.\n   * @returns Whether or not the menu bar should be hidden.\n   */\n\n\n  ViewerPreferences.prototype.getHideMenubar = function () {\n    var _a, _b;\n\n    return (_b = (_a = this.HideMenubar()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n  };\n  /**\n   * Returns `true` if PDF readers should hide the user interface elements in\n   * the document's window (such as scroll bars and navigation controls),\n   * leaving only the document's contents displayed.\n   * @returns Whether or not user interface elements should be hidden.\n   */\n\n\n  ViewerPreferences.prototype.getHideWindowUI = function () {\n    var _a, _b;\n\n    return (_b = (_a = this.HideWindowUI()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n  };\n  /**\n   * Returns `true` if PDF readers should resize the document's window to fit\n   * the size of the first displayed page.\n   * @returns Whether or not the window should be resized to fit.\n   */\n\n\n  ViewerPreferences.prototype.getFitWindow = function () {\n    var _a, _b;\n\n    return (_b = (_a = this.FitWindow()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n  };\n  /**\n   * Returns `true` if PDF readers should position the document's window in the\n   * center of the screen.\n   * @returns Whether or not to center the document window.\n   */\n\n\n  ViewerPreferences.prototype.getCenterWindow = function () {\n    var _a, _b;\n\n    return (_b = (_a = this.CenterWindow()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n  };\n  /**\n   * Returns `true` if the window's title bar should display the document\n   * `Title`, taken from the document metadata (see [[PDFDocument.getTitle]]).\n   * Returns `false` if the title bar should instead display the filename of the\n   * PDF file.\n   * @returns Whether to display the document title.\n   */\n\n\n  ViewerPreferences.prototype.getDisplayDocTitle = function () {\n    var _a, _b;\n\n    return (_b = (_a = this.DisplayDocTitle()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n  };\n  /**\n   * Returns the page mode, which tells the PDF reader how to display the\n   * document after exiting full-screen mode.\n   * @returns The page mode after exiting full-screen mode.\n   */\n\n\n  ViewerPreferences.prototype.getNonFullScreenPageMode = function () {\n    var _a, _b;\n\n    var mode = (_a = this.NonFullScreenPageMode()) === null || _a === void 0 ? void 0 : _a.decodeText();\n    return (_b = asEnum(mode, NonFullScreenPageMode)) !== null && _b !== void 0 ? _b : NonFullScreenPageMode.UseNone;\n  };\n  /**\n   * Returns the predominant reading order for text.\n   * @returns The text reading order.\n   */\n\n\n  ViewerPreferences.prototype.getReadingDirection = function () {\n    var _a, _b;\n\n    var direction = (_a = this.Direction()) === null || _a === void 0 ? void 0 : _a.decodeText();\n    return (_b = asEnum(direction, ReadingDirection)) !== null && _b !== void 0 ? _b : ReadingDirection.L2R;\n  };\n  /**\n   * Returns the page scaling option that the PDF reader should select when the\n   * print dialog is displayed.\n   * @returns The page scaling option.\n   */\n\n\n  ViewerPreferences.prototype.getPrintScaling = function () {\n    var _a, _b;\n\n    var scaling = (_a = this.PrintScaling()) === null || _a === void 0 ? void 0 : _a.decodeText();\n    return (_b = asEnum(scaling, PrintScaling)) !== null && _b !== void 0 ? _b : PrintScaling.AppDefault;\n  };\n  /**\n   * Returns the paper handling option that should be used when printing the\n   * file from the print dialog.\n   * @returns The paper handling option.\n   */\n\n\n  ViewerPreferences.prototype.getDuplex = function () {\n    var _a;\n\n    var duplex = (_a = this.Duplex()) === null || _a === void 0 ? void 0 : _a.decodeText();\n    return asEnum(duplex, Duplex);\n  };\n  /**\n   * Returns `true` if the PDF page size should be used to select the input\n   * paper tray.\n   * @returns Whether or not the PDF page size should be used to select the\n   *          input paper tray.\n   */\n\n\n  ViewerPreferences.prototype.getPickTrayByPDFSize = function () {\n    var _a;\n\n    return (_a = this.PickTrayByPDFSize()) === null || _a === void 0 ? void 0 : _a.asBoolean();\n  };\n  /**\n   * Returns an array of page number ranges, which are the values used to\n   * initialize the print dialog box when the file is printed. Each range\n   * specifies the first (`start`) and last (`end`) pages in a sub-range of\n   * pages to be printed. The first page of the PDF file is denoted by 0.\n   * For example:\n   * ```js\n   * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\n   * const includesPage3 = viewerPrefs\n   *   .getPrintRanges()\n   *   .some(pr => pr.start =< 2 && pr.end >= 2)\n   * if (includesPage3) console.log('printRange includes page 3')\n   * ```\n   * @returns An array of objects, each with the properties `start` and `end`,\n   *          denoting page indices. If not, specified an empty array is\n   *          returned.\n   */\n\n\n  ViewerPreferences.prototype.getPrintPageRange = function () {\n    var rng = this.PrintPageRange();\n    if (!rng) return [];\n    var pageRanges = [];\n\n    for (var i = 0; i < rng.size(); i += 2) {\n      // Despite the spec clearly stating that \"The first page of the PDF file\n      // shall be donoted by 1\", several test PDFs (spec 1.7) created in\n      // Acrobat XI 11.0 and also read with Reader DC 2020.013 indicate this is\n      // actually a 0 based index.\n      var start = rng.lookup(i, PDFNumber).asNumber();\n      var end = rng.lookup(i + 1, PDFNumber).asNumber();\n      pageRanges.push({\n        start: start,\n        end: end\n      });\n    }\n\n    return pageRanges;\n  };\n  /**\n   * Returns the number of copies to be printed when the print dialog is opened\n   * for this document.\n   * @returns The default number of copies to be printed.\n   */\n\n\n  ViewerPreferences.prototype.getNumCopies = function () {\n    var _a, _b;\n\n    return (_b = (_a = this.NumCopies()) === null || _a === void 0 ? void 0 : _a.asNumber()) !== null && _b !== void 0 ? _b : 1;\n  };\n  /**\n   * Choose whether the PDF reader's toolbars should be hidden while the\n   * document is active.\n   * @param hideToolbar `true` if the toolbar should be hidden.\n   */\n\n\n  ViewerPreferences.prototype.setHideToolbar = function (hideToolbar) {\n    var HideToolbar = this.dict.context.obj(hideToolbar);\n    this.dict.set(PDFName.of('HideToolbar'), HideToolbar);\n  };\n  /**\n   * Choose whether the PDF reader's menu bar should be hidden while the\n   * document is active.\n   * @param hideMenubar `true` if the menu bar should be hidden.\n   */\n\n\n  ViewerPreferences.prototype.setHideMenubar = function (hideMenubar) {\n    var HideMenubar = this.dict.context.obj(hideMenubar);\n    this.dict.set(PDFName.of('HideMenubar'), HideMenubar);\n  };\n  /**\n   * Choose whether the PDF reader should hide user interface elements in the\n   * document's window (such as scroll bars and navigation controls), leaving\n   * only the document's contents displayed.\n   * @param hideWindowUI `true` if the user interface elements should be hidden.\n   */\n\n\n  ViewerPreferences.prototype.setHideWindowUI = function (hideWindowUI) {\n    var HideWindowUI = this.dict.context.obj(hideWindowUI);\n    this.dict.set(PDFName.of('HideWindowUI'), HideWindowUI);\n  };\n  /**\n   * Choose whether the PDF reader should resize the document's window to fit\n   * the size of the first displayed page.\n   * @param fitWindow `true` if the window should be resized.\n   */\n\n\n  ViewerPreferences.prototype.setFitWindow = function (fitWindow) {\n    var FitWindow = this.dict.context.obj(fitWindow);\n    this.dict.set(PDFName.of('FitWindow'), FitWindow);\n  };\n  /**\n   * Choose whether the PDF reader should position the document's window in the\n   * center of the screen.\n   * @param centerWindow `true` if the window should be centered.\n   */\n\n\n  ViewerPreferences.prototype.setCenterWindow = function (centerWindow) {\n    var CenterWindow = this.dict.context.obj(centerWindow);\n    this.dict.set(PDFName.of('CenterWindow'), CenterWindow);\n  };\n  /**\n   * Choose whether the window's title bar should display the document `Title`\n   * taken from the document metadata (see [[PDFDocument.setTitle]]). If\n   * `false`, the title bar should instead display the PDF filename.\n   * @param displayTitle `true` if the document title should be displayed.\n   */\n\n\n  ViewerPreferences.prototype.setDisplayDocTitle = function (displayTitle) {\n    var DisplayDocTitle = this.dict.context.obj(displayTitle);\n    this.dict.set(PDFName.of('DisplayDocTitle'), DisplayDocTitle);\n  };\n  /**\n   * Choose how the PDF reader should display the document upon exiting\n   * full-screen mode. This entry is meaningful only if the value of the\n   * `PageMode` entry in the document's [[PDFCatalog]] is `FullScreen`.\n   *\n   * For example:\n   * ```js\n   * import { PDFDocument, NonFullScreenPageMode, PDFName } from 'pdf-lib'\n   *\n   * const pdfDoc = await PDFDocument.create()\n   *\n   * // Set the PageMode\n   * pdfDoc.catalog.set(PDFName.of('PageMode'),PDFName.of('FullScreen'))\n   *\n   * // Set what happens when full-screen is closed\n   * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\n   * viewerPrefs.setNonFullScreenPageMode(NonFullScreenPageMode.UseOutlines)\n   * ```\n   *\n   * @param nonFullScreenPageMode How the document should be displayed upon\n   *                              exiting full screen mode.\n   */\n\n\n  ViewerPreferences.prototype.setNonFullScreenPageMode = function (nonFullScreenPageMode) {\n    assertIsOneOf(nonFullScreenPageMode, 'nonFullScreenPageMode', NonFullScreenPageMode);\n    var mode = PDFName.of(nonFullScreenPageMode);\n    this.dict.set(PDFName.of('NonFullScreenPageMode'), mode);\n  };\n  /**\n   * Choose the predominant reading order for text.\n   *\n   * This entry has no direct effect on the document's contents or page\n   * numbering, but may be used to determine the relative positioning of pages\n   * when displayed side by side or printed n-up.\n   *\n   * For example:\n   * ```js\n   * import { PDFDocument, ReadingDirection } from 'pdf-lib'\n   *\n   * const pdfDoc = await PDFDocument.create()\n   * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\n   * viewerPrefs.setReadingDirection(ReadingDirection.R2L)\n   * ```\n   *\n   * @param readingDirection The reading order for text.\n   */\n\n\n  ViewerPreferences.prototype.setReadingDirection = function (readingDirection) {\n    assertIsOneOf(readingDirection, 'readingDirection', ReadingDirection);\n    var direction = PDFName.of(readingDirection);\n    this.dict.set(PDFName.of('Direction'), direction);\n  };\n  /**\n   * Choose the page scaling option that should be selected when a print dialog\n   * is displayed for this document.\n   *\n   * For example:\n   * ```js\n   * import { PDFDocument, PrintScaling } from 'pdf-lib'\n   *\n   * const pdfDoc = await PDFDocument.create()\n   * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\n   * viewerPrefs.setPrintScaling(PrintScaling.None)\n   * ```\n   *\n   * @param printScaling The print scaling option.\n   */\n\n\n  ViewerPreferences.prototype.setPrintScaling = function (printScaling) {\n    assertIsOneOf(printScaling, 'printScaling', PrintScaling);\n    var scaling = PDFName.of(printScaling);\n    this.dict.set(PDFName.of('PrintScaling'), scaling);\n  };\n  /**\n   * Choose the paper handling option that should be selected by default in the\n   * print dialog.\n   *\n   * For example:\n   * ```js\n   * import { PDFDocument, Duplex } from 'pdf-lib'\n   *\n   * const pdfDoc = await PDFDocument.create()\n   * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\n   * viewerPrefs.setDuplex(Duplex.DuplexFlipShortEdge)\n   * ```\n   *\n   * @param duplex The double or single sided printing option.\n   */\n\n\n  ViewerPreferences.prototype.setDuplex = function (duplex) {\n    assertIsOneOf(duplex, 'duplex', Duplex);\n    var dup = PDFName.of(duplex);\n    this.dict.set(PDFName.of('Duplex'), dup);\n  };\n  /**\n   * Choose whether the PDF document's page size should be used to select the\n   * input paper tray when printing. This setting influences only the preset\n   * values used to populate the print dialog presented by a PDF reader.\n   *\n   * If PickTrayByPDFSize is true, the check box in the print dialog associated\n   * with input paper tray should be checked. This setting has no effect on\n   * operating systems that do not provide the ability to pick the input tray\n   * by size.\n   *\n   * @param pickTrayByPDFSize `true` if the document's page size should be used\n   *                          to select the input paper tray.\n   */\n\n\n  ViewerPreferences.prototype.setPickTrayByPDFSize = function (pickTrayByPDFSize) {\n    var PickTrayByPDFSize = this.dict.context.obj(pickTrayByPDFSize);\n    this.dict.set(PDFName.of('PickTrayByPDFSize'), PickTrayByPDFSize);\n  };\n  /**\n   * Choose the page numbers used to initialize the print dialog box when the\n   * file is printed. The first page of the PDF file is denoted by 0.\n   *\n   * For example:\n   * ```js\n   * import { PDFDocument } from 'pdf-lib'\n   *\n   * const pdfDoc = await PDFDocument.create()\n   * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\n   *\n   * // We can set the default print range to only the first page\n   * viewerPrefs.setPrintPageRange({ start: 0, end: 0 })\n   *\n   * // Or we can supply noncontiguous ranges (e.g. pages 1, 3, and 5-7)\n   * viewerPrefs.setPrintPageRange([\n   *   { start: 0, end: 0 },\n   *   { start: 2, end: 2 },\n   *   { start: 4, end: 6 },\n   * ])\n   * ```\n   *\n   * @param printPageRange An object or array of objects, each with the\n   *                       properties `start` and `end`, denoting a range of\n   *                       page indices.\n   */\n\n\n  ViewerPreferences.prototype.setPrintPageRange = function (printPageRange) {\n    if (!Array.isArray(printPageRange)) printPageRange = [printPageRange];\n    var flatRange = [];\n\n    for (var idx = 0, len = printPageRange.length; idx < len; idx++) {\n      flatRange.push(printPageRange[idx].start);\n      flatRange.push(printPageRange[idx].end);\n    }\n\n    assertEachIs(flatRange, 'printPageRange', ['number']);\n    var pageRanges = this.dict.context.obj(flatRange);\n    this.dict.set(PDFName.of('PrintPageRange'), pageRanges);\n  };\n  /**\n   * Choose the default number of copies to be printed when the print dialog is\n   * opened for this file.\n   * @param numCopies The default number of copies.\n   */\n\n\n  ViewerPreferences.prototype.setNumCopies = function (numCopies) {\n    assertRange(numCopies, 'numCopies', 1, Number.MAX_VALUE);\n    assertInteger(numCopies, 'numCopies');\n    var NumCopies = this.dict.context.obj(numCopies);\n    this.dict.set(PDFName.of('NumCopies'), NumCopies);\n  };\n\n  ViewerPreferences.fromDict = function (dict) {\n    return new ViewerPreferences(dict);\n  };\n\n  ViewerPreferences.create = function (context) {\n    var dict = context.obj({});\n    return new ViewerPreferences(dict);\n  };\n\n  return ViewerPreferences;\n}();\n\nexport default ViewerPreferences;","map":{"version":3,"sources":["../../../src/core/interactive/ViewerPreferences.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import PDFArray from \"../objects/PDFArray\";\nimport PDFBool from \"../objects/PDFBool\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFNumber from \"../objects/PDFNumber\";\nimport { assertEachIs, assertInteger, assertIsOneOf, assertRange, } from \"../../utils\";\nvar asEnum = function (rawValue, enumType) {\n    if (rawValue === undefined)\n        return undefined;\n    return enumType[rawValue];\n};\nexport var NonFullScreenPageMode;\n(function (NonFullScreenPageMode) {\n    /**\n     * After exiting FullScreen mode, neither the document outline nor thumbnail\n     * images should be visible.\n     */\n    NonFullScreenPageMode[\"UseNone\"] = \"UseNone\";\n    /** After exiting FullScreen mode, the document outline should be visible. */\n    NonFullScreenPageMode[\"UseOutlines\"] = \"UseOutlines\";\n    /** After exiting FullScreen mode, thumbnail images should be visible. */\n    NonFullScreenPageMode[\"UseThumbs\"] = \"UseThumbs\";\n    /**\n     * After exiting FullScreen mode, the optional content group panel should be\n     * visible.\n     */\n    NonFullScreenPageMode[\"UseOC\"] = \"UseOC\";\n})(NonFullScreenPageMode || (NonFullScreenPageMode = {}));\nexport var ReadingDirection;\n(function (ReadingDirection) {\n    /** The predominant reading order is Left to Right. */\n    ReadingDirection[\"L2R\"] = \"L2R\";\n    /**\n     * The predominant reading order is Right to left (including vertical writing\n     * systems, such as Chinese, Japanese and Korean).\n     */\n    ReadingDirection[\"R2L\"] = \"R2L\";\n})(ReadingDirection || (ReadingDirection = {}));\nexport var PrintScaling;\n(function (PrintScaling) {\n    /** No page scaling. */\n    PrintScaling[\"None\"] = \"None\";\n    /* Use the PDF reader's default print scaling. */\n    PrintScaling[\"AppDefault\"] = \"AppDefault\";\n})(PrintScaling || (PrintScaling = {}));\nexport var Duplex;\n(function (Duplex) {\n    /** The PDF reader should print single-sided. */\n    Duplex[\"Simplex\"] = \"Simplex\";\n    /**\n     * The PDF reader should print double sided and flip on the short edge of the\n     * sheet.\n     */\n    Duplex[\"DuplexFlipShortEdge\"] = \"DuplexFlipShortEdge\";\n    /**\n     * The PDF reader should print double sided and flip on the long edge of the\n     * sheet.\n     */\n    Duplex[\"DuplexFlipLongEdge\"] = \"DuplexFlipLongEdge\";\n})(Duplex || (Duplex = {}));\nvar ViewerPreferences = /** @class */ (function () {\n    function ViewerPreferences(dict) {\n        this.dict = dict;\n    }\n    ViewerPreferences.prototype.lookupBool = function (key) {\n        var returnObj = this.dict.lookup(PDFName.of(key));\n        if (returnObj instanceof PDFBool)\n            return returnObj;\n        return undefined;\n    };\n    ViewerPreferences.prototype.lookupName = function (key) {\n        var returnObj = this.dict.lookup(PDFName.of(key));\n        if (returnObj instanceof PDFName)\n            return returnObj;\n        return undefined;\n    };\n    ViewerPreferences.prototype.HideToolbar = function () {\n        return this.lookupBool('HideToolbar');\n    };\n    ViewerPreferences.prototype.HideMenubar = function () {\n        return this.lookupBool('HideMenubar');\n    };\n    ViewerPreferences.prototype.HideWindowUI = function () {\n        return this.lookupBool('HideWindowUI');\n    };\n    ViewerPreferences.prototype.FitWindow = function () {\n        return this.lookupBool('FitWindow');\n    };\n    ViewerPreferences.prototype.CenterWindow = function () {\n        return this.lookupBool('CenterWindow');\n    };\n    ViewerPreferences.prototype.DisplayDocTitle = function () {\n        return this.lookupBool('DisplayDocTitle');\n    };\n    ViewerPreferences.prototype.NonFullScreenPageMode = function () {\n        return this.lookupName('NonFullScreenPageMode');\n    };\n    ViewerPreferences.prototype.Direction = function () {\n        return this.lookupName('Direction');\n    };\n    ViewerPreferences.prototype.PrintScaling = function () {\n        return this.lookupName('PrintScaling');\n    };\n    ViewerPreferences.prototype.Duplex = function () {\n        return this.lookupName('Duplex');\n    };\n    ViewerPreferences.prototype.PickTrayByPDFSize = function () {\n        return this.lookupBool('PickTrayByPDFSize');\n    };\n    ViewerPreferences.prototype.PrintPageRange = function () {\n        var PrintPageRange = this.dict.lookup(PDFName.of('PrintPageRange'));\n        if (PrintPageRange instanceof PDFArray)\n            return PrintPageRange;\n        return undefined;\n    };\n    ViewerPreferences.prototype.NumCopies = function () {\n        var NumCopies = this.dict.lookup(PDFName.of('NumCopies'));\n        if (NumCopies instanceof PDFNumber)\n            return NumCopies;\n        return undefined;\n    };\n    /**\n     * Returns `true` if PDF readers should hide the toolbar menus when displaying\n     * this document.\n     * @returns Whether or not toolbars should be hidden.\n     */\n    ViewerPreferences.prototype.getHideToolbar = function () {\n        var _a, _b;\n        return (_b = (_a = this.HideToolbar()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n    };\n    /**\n     * Returns `true` if PDF readers should hide the menu bar when displaying this\n     * document.\n     * @returns Whether or not the menu bar should be hidden.\n     */\n    ViewerPreferences.prototype.getHideMenubar = function () {\n        var _a, _b;\n        return (_b = (_a = this.HideMenubar()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n    };\n    /**\n     * Returns `true` if PDF readers should hide the user interface elements in\n     * the document's window (such as scroll bars and navigation controls),\n     * leaving only the document's contents displayed.\n     * @returns Whether or not user interface elements should be hidden.\n     */\n    ViewerPreferences.prototype.getHideWindowUI = function () {\n        var _a, _b;\n        return (_b = (_a = this.HideWindowUI()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n    };\n    /**\n     * Returns `true` if PDF readers should resize the document's window to fit\n     * the size of the first displayed page.\n     * @returns Whether or not the window should be resized to fit.\n     */\n    ViewerPreferences.prototype.getFitWindow = function () {\n        var _a, _b;\n        return (_b = (_a = this.FitWindow()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n    };\n    /**\n     * Returns `true` if PDF readers should position the document's window in the\n     * center of the screen.\n     * @returns Whether or not to center the document window.\n     */\n    ViewerPreferences.prototype.getCenterWindow = function () {\n        var _a, _b;\n        return (_b = (_a = this.CenterWindow()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n    };\n    /**\n     * Returns `true` if the window's title bar should display the document\n     * `Title`, taken from the document metadata (see [[PDFDocument.getTitle]]).\n     * Returns `false` if the title bar should instead display the filename of the\n     * PDF file.\n     * @returns Whether to display the document title.\n     */\n    ViewerPreferences.prototype.getDisplayDocTitle = function () {\n        var _a, _b;\n        return (_b = (_a = this.DisplayDocTitle()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n    };\n    /**\n     * Returns the page mode, which tells the PDF reader how to display the\n     * document after exiting full-screen mode.\n     * @returns The page mode after exiting full-screen mode.\n     */\n    ViewerPreferences.prototype.getNonFullScreenPageMode = function () {\n        var _a, _b;\n        var mode = (_a = this.NonFullScreenPageMode()) === null || _a === void 0 ? void 0 : _a.decodeText();\n        return (_b = asEnum(mode, NonFullScreenPageMode)) !== null && _b !== void 0 ? _b : NonFullScreenPageMode.UseNone;\n    };\n    /**\n     * Returns the predominant reading order for text.\n     * @returns The text reading order.\n     */\n    ViewerPreferences.prototype.getReadingDirection = function () {\n        var _a, _b;\n        var direction = (_a = this.Direction()) === null || _a === void 0 ? void 0 : _a.decodeText();\n        return (_b = asEnum(direction, ReadingDirection)) !== null && _b !== void 0 ? _b : ReadingDirection.L2R;\n    };\n    /**\n     * Returns the page scaling option that the PDF reader should select when the\n     * print dialog is displayed.\n     * @returns The page scaling option.\n     */\n    ViewerPreferences.prototype.getPrintScaling = function () {\n        var _a, _b;\n        var scaling = (_a = this.PrintScaling()) === null || _a === void 0 ? void 0 : _a.decodeText();\n        return (_b = asEnum(scaling, PrintScaling)) !== null && _b !== void 0 ? _b : PrintScaling.AppDefault;\n    };\n    /**\n     * Returns the paper handling option that should be used when printing the\n     * file from the print dialog.\n     * @returns The paper handling option.\n     */\n    ViewerPreferences.prototype.getDuplex = function () {\n        var _a;\n        var duplex = (_a = this.Duplex()) === null || _a === void 0 ? void 0 : _a.decodeText();\n        return asEnum(duplex, Duplex);\n    };\n    /**\n     * Returns `true` if the PDF page size should be used to select the input\n     * paper tray.\n     * @returns Whether or not the PDF page size should be used to select the\n     *          input paper tray.\n     */\n    ViewerPreferences.prototype.getPickTrayByPDFSize = function () {\n        var _a;\n        return (_a = this.PickTrayByPDFSize()) === null || _a === void 0 ? void 0 : _a.asBoolean();\n    };\n    /**\n     * Returns an array of page number ranges, which are the values used to\n     * initialize the print dialog box when the file is printed. Each range\n     * specifies the first (`start`) and last (`end`) pages in a sub-range of\n     * pages to be printed. The first page of the PDF file is denoted by 0.\n     * For example:\n     * ```js\n     * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\n     * const includesPage3 = viewerPrefs\n     *   .getPrintRanges()\n     *   .some(pr => pr.start =< 2 && pr.end >= 2)\n     * if (includesPage3) console.log('printRange includes page 3')\n     * ```\n     * @returns An array of objects, each with the properties `start` and `end`,\n     *          denoting page indices. If not, specified an empty array is\n     *          returned.\n     */\n    ViewerPreferences.prototype.getPrintPageRange = function () {\n        var rng = this.PrintPageRange();\n        if (!rng)\n            return [];\n        var pageRanges = [];\n        for (var i = 0; i < rng.size(); i += 2) {\n            // Despite the spec clearly stating that \"The first page of the PDF file\n            // shall be donoted by 1\", several test PDFs (spec 1.7) created in\n            // Acrobat XI 11.0 and also read with Reader DC 2020.013 indicate this is\n            // actually a 0 based index.\n            var start = rng.lookup(i, PDFNumber).asNumber();\n            var end = rng.lookup(i + 1, PDFNumber).asNumber();\n            pageRanges.push({ start: start, end: end });\n        }\n        return pageRanges;\n    };\n    /**\n     * Returns the number of copies to be printed when the print dialog is opened\n     * for this document.\n     * @returns The default number of copies to be printed.\n     */\n    ViewerPreferences.prototype.getNumCopies = function () {\n        var _a, _b;\n        return (_b = (_a = this.NumCopies()) === null || _a === void 0 ? void 0 : _a.asNumber()) !== null && _b !== void 0 ? _b : 1;\n    };\n    /**\n     * Choose whether the PDF reader's toolbars should be hidden while the\n     * document is active.\n     * @param hideToolbar `true` if the toolbar should be hidden.\n     */\n    ViewerPreferences.prototype.setHideToolbar = function (hideToolbar) {\n        var HideToolbar = this.dict.context.obj(hideToolbar);\n        this.dict.set(PDFName.of('HideToolbar'), HideToolbar);\n    };\n    /**\n     * Choose whether the PDF reader's menu bar should be hidden while the\n     * document is active.\n     * @param hideMenubar `true` if the menu bar should be hidden.\n     */\n    ViewerPreferences.prototype.setHideMenubar = function (hideMenubar) {\n        var HideMenubar = this.dict.context.obj(hideMenubar);\n        this.dict.set(PDFName.of('HideMenubar'), HideMenubar);\n    };\n    /**\n     * Choose whether the PDF reader should hide user interface elements in the\n     * document's window (such as scroll bars and navigation controls), leaving\n     * only the document's contents displayed.\n     * @param hideWindowUI `true` if the user interface elements should be hidden.\n     */\n    ViewerPreferences.prototype.setHideWindowUI = function (hideWindowUI) {\n        var HideWindowUI = this.dict.context.obj(hideWindowUI);\n        this.dict.set(PDFName.of('HideWindowUI'), HideWindowUI);\n    };\n    /**\n     * Choose whether the PDF reader should resize the document's window to fit\n     * the size of the first displayed page.\n     * @param fitWindow `true` if the window should be resized.\n     */\n    ViewerPreferences.prototype.setFitWindow = function (fitWindow) {\n        var FitWindow = this.dict.context.obj(fitWindow);\n        this.dict.set(PDFName.of('FitWindow'), FitWindow);\n    };\n    /**\n     * Choose whether the PDF reader should position the document's window in the\n     * center of the screen.\n     * @param centerWindow `true` if the window should be centered.\n     */\n    ViewerPreferences.prototype.setCenterWindow = function (centerWindow) {\n        var CenterWindow = this.dict.context.obj(centerWindow);\n        this.dict.set(PDFName.of('CenterWindow'), CenterWindow);\n    };\n    /**\n     * Choose whether the window's title bar should display the document `Title`\n     * taken from the document metadata (see [[PDFDocument.setTitle]]). If\n     * `false`, the title bar should instead display the PDF filename.\n     * @param displayTitle `true` if the document title should be displayed.\n     */\n    ViewerPreferences.prototype.setDisplayDocTitle = function (displayTitle) {\n        var DisplayDocTitle = this.dict.context.obj(displayTitle);\n        this.dict.set(PDFName.of('DisplayDocTitle'), DisplayDocTitle);\n    };\n    /**\n     * Choose how the PDF reader should display the document upon exiting\n     * full-screen mode. This entry is meaningful only if the value of the\n     * `PageMode` entry in the document's [[PDFCatalog]] is `FullScreen`.\n     *\n     * For example:\n     * ```js\n     * import { PDFDocument, NonFullScreenPageMode, PDFName } from 'pdf-lib'\n     *\n     * const pdfDoc = await PDFDocument.create()\n     *\n     * // Set the PageMode\n     * pdfDoc.catalog.set(PDFName.of('PageMode'),PDFName.of('FullScreen'))\n     *\n     * // Set what happens when full-screen is closed\n     * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\n     * viewerPrefs.setNonFullScreenPageMode(NonFullScreenPageMode.UseOutlines)\n     * ```\n     *\n     * @param nonFullScreenPageMode How the document should be displayed upon\n     *                              exiting full screen mode.\n     */\n    ViewerPreferences.prototype.setNonFullScreenPageMode = function (nonFullScreenPageMode) {\n        assertIsOneOf(nonFullScreenPageMode, 'nonFullScreenPageMode', NonFullScreenPageMode);\n        var mode = PDFName.of(nonFullScreenPageMode);\n        this.dict.set(PDFName.of('NonFullScreenPageMode'), mode);\n    };\n    /**\n     * Choose the predominant reading order for text.\n     *\n     * This entry has no direct effect on the document's contents or page\n     * numbering, but may be used to determine the relative positioning of pages\n     * when displayed side by side or printed n-up.\n     *\n     * For example:\n     * ```js\n     * import { PDFDocument, ReadingDirection } from 'pdf-lib'\n     *\n     * const pdfDoc = await PDFDocument.create()\n     * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\n     * viewerPrefs.setReadingDirection(ReadingDirection.R2L)\n     * ```\n     *\n     * @param readingDirection The reading order for text.\n     */\n    ViewerPreferences.prototype.setReadingDirection = function (readingDirection) {\n        assertIsOneOf(readingDirection, 'readingDirection', ReadingDirection);\n        var direction = PDFName.of(readingDirection);\n        this.dict.set(PDFName.of('Direction'), direction);\n    };\n    /**\n     * Choose the page scaling option that should be selected when a print dialog\n     * is displayed for this document.\n     *\n     * For example:\n     * ```js\n     * import { PDFDocument, PrintScaling } from 'pdf-lib'\n     *\n     * const pdfDoc = await PDFDocument.create()\n     * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\n     * viewerPrefs.setPrintScaling(PrintScaling.None)\n     * ```\n     *\n     * @param printScaling The print scaling option.\n     */\n    ViewerPreferences.prototype.setPrintScaling = function (printScaling) {\n        assertIsOneOf(printScaling, 'printScaling', PrintScaling);\n        var scaling = PDFName.of(printScaling);\n        this.dict.set(PDFName.of('PrintScaling'), scaling);\n    };\n    /**\n     * Choose the paper handling option that should be selected by default in the\n     * print dialog.\n     *\n     * For example:\n     * ```js\n     * import { PDFDocument, Duplex } from 'pdf-lib'\n     *\n     * const pdfDoc = await PDFDocument.create()\n     * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\n     * viewerPrefs.setDuplex(Duplex.DuplexFlipShortEdge)\n     * ```\n     *\n     * @param duplex The double or single sided printing option.\n     */\n    ViewerPreferences.prototype.setDuplex = function (duplex) {\n        assertIsOneOf(duplex, 'duplex', Duplex);\n        var dup = PDFName.of(duplex);\n        this.dict.set(PDFName.of('Duplex'), dup);\n    };\n    /**\n     * Choose whether the PDF document's page size should be used to select the\n     * input paper tray when printing. This setting influences only the preset\n     * values used to populate the print dialog presented by a PDF reader.\n     *\n     * If PickTrayByPDFSize is true, the check box in the print dialog associated\n     * with input paper tray should be checked. This setting has no effect on\n     * operating systems that do not provide the ability to pick the input tray\n     * by size.\n     *\n     * @param pickTrayByPDFSize `true` if the document's page size should be used\n     *                          to select the input paper tray.\n     */\n    ViewerPreferences.prototype.setPickTrayByPDFSize = function (pickTrayByPDFSize) {\n        var PickTrayByPDFSize = this.dict.context.obj(pickTrayByPDFSize);\n        this.dict.set(PDFName.of('PickTrayByPDFSize'), PickTrayByPDFSize);\n    };\n    /**\n     * Choose the page numbers used to initialize the print dialog box when the\n     * file is printed. The first page of the PDF file is denoted by 0.\n     *\n     * For example:\n     * ```js\n     * import { PDFDocument } from 'pdf-lib'\n     *\n     * const pdfDoc = await PDFDocument.create()\n     * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\n     *\n     * // We can set the default print range to only the first page\n     * viewerPrefs.setPrintPageRange({ start: 0, end: 0 })\n     *\n     * // Or we can supply noncontiguous ranges (e.g. pages 1, 3, and 5-7)\n     * viewerPrefs.setPrintPageRange([\n     *   { start: 0, end: 0 },\n     *   { start: 2, end: 2 },\n     *   { start: 4, end: 6 },\n     * ])\n     * ```\n     *\n     * @param printPageRange An object or array of objects, each with the\n     *                       properties `start` and `end`, denoting a range of\n     *                       page indices.\n     */\n    ViewerPreferences.prototype.setPrintPageRange = function (printPageRange) {\n        if (!Array.isArray(printPageRange))\n            printPageRange = [printPageRange];\n        var flatRange = [];\n        for (var idx = 0, len = printPageRange.length; idx < len; idx++) {\n            flatRange.push(printPageRange[idx].start);\n            flatRange.push(printPageRange[idx].end);\n        }\n        assertEachIs(flatRange, 'printPageRange', ['number']);\n        var pageRanges = this.dict.context.obj(flatRange);\n        this.dict.set(PDFName.of('PrintPageRange'), pageRanges);\n    };\n    /**\n     * Choose the default number of copies to be printed when the print dialog is\n     * opened for this file.\n     * @param numCopies The default number of copies.\n     */\n    ViewerPreferences.prototype.setNumCopies = function (numCopies) {\n        assertRange(numCopies, 'numCopies', 1, Number.MAX_VALUE);\n        assertInteger(numCopies, 'numCopies');\n        var NumCopies = this.dict.context.obj(numCopies);\n        this.dict.set(PDFName.of('NumCopies'), NumCopies);\n    };\n    ViewerPreferences.fromDict = function (dict) {\n        return new ViewerPreferences(dict);\n    };\n    ViewerPreferences.create = function (context) {\n        var dict = context.obj({});\n        return new ViewerPreferences(dict);\n    };\n    return ViewerPreferences;\n}());\nexport default ViewerPreferences;\n//# sourceMappingURL=ViewerPreferences.js.map"]},"metadata":{},"sourceType":"module"}