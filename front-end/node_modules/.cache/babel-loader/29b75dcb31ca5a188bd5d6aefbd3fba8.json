{"ast":null,"code":"import { toHexString, toHexStringOfMinLength } from \"../../utils\";\nimport { hasSurrogates, highSurrogate, isWithinBMP, lowSurrogate } from \"../../utils/unicode\";\n/** `glyphs` should be an array of unique glyphs */\n\nexport var createCmap = function (glyphs, glyphId) {\n  var bfChars = new Array(glyphs.length);\n\n  for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n    var glyph = glyphs[idx];\n    var id = cmapHexFormat(cmapHexString(glyphId(glyph)));\n    var unicode = cmapHexFormat.apply(void 0, glyph.codePoints.map(cmapCodePointFormat));\n    bfChars[idx] = [id, unicode];\n  }\n\n  return fillCmapTemplate(bfChars);\n};\n/* =============================== Templates ================================ */\n\nvar fillCmapTemplate = function (bfChars) {\n  return \"/CIDInit /ProcSet findresource begin\\n12 dict begin\\nbegincmap\\n/CIDSystemInfo <<\\n  /Registry (Adobe)\\n  /Ordering (UCS)\\n  /Supplement 0\\n>> def\\n/CMapName /Adobe-Identity-UCS def\\n/CMapType 2 def\\n1 begincodespacerange\\n<0000><ffff>\\nendcodespacerange\\n\" + bfChars.length + \" beginbfchar\\n\" + bfChars.map(function (_a) {\n    var glyphId = _a[0],\n        codePoint = _a[1];\n    return glyphId + \" \" + codePoint;\n  }).join('\\n') + \"\\nendbfchar\\nendcmap\\nCMapName currentdict /CMap defineresource pop\\nend\\nend\";\n};\n/* =============================== Utilities ================================ */\n\n\nvar cmapHexFormat = function () {\n  var values = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    values[_i] = arguments[_i];\n  }\n\n  return \"<\" + values.join('') + \">\";\n};\n\nvar cmapHexString = function (value) {\n  return toHexStringOfMinLength(value, 4);\n};\n\nvar cmapCodePointFormat = function (codePoint) {\n  if (isWithinBMP(codePoint)) return cmapHexString(codePoint);\n\n  if (hasSurrogates(codePoint)) {\n    var hs = highSurrogate(codePoint);\n    var ls = lowSurrogate(codePoint);\n    return \"\" + cmapHexString(hs) + cmapHexString(ls);\n  }\n\n  var hex = toHexString(codePoint);\n  var msg = \"0x\" + hex + \" is not a valid UTF-8 or UTF-16 codepoint.\";\n  throw new Error(msg);\n};","map":{"version":3,"sources":["../../../src/core/embedders/CMap.ts"],"names":[],"mappings":"AAEA,SAAS,WAAT,EAAsB,sBAAtB,QAA8C,aAA9C;AACA,SACE,aADF,EAEE,aAFF,EAGE,WAHF,EAIE,YAJF,QAKC,qBALD;AAUA;;AACA,OAAO,IAAM,UAAU,GAAG,UAAC,MAAD,EAAkB,OAAlB,EAAgD;AACxE,MAAM,OAAO,GAAa,IAAI,KAAJ,CAAU,MAAM,CAAC,MAAjB,CAA1B;;AACA,OAAK,IAAI,GAAG,GAAG,CAAV,EAAa,GAAG,GAAG,MAAM,CAAC,MAA/B,EAAuC,GAAG,GAAG,GAA7C,EAAkD,GAAG,EAArD,EAAyD;AACvD,QAAM,KAAK,GAAG,MAAM,CAAC,GAAD,CAApB;AACA,QAAM,EAAE,GAAG,aAAa,CAAC,aAAa,CAAC,OAAO,CAAC,KAAD,CAAR,CAAd,CAAxB;AACA,QAAM,OAAO,GAAG,aAAa,CAAA,KAAb,CAAa,KAAA,CAAb,EAAiB,KAAK,CAAC,UAAN,CAAiB,GAAjB,CAAqB,mBAArB,CAAjB,CAAhB;AACA,IAAA,OAAO,CAAC,GAAD,CAAP,GAAe,CAAC,EAAD,EAAK,OAAL,CAAf;AACD;;AAED,SAAO,gBAAgB,CAAC,OAAD,CAAvB;AACD,CAVM;AAYP;;AAEA,IAAM,gBAAgB,GAAG,UAAC,OAAD,EAAkB;AAAK,SAAA,qQAc9C,OAAO,CAAC,MAdsC,GAchC,gBAdgC,GAe9C,OAAO,CAAC,GAAR,CAAY,UAAC,EAAD,EAAqB;QAAnB,OAAO,GAAA,EAAA,CAAA,CAAA,C;QAAE,SAAS,GAAA,EAAA,CAAA,CAAA,C;AAAM,WAAG,OAAO,GAAA,GAAP,GAAW,SAAd;AAAyB,GAA/D,EAAiE,IAAjE,CAAsE,IAAtE,CAf8C,GAAA,+EAAA;AAqB/C,CArBD;AAuBA;;;AAEA,IAAM,aAAa,GAAG,YAAA;AAAC,MAAA,MAAA,GAAA,EAAA;;OAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAmB;AAAnB,IAAA,MAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AAAwB,SAAA,MAAI,MAAM,CAAC,IAAP,CAAY,EAAZ,CAAJ,GAAmB,GAAnB;AAAsB,CAArE;;AAEA,IAAM,aAAa,GAAG,UAAC,KAAD,EAAc;AAAK,SAAA,sBAAsB,CAAC,KAAD,EAAtB,CAAsB,CAAtB;AAAgC,CAAzE;;AAEA,IAAM,mBAAmB,GAAG,UAAC,SAAD,EAAkB;AAC5C,MAAI,WAAW,CAAC,SAAD,CAAf,EAA4B,OAAO,aAAa,CAAC,SAAD,CAApB;;AAE5B,MAAI,aAAa,CAAC,SAAD,CAAjB,EAA8B;AAC5B,QAAM,EAAE,GAAG,aAAa,CAAC,SAAD,CAAxB;AACA,QAAM,EAAE,GAAG,YAAY,CAAC,SAAD,CAAvB;AACA,WAAO,KAAG,aAAa,CAAC,EAAD,CAAhB,GAAuB,aAAa,CAAC,EAAD,CAA3C;AACD;;AAED,MAAM,GAAG,GAAG,WAAW,CAAC,SAAD,CAAvB;AACA,MAAM,GAAG,GAAG,OAAK,GAAL,GAAQ,4CAApB;AACA,QAAM,IAAI,KAAJ,CAAU,GAAV,CAAN;AACD,CAZD","sourceRoot":"","sourcesContent":["import { toHexString, toHexStringOfMinLength } from \"../../utils\";\nimport { hasSurrogates, highSurrogate, isWithinBMP, lowSurrogate, } from \"../../utils/unicode\";\n/** `glyphs` should be an array of unique glyphs */\nexport var createCmap = function (glyphs, glyphId) {\n    var bfChars = new Array(glyphs.length);\n    for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n        var glyph = glyphs[idx];\n        var id = cmapHexFormat(cmapHexString(glyphId(glyph)));\n        var unicode = cmapHexFormat.apply(void 0, glyph.codePoints.map(cmapCodePointFormat));\n        bfChars[idx] = [id, unicode];\n    }\n    return fillCmapTemplate(bfChars);\n};\n/* =============================== Templates ================================ */\nvar fillCmapTemplate = function (bfChars) { return \"/CIDInit /ProcSet findresource begin\\n12 dict begin\\nbegincmap\\n/CIDSystemInfo <<\\n  /Registry (Adobe)\\n  /Ordering (UCS)\\n  /Supplement 0\\n>> def\\n/CMapName /Adobe-Identity-UCS def\\n/CMapType 2 def\\n1 begincodespacerange\\n<0000><ffff>\\nendcodespacerange\\n\" + bfChars.length + \" beginbfchar\\n\" + bfChars.map(function (_a) {\n    var glyphId = _a[0], codePoint = _a[1];\n    return glyphId + \" \" + codePoint;\n}).join('\\n') + \"\\nendbfchar\\nendcmap\\nCMapName currentdict /CMap defineresource pop\\nend\\nend\"; };\n/* =============================== Utilities ================================ */\nvar cmapHexFormat = function () {\n    var values = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        values[_i] = arguments[_i];\n    }\n    return \"<\" + values.join('') + \">\";\n};\nvar cmapHexString = function (value) { return toHexStringOfMinLength(value, 4); };\nvar cmapCodePointFormat = function (codePoint) {\n    if (isWithinBMP(codePoint))\n        return cmapHexString(codePoint);\n    if (hasSurrogates(codePoint)) {\n        var hs = highSurrogate(codePoint);\n        var ls = lowSurrogate(codePoint);\n        return \"\" + cmapHexString(hs) + cmapHexString(ls);\n    }\n    var hex = toHexString(codePoint);\n    var msg = \"0x\" + hex + \" is not a valid UTF-8 or UTF-16 codepoint.\";\n    throw new Error(msg);\n};\n//# sourceMappingURL=CMap.js.map"]},"metadata":{},"sourceType":"module"}