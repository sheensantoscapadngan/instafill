{"ast":null,"code":"/* tslint:disable max-classes-per-file */\nimport { decompressJson, padStart } from './utils';\nimport AllEncodingsCompressed from './all-encodings.compressed.json';\nvar decompressedEncodings = decompressJson(AllEncodingsCompressed);\nvar allUnicodeMappings = JSON.parse(decompressedEncodings);\n\nvar Encoding =\n/** @class */\nfunction () {\n  function Encoding(name, unicodeMappings) {\n    var _this = this;\n\n    this.canEncodeUnicodeCodePoint = function (codePoint) {\n      return codePoint in _this.unicodeMappings;\n    };\n\n    this.encodeUnicodeCodePoint = function (codePoint) {\n      var mapped = _this.unicodeMappings[codePoint];\n\n      if (!mapped) {\n        var str = String.fromCharCode(codePoint);\n        var hexCode = \"0x\" + padStart(codePoint.toString(16), 4, '0');\n        var msg = _this.name + \" cannot encode \\\"\" + str + \"\\\" (\" + hexCode + \")\";\n        throw new Error(msg);\n      }\n\n      return {\n        code: mapped[0],\n        name: mapped[1]\n      };\n    };\n\n    this.name = name;\n    this.supportedCodePoints = Object.keys(unicodeMappings).map(Number).sort(function (a, b) {\n      return a - b;\n    });\n    this.unicodeMappings = unicodeMappings;\n  }\n\n  return Encoding;\n}();\n\nexport var Encodings = {\n  Symbol: new Encoding('Symbol', allUnicodeMappings.symbol),\n  ZapfDingbats: new Encoding('ZapfDingbats', allUnicodeMappings.zapfdingbats),\n  WinAnsi: new Encoding('WinAnsi', allUnicodeMappings.win1252)\n};","map":{"version":3,"sources":["E:/PROJECTS/instafill_local/instafill/front-end/node_modules/@pdf-lib/standard-fonts/es/Encoding.js"],"names":["decompressJson","padStart","AllEncodingsCompressed","decompressedEncodings","allUnicodeMappings","JSON","parse","Encoding","name","unicodeMappings","_this","canEncodeUnicodeCodePoint","codePoint","encodeUnicodeCodePoint","mapped","str","String","fromCharCode","hexCode","toString","msg","Error","code","supportedCodePoints","Object","keys","map","Number","sort","a","b","Encodings","Symbol","symbol","ZapfDingbats","zapfdingbats","WinAnsi","win1252"],"mappings":"AAAA;AACA,SAASA,cAAT,EAAyBC,QAAzB,QAAyC,SAAzC;AACA,OAAOC,sBAAP,MAAmC,iCAAnC;AACA,IAAIC,qBAAqB,GAAGH,cAAc,CAACE,sBAAD,CAA1C;AACA,IAAIE,kBAAkB,GAAGC,IAAI,CAACC,KAAL,CAAWH,qBAAX,CAAzB;;AACA,IAAII,QAAQ;AAAG;AAAe,YAAY;AACtC,WAASA,QAAT,CAAkBC,IAAlB,EAAwBC,eAAxB,EAAyC;AACrC,QAAIC,KAAK,GAAG,IAAZ;;AACA,SAAKC,yBAAL,GAAiC,UAAUC,SAAV,EAAqB;AAClD,aAAOA,SAAS,IAAIF,KAAK,CAACD,eAA1B;AACH,KAFD;;AAGA,SAAKI,sBAAL,GAA8B,UAAUD,SAAV,EAAqB;AAC/C,UAAIE,MAAM,GAAGJ,KAAK,CAACD,eAAN,CAAsBG,SAAtB,CAAb;;AACA,UAAI,CAACE,MAAL,EAAa;AACT,YAAIC,GAAG,GAAGC,MAAM,CAACC,YAAP,CAAoBL,SAApB,CAAV;AACA,YAAIM,OAAO,GAAG,OAAOjB,QAAQ,CAACW,SAAS,CAACO,QAAV,CAAmB,EAAnB,CAAD,EAAyB,CAAzB,EAA4B,GAA5B,CAA7B;AACA,YAAIC,GAAG,GAAGV,KAAK,CAACF,IAAN,GAAa,mBAAb,GAAmCO,GAAnC,GAAyC,MAAzC,GAAkDG,OAAlD,GAA4D,GAAtE;AACA,cAAM,IAAIG,KAAJ,CAAUD,GAAV,CAAN;AACH;;AACD,aAAO;AAAEE,QAAAA,IAAI,EAAER,MAAM,CAAC,CAAD,CAAd;AAAmBN,QAAAA,IAAI,EAAEM,MAAM,CAAC,CAAD;AAA/B,OAAP;AACH,KATD;;AAUA,SAAKN,IAAL,GAAYA,IAAZ;AACA,SAAKe,mBAAL,GAA2BC,MAAM,CAACC,IAAP,CAAYhB,eAAZ,EACtBiB,GADsB,CAClBC,MADkB,EAEtBC,IAFsB,CAEjB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAAE,aAAOD,CAAC,GAAGC,CAAX;AAAe,KAFhB,CAA3B;AAGA,SAAKrB,eAAL,GAAuBA,eAAvB;AACH;;AACD,SAAOF,QAAP;AACH,CAvB6B,EAA9B;;AAwBA,OAAO,IAAIwB,SAAS,GAAG;AACnBC,EAAAA,MAAM,EAAE,IAAIzB,QAAJ,CAAa,QAAb,EAAuBH,kBAAkB,CAAC6B,MAA1C,CADW;AAEnBC,EAAAA,YAAY,EAAE,IAAI3B,QAAJ,CAAa,cAAb,EAA6BH,kBAAkB,CAAC+B,YAAhD,CAFK;AAGnBC,EAAAA,OAAO,EAAE,IAAI7B,QAAJ,CAAa,SAAb,EAAwBH,kBAAkB,CAACiC,OAA3C;AAHU,CAAhB","sourcesContent":["/* tslint:disable max-classes-per-file */\nimport { decompressJson, padStart } from './utils';\nimport AllEncodingsCompressed from './all-encodings.compressed.json';\nvar decompressedEncodings = decompressJson(AllEncodingsCompressed);\nvar allUnicodeMappings = JSON.parse(decompressedEncodings);\nvar Encoding = /** @class */ (function () {\n    function Encoding(name, unicodeMappings) {\n        var _this = this;\n        this.canEncodeUnicodeCodePoint = function (codePoint) {\n            return codePoint in _this.unicodeMappings;\n        };\n        this.encodeUnicodeCodePoint = function (codePoint) {\n            var mapped = _this.unicodeMappings[codePoint];\n            if (!mapped) {\n                var str = String.fromCharCode(codePoint);\n                var hexCode = \"0x\" + padStart(codePoint.toString(16), 4, '0');\n                var msg = _this.name + \" cannot encode \\\"\" + str + \"\\\" (\" + hexCode + \")\";\n                throw new Error(msg);\n            }\n            return { code: mapped[0], name: mapped[1] };\n        };\n        this.name = name;\n        this.supportedCodePoints = Object.keys(unicodeMappings)\n            .map(Number)\n            .sort(function (a, b) { return a - b; });\n        this.unicodeMappings = unicodeMappings;\n    }\n    return Encoding;\n}());\nexport var Encodings = {\n    Symbol: new Encoding('Symbol', allUnicodeMappings.symbol),\n    ZapfDingbats: new Encoding('ZapfDingbats', allUnicodeMappings.zapfdingbats),\n    WinAnsi: new Encoding('WinAnsi', allUnicodeMappings.win1252),\n};\n"]},"metadata":{},"sourceType":"module"}