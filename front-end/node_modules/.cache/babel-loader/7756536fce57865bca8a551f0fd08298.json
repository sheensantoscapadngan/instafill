{"ast":null,"code":"// tslint:disable radix\n\n/**\r\n * Converts a number to its string representation in decimal. This function\r\n * differs from simply converting a number to a string with `.toString()`\r\n * because this function's output string will **not** contain exponential\r\n * notation.\r\n *\r\n * Credit: https://stackoverflow.com/a/46545519\r\n */\nexport var numberToString = function (num) {\n  var numStr = String(num);\n\n  if (Math.abs(num) < 1.0) {\n    var e = parseInt(num.toString().split('e-')[1]);\n\n    if (e) {\n      var negative = num < 0;\n      if (negative) num *= -1;\n      num *= Math.pow(10, e - 1);\n      numStr = '0.' + new Array(e).join('0') + num.toString().substring(2);\n      if (negative) numStr = '-' + numStr;\n    }\n  } else {\n    var e = parseInt(num.toString().split('+')[1]);\n\n    if (e > 20) {\n      e -= 20;\n      num /= Math.pow(10, e);\n      numStr = num.toString() + new Array(e + 1).join('0');\n    }\n  }\n\n  return numStr;\n};\nexport var sizeInBytes = function (n) {\n  return Math.ceil(n.toString(2).length / 8);\n};\n/**\r\n * Converts a number into its constituent bytes and returns them as\r\n * a number[].\r\n *\r\n * Returns most significant byte as first element in array. It may be necessary\r\n * to call .reverse() to get the bits in the desired order.\r\n *\r\n * Example:\r\n *   bytesFor(0x02A41E) => [ 0b10, 0b10100100, 0b11110 ]\r\n *\r\n * Credit for algorithm: https://stackoverflow.com/a/1936865\r\n */\n\nexport var bytesFor = function (n) {\n  var bytes = new Uint8Array(sizeInBytes(n));\n\n  for (var i = 1; i <= bytes.length; i++) {\n    bytes[i - 1] = n >> (bytes.length - i) * 8;\n  }\n\n  return bytes;\n};","map":{"version":3,"sources":["../../src/utils/numbers.ts"],"names":[],"mappings":"AAAA;;AAEA;;;;;;;AAOG;AACH,OAAO,IAAM,cAAc,GAAG,UAAC,GAAD,EAAY;AACxC,MAAI,MAAM,GAAG,MAAM,CAAC,GAAD,CAAnB;;AAEA,MAAI,IAAI,CAAC,GAAL,CAAS,GAAT,IAAgB,GAApB,EAAyB;AACvB,QAAM,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,QAAJ,GAAe,KAAf,CAAqB,IAArB,EAA2B,CAA3B,CAAD,CAAlB;;AACA,QAAI,CAAJ,EAAO;AACL,UAAM,QAAQ,GAAG,GAAG,GAAG,CAAvB;AACA,UAAI,QAAJ,EAAc,GAAG,IAAI,CAAC,CAAR;AACd,MAAA,GAAG,IAAI,IAAI,CAAC,GAAL,CAAS,EAAT,EAAa,CAAC,GAAG,CAAjB,CAAP;AACA,MAAA,MAAM,GAAG,OAAO,IAAI,KAAJ,CAAU,CAAV,EAAa,IAAb,CAAkB,GAAlB,CAAP,GAAgC,GAAG,CAAC,QAAJ,GAAe,SAAf,CAAyB,CAAzB,CAAzC;AACA,UAAI,QAAJ,EAAc,MAAM,GAAG,MAAM,MAAf;AACf;AACF,GATD,MASO;AACL,QAAI,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,QAAJ,GAAe,KAAf,CAAqB,GAArB,EAA0B,CAA1B,CAAD,CAAhB;;AACA,QAAI,CAAC,GAAG,EAAR,EAAY;AACV,MAAA,CAAC,IAAI,EAAL;AACA,MAAA,GAAG,IAAI,IAAI,CAAC,GAAL,CAAS,EAAT,EAAa,CAAb,CAAP;AACA,MAAA,MAAM,GAAG,GAAG,CAAC,QAAJ,KAAiB,IAAI,KAAJ,CAAU,CAAC,GAAG,CAAd,EAAiB,IAAjB,CAAsB,GAAtB,CAA1B;AACD;AACF;;AAED,SAAO,MAAP;AACD,CAtBM;AAwBP,OAAO,IAAM,WAAW,GAAG,UAAC,CAAD,EAAU;AAAK,SAAA,IAAI,CAAC,IAAL,CAAU,CAAC,CAAC,QAAF,CAAW,CAAX,EAAc,MAAd,GAAV,CAAA,CAAA;AAAmC,CAAtE;AAEP;;;;;;;;;;;AAWG;;AACH,OAAO,IAAM,QAAQ,GAAG,UAAC,CAAD,EAAU;AAChC,MAAM,KAAK,GAAG,IAAI,UAAJ,CAAe,WAAW,CAAC,CAAD,CAA1B,CAAd;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,IAAI,KAAK,CAAC,MAA3B,EAAmC,CAAC,EAApC,EAAwC;AACtC,IAAA,KAAK,CAAC,CAAC,GAAG,CAAL,CAAL,GAAe,CAAC,IAAK,CAAC,KAAK,CAAC,MAAN,GAAe,CAAhB,IAAqB,CAA1C;AACD;;AACD,SAAO,KAAP;AACD,CANM","sourceRoot":"","sourcesContent":["// tslint:disable radix\r\n/**\r\n * Converts a number to its string representation in decimal. This function\r\n * differs from simply converting a number to a string with `.toString()`\r\n * because this function's output string will **not** contain exponential\r\n * notation.\r\n *\r\n * Credit: https://stackoverflow.com/a/46545519\r\n */\r\nexport var numberToString = function (num) {\r\n    var numStr = String(num);\r\n    if (Math.abs(num) < 1.0) {\r\n        var e = parseInt(num.toString().split('e-')[1]);\r\n        if (e) {\r\n            var negative = num < 0;\r\n            if (negative)\r\n                num *= -1;\r\n            num *= Math.pow(10, e - 1);\r\n            numStr = '0.' + new Array(e).join('0') + num.toString().substring(2);\r\n            if (negative)\r\n                numStr = '-' + numStr;\r\n        }\r\n    }\r\n    else {\r\n        var e = parseInt(num.toString().split('+')[1]);\r\n        if (e > 20) {\r\n            e -= 20;\r\n            num /= Math.pow(10, e);\r\n            numStr = num.toString() + new Array(e + 1).join('0');\r\n        }\r\n    }\r\n    return numStr;\r\n};\r\nexport var sizeInBytes = function (n) { return Math.ceil(n.toString(2).length / 8); };\r\n/**\r\n * Converts a number into its constituent bytes and returns them as\r\n * a number[].\r\n *\r\n * Returns most significant byte as first element in array. It may be necessary\r\n * to call .reverse() to get the bits in the desired order.\r\n *\r\n * Example:\r\n *   bytesFor(0x02A41E) => [ 0b10, 0b10100100, 0b11110 ]\r\n *\r\n * Credit for algorithm: https://stackoverflow.com/a/1936865\r\n */\r\nexport var bytesFor = function (n) {\r\n    var bytes = new Uint8Array(sizeInBytes(n));\r\n    for (var i = 1; i <= bytes.length; i++) {\r\n        bytes[i - 1] = n >> ((bytes.length - i) * 8);\r\n    }\r\n    return bytes;\r\n};\r\n//# sourceMappingURL=numbers.js.map"]},"metadata":{},"sourceType":"module"}