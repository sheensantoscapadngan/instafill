{"ast":null,"code":"import { createContext, useContext, useMemo, createElement } from 'react';\nimport { __rest, __spread } from 'tslib';\n/**\n * @public\n */\n\nvar MotionConfigContext = createContext({\n  transformPagePoint: function (p) {\n    return p;\n  },\n  features: [],\n  isStatic: false\n});\n/**\n * MotionConfig can be used in combination with the `m` component to cut bundle size\n * and dynamically load only the features you use.\n *\n * ```jsx\n * import {\n *   m as motion,\n *   AnimationFeature,\n *   MotionConfig\n * } from \"framer-motion\"\n *\n * export function App() {\n *   return (\n *     <MotionConfig features={[AnimationFeature]}>\n *       <motion.div animate={{ x: 100 }} />\n *     </MotionConfig>\n *   )\n * }\n * ```\n *\n * @public\n */\n\nfunction MotionConfig(_a) {\n  var children = _a.children,\n      _b = _a.features,\n      features = _b === void 0 ? [] : _b,\n      transition = _a.transition,\n      props = __rest(_a, [\"children\", \"features\", \"transition\"]);\n\n  var pluginContext = useContext(MotionConfigContext);\n\n  var loadedFeatures = __spread(new Set(__spread(pluginContext.features, features))); // We do want to rerender children when the number of loaded features changes\n\n\n  var value = useMemo(function () {\n    return {\n      features: loadedFeatures,\n      transition: transition || pluginContext.transition\n    };\n  }, [loadedFeatures.length, transition]); // Mutative to prevent triggering rerenders in all listening\n  // components every time this component renders\n\n  for (var key in props) {\n    value[key] = props[key];\n  }\n\n  return createElement(MotionConfigContext.Provider, {\n    value: value\n  }, children);\n}\n\nexport { MotionConfig, MotionConfigContext };","map":{"version":3,"sources":["F:/github_repos/instafill/front-end/node_modules/framer-motion/dist/es/context/MotionConfigContext.js"],"names":["createContext","useContext","useMemo","createElement","__rest","__spread","MotionConfigContext","transformPagePoint","p","features","isStatic","MotionConfig","_a","children","_b","transition","props","pluginContext","loadedFeatures","Set","value","length","key","Provider"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,OAApC,EAA6CC,aAA7C,QAAkE,OAAlE;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,OAAjC;AAEA;AACA;AACA;;AACA,IAAIC,mBAAmB,GAAGN,aAAa,CAAC;AACpCO,EAAAA,kBAAkB,EAAE,UAAUC,CAAV,EAAa;AAAE,WAAOA,CAAP;AAAW,GADV;AAEpCC,EAAAA,QAAQ,EAAE,EAF0B;AAGpCC,EAAAA,QAAQ,EAAE;AAH0B,CAAD,CAAvC;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,YAAT,CAAsBC,EAAtB,EAA0B;AACtB,MAAIC,QAAQ,GAAGD,EAAE,CAACC,QAAlB;AAAA,MAA4BC,EAAE,GAAGF,EAAE,CAACH,QAApC;AAAA,MAA8CA,QAAQ,GAAGK,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EAA9E;AAAA,MAAkFC,UAAU,GAAGH,EAAE,CAACG,UAAlG;AAAA,MAA8GC,KAAK,GAAGZ,MAAM,CAACQ,EAAD,EAAK,CAAC,UAAD,EAAa,UAAb,EAAyB,YAAzB,CAAL,CAA5H;;AACA,MAAIK,aAAa,GAAGhB,UAAU,CAACK,mBAAD,CAA9B;;AACA,MAAIY,cAAc,GAAGb,QAAQ,CAAC,IAAIc,GAAJ,CAAQd,QAAQ,CAACY,aAAa,CAACR,QAAf,EAAyBA,QAAzB,CAAhB,CAAD,CAA7B,CAHsB,CAItB;;;AACA,MAAIW,KAAK,GAAGlB,OAAO,CAAC,YAAY;AAAE,WAAQ;AACtCO,MAAAA,QAAQ,EAAES,cAD4B;AAEtCH,MAAAA,UAAU,EAAEA,UAAU,IAAIE,aAAa,CAACF;AAFF,KAAR;AAG7B,GAHc,EAGZ,CAACG,cAAc,CAACG,MAAhB,EAAwBN,UAAxB,CAHY,CAAnB,CALsB,CAStB;AACA;;AACA,OAAK,IAAIO,GAAT,IAAgBN,KAAhB,EAAuB;AACnBI,IAAAA,KAAK,CAACE,GAAD,CAAL,GAAaN,KAAK,CAACM,GAAD,CAAlB;AACH;;AACD,SAAQnB,aAAa,CAACG,mBAAmB,CAACiB,QAArB,EAA+B;AAAEH,IAAAA,KAAK,EAAEA;AAAT,GAA/B,EAAiDP,QAAjD,CAArB;AACH;;AAED,SAASF,YAAT,EAAuBL,mBAAvB","sourcesContent":["import { createContext, useContext, useMemo, createElement } from 'react';\nimport { __rest, __spread } from 'tslib';\n\n/**\n * @public\n */\nvar MotionConfigContext = createContext({\n    transformPagePoint: function (p) { return p; },\n    features: [],\n    isStatic: false,\n});\n/**\n * MotionConfig can be used in combination with the `m` component to cut bundle size\n * and dynamically load only the features you use.\n *\n * ```jsx\n * import {\n *   m as motion,\n *   AnimationFeature,\n *   MotionConfig\n * } from \"framer-motion\"\n *\n * export function App() {\n *   return (\n *     <MotionConfig features={[AnimationFeature]}>\n *       <motion.div animate={{ x: 100 }} />\n *     </MotionConfig>\n *   )\n * }\n * ```\n *\n * @public\n */\nfunction MotionConfig(_a) {\n    var children = _a.children, _b = _a.features, features = _b === void 0 ? [] : _b, transition = _a.transition, props = __rest(_a, [\"children\", \"features\", \"transition\"]);\n    var pluginContext = useContext(MotionConfigContext);\n    var loadedFeatures = __spread(new Set(__spread(pluginContext.features, features)));\n    // We do want to rerender children when the number of loaded features changes\n    var value = useMemo(function () { return ({\n        features: loadedFeatures,\n        transition: transition || pluginContext.transition,\n    }); }, [loadedFeatures.length, transition]);\n    // Mutative to prevent triggering rerenders in all listening\n    // components every time this component renders\n    for (var key in props) {\n        value[key] = props[key];\n    }\n    return (createElement(MotionConfigContext.Provider, { value: value }, children));\n}\n\nexport { MotionConfig, MotionConfigContext };\n"]},"metadata":{},"sourceType":"module"}