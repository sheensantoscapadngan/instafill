{"ast":null,"code":"/*\r\n * Copyright 2012 Mozilla Foundation\r\n *\r\n * The Stream class contained in this file is a TypeScript port of the\r\n * JavaScript Stream class in Mozilla's pdf.js project, made available\r\n * under the Apache 2.0 open source license.\r\n */\nvar Stream =\n/** @class */\nfunction () {\n  function Stream(buffer, start, length) {\n    this.bytes = buffer;\n    this.start = start || 0;\n    this.pos = this.start;\n    this.end = !!start && !!length ? start + length : this.bytes.length;\n  }\n\n  Object.defineProperty(Stream.prototype, \"length\", {\n    get: function () {\n      return this.end - this.start;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Stream.prototype, \"isEmpty\", {\n    get: function () {\n      return this.length === 0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Stream.prototype.getByte = function () {\n    if (this.pos >= this.end) {\n      return -1;\n    }\n\n    return this.bytes[this.pos++];\n  };\n\n  Stream.prototype.getUint16 = function () {\n    var b0 = this.getByte();\n    var b1 = this.getByte();\n\n    if (b0 === -1 || b1 === -1) {\n      return -1;\n    }\n\n    return (b0 << 8) + b1;\n  };\n\n  Stream.prototype.getInt32 = function () {\n    var b0 = this.getByte();\n    var b1 = this.getByte();\n    var b2 = this.getByte();\n    var b3 = this.getByte();\n    return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;\n  }; // Returns subarray of original buffer, should only be read.\n\n\n  Stream.prototype.getBytes = function (length, forceClamped) {\n    if (forceClamped === void 0) {\n      forceClamped = false;\n    }\n\n    var bytes = this.bytes;\n    var pos = this.pos;\n    var strEnd = this.end;\n\n    if (!length) {\n      var subarray = bytes.subarray(pos, strEnd); // `this.bytes` is always a `Uint8Array` here.\n\n      return forceClamped ? new Uint8ClampedArray(subarray) : subarray;\n    } else {\n      var end = pos + length;\n\n      if (end > strEnd) {\n        end = strEnd;\n      }\n\n      this.pos = end;\n      var subarray = bytes.subarray(pos, end); // `this.bytes` is always a `Uint8Array` here.\n\n      return forceClamped ? new Uint8ClampedArray(subarray) : subarray;\n    }\n  };\n\n  Stream.prototype.peekByte = function () {\n    var peekedByte = this.getByte();\n    this.pos--;\n    return peekedByte;\n  };\n\n  Stream.prototype.peekBytes = function (length, forceClamped) {\n    if (forceClamped === void 0) {\n      forceClamped = false;\n    }\n\n    var bytes = this.getBytes(length, forceClamped);\n    this.pos -= bytes.length;\n    return bytes;\n  };\n\n  Stream.prototype.skip = function (n) {\n    if (!n) {\n      n = 1;\n    }\n\n    this.pos += n;\n  };\n\n  Stream.prototype.reset = function () {\n    this.pos = this.start;\n  };\n\n  Stream.prototype.moveStart = function () {\n    this.start = this.pos;\n  };\n\n  Stream.prototype.makeSubStream = function (start, length) {\n    return new Stream(this.bytes, start, length);\n  };\n\n  Stream.prototype.decode = function () {\n    return this.bytes;\n  };\n\n  return Stream;\n}();\n\nexport default Stream;","map":{"version":3,"sources":["../../../src/core/streams/Stream.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\r\n * Copyright 2012 Mozilla Foundation\r\n *\r\n * The Stream class contained in this file is a TypeScript port of the\r\n * JavaScript Stream class in Mozilla's pdf.js project, made available\r\n * under the Apache 2.0 open source license.\r\n */\r\nvar Stream = /** @class */ (function () {\r\n    function Stream(buffer, start, length) {\r\n        this.bytes = buffer;\r\n        this.start = start || 0;\r\n        this.pos = this.start;\r\n        this.end = !!start && !!length ? start + length : this.bytes.length;\r\n    }\r\n    Object.defineProperty(Stream.prototype, \"length\", {\r\n        get: function () {\r\n            return this.end - this.start;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Stream.prototype, \"isEmpty\", {\r\n        get: function () {\r\n            return this.length === 0;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Stream.prototype.getByte = function () {\r\n        if (this.pos >= this.end) {\r\n            return -1;\r\n        }\r\n        return this.bytes[this.pos++];\r\n    };\r\n    Stream.prototype.getUint16 = function () {\r\n        var b0 = this.getByte();\r\n        var b1 = this.getByte();\r\n        if (b0 === -1 || b1 === -1) {\r\n            return -1;\r\n        }\r\n        return (b0 << 8) + b1;\r\n    };\r\n    Stream.prototype.getInt32 = function () {\r\n        var b0 = this.getByte();\r\n        var b1 = this.getByte();\r\n        var b2 = this.getByte();\r\n        var b3 = this.getByte();\r\n        return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;\r\n    };\r\n    // Returns subarray of original buffer, should only be read.\r\n    Stream.prototype.getBytes = function (length, forceClamped) {\r\n        if (forceClamped === void 0) { forceClamped = false; }\r\n        var bytes = this.bytes;\r\n        var pos = this.pos;\r\n        var strEnd = this.end;\r\n        if (!length) {\r\n            var subarray = bytes.subarray(pos, strEnd);\r\n            // `this.bytes` is always a `Uint8Array` here.\r\n            return forceClamped ? new Uint8ClampedArray(subarray) : subarray;\r\n        }\r\n        else {\r\n            var end = pos + length;\r\n            if (end > strEnd) {\r\n                end = strEnd;\r\n            }\r\n            this.pos = end;\r\n            var subarray = bytes.subarray(pos, end);\r\n            // `this.bytes` is always a `Uint8Array` here.\r\n            return forceClamped ? new Uint8ClampedArray(subarray) : subarray;\r\n        }\r\n    };\r\n    Stream.prototype.peekByte = function () {\r\n        var peekedByte = this.getByte();\r\n        this.pos--;\r\n        return peekedByte;\r\n    };\r\n    Stream.prototype.peekBytes = function (length, forceClamped) {\r\n        if (forceClamped === void 0) { forceClamped = false; }\r\n        var bytes = this.getBytes(length, forceClamped);\r\n        this.pos -= bytes.length;\r\n        return bytes;\r\n    };\r\n    Stream.prototype.skip = function (n) {\r\n        if (!n) {\r\n            n = 1;\r\n        }\r\n        this.pos += n;\r\n    };\r\n    Stream.prototype.reset = function () {\r\n        this.pos = this.start;\r\n    };\r\n    Stream.prototype.moveStart = function () {\r\n        this.start = this.pos;\r\n    };\r\n    Stream.prototype.makeSubStream = function (start, length) {\r\n        return new Stream(this.bytes, start, length);\r\n    };\r\n    Stream.prototype.decode = function () {\r\n        return this.bytes;\r\n    };\r\n    return Stream;\r\n}());\r\nexport default Stream;\r\n//# sourceMappingURL=Stream.js.map"]},"metadata":{},"sourceType":"module"}