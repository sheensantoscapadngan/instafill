{"ast":null,"code":"var _jsxFileName = \"F:\\\\github_repos\\\\instafill\\\\front-end\\\\src\\\\components\\\\common\\\\dropzone\\\\DropzonePDF.jsx\";\nimport React, { useCallback } from 'react';\nimport './Dropzone.css';\nimport { useDropzone } from 'react-dropzone';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faUpload } from '@fortawesome/free-solid-svg-icons';\nimport * as pdflib from '../../../pdflib/processPdf.js';\nimport 'react-dropzone-uploader/dist/styles.css';\nimport Dropzone from 'react-dropzone-uploader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlibrary.add(faUpload);\n\nconst getColor = props => {\n  /*if (props.isDragAccept) {\r\n      return '#00e676';\r\n  }\r\n  if (props.isDragReject) {\r\n      return '#ff1744';\r\n  }\r\n  if (props.isDragActive) {\r\n      return '#2196f3';\r\n  }*/\n  return '#00abeb';\n};\n\nconst Container = styled.div`\n\n  border-color: ${props => getColor(props)};\n\n`;\n/*const DropzonePDF = ({setFileUploadPDF}) => {\r\n\r\n  const onDrop = useCallback(acceptedFiles =>{\r\n    setFileUploadPDF(acceptedFiles);  \r\n    /*let formData = new FormData()\r\n    formData.append('pdf',acceptedFiles[0])\r\n\r\n    pdflib.preprocessPdf(acceptedFiles[0])\r\n\r\n    axios({\r\n      url: '/process',\r\n      method: \"POST\",\r\n      headers:{\r\n        'Content-Type': 'multipart/form-data'\r\n      },\r\n      data: formData\r\n    }).then((res)=>{\r\n      \r\n    })\r\n\r\n  }, [])\r\n  \r\n  const {\r\n    getRootProps,\r\n    getInputProps,\r\n    isDragActive,\r\n    isDragAccept,\r\n    isDragReject,\r\n  } = useDropzone({accept: '.pdf',onDrop});\r\n\r\n\r\n\r\n  \r\n  return (\r\n    <div className=\"container\">\r\n      <Container {...getRootProps({isDragActive, isDragAccept, isDragReject})} className=\"inner-container\">\r\n        <input {...getInputProps()} />\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <FontAwesomeIcon icon=\"upload\" size=\"3x\"/>\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <h1>DROP FILES HERE OR <span className=\"browse\">BROWSE</span></h1>\r\n        <br></br>\r\n        <br></br>\r\n        <p>Drag and drop files in this area for quick upload to the cloud or use file explorer</p>\r\n        \r\n\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\n<DropzonePDF />\r\nexport default DropzonePDF;*/\n\nconst DropzonePDF = ({\n  setFileUploadPDF\n}) => {\n  const getUploadParams = () => {\n    return {\n      url: 'https://httpbin.org/post'\n    };\n  };\n\n  const handleChangeStatus = ({\n    meta\n  }, status) => {\n    console.log(status, meta);\n  };\n\n  const handleSubmit = (files, allFiles) => {\n    console.log(files.map(f => f.meta));\n    allFiles.forEach(f => f.remove());\n  };\n\n  return /*#__PURE__*/_jsxDEV(Dropzone, {\n    getUploadParams: getUploadParams,\n    onChangeStatus: handleChangeStatus,\n    onSubmit: handleSubmit,\n    maxFiles: \"1\",\n    styles: {\n      dropzone: {\n        minHeight: 200,\n        maxHeight: 250\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n\n_c = DropzonePDF;\n\n/*#__PURE__*/\n_jsxDEV(DropzonePDF, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 122,\n  columnNumber: 1\n}, this);\n\nexport default DropzonePDF;\n\nvar _c;\n\n$RefreshReg$(_c, \"DropzonePDF\");","map":{"version":3,"sources":["F:/github_repos/instafill/front-end/src/components/common/dropzone/DropzonePDF.jsx"],"names":["React","useCallback","useDropzone","styled","FontAwesomeIcon","library","faUpload","pdflib","Dropzone","add","getColor","props","Container","div","DropzonePDF","setFileUploadPDF","getUploadParams","url","handleChangeStatus","meta","status","console","log","handleSubmit","files","allFiles","map","f","forEach","remove","dropzone","minHeight","maxHeight"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AACA,OAAO,gBAAP;AACA,SAAQC,WAAR,QAA0B,gBAA1B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAGA,SAAQC,eAAR,QAA8B,gCAA9B;AACA,SAASC,OAAT,QAAwB,mCAAxB;AACA,SAASC,QAAT,QAAyB,mCAAzB;AACA,OAAO,KAAKC,MAAZ,MAAwB,+BAAxB;AAEA,OAAO,yCAAP;AACA,OAAOC,QAAP,MAAqB,yBAArB;;AACAH,OAAO,CAACI,GAAR,CAAYH,QAAZ;;AAEA,MAAMI,QAAQ,GAAIC,KAAD,IAAW;AAC1B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,SAAO,SAAP;AACD,CAXD;;AAaA,MAAMC,SAAS,GAAGT,MAAM,CAACU,GAAI;AAC7B;AACA,kBAAkBF,KAAK,IAAID,QAAQ,CAACC,KAAD,CAAQ;AAC3C;AACA,CAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,MAAMG,WAAW,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAwB;AAC1C,QAAMC,eAAe,GAAG,MAAM;AAC5B,WAAO;AAAEC,MAAAA,GAAG,EAAE;AAAP,KAAP;AACD,GAFD;;AAIA,QAAMC,kBAAkB,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAWC,MAAX,KAAsB;AAC/CC,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ,EAAoBD,IAApB;AACD,GAFD;;AAIA,QAAMI,YAAY,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACxCJ,IAAAA,OAAO,CAACC,GAAR,CAAYE,KAAK,CAACE,GAAN,CAAUC,CAAC,IAAIA,CAAC,CAACR,IAAjB,CAAZ;AACAM,IAAAA,QAAQ,CAACG,OAAT,CAAiBD,CAAC,IAAIA,CAAC,CAACE,MAAF,EAAtB;AACD,GAHD;;AAKA,sBACE,QAAC,QAAD;AACE,IAAA,eAAe,EAAEb,eADnB;AAEE,IAAA,cAAc,EAAEE,kBAFlB;AAGE,IAAA,QAAQ,EAAEK,YAHZ;AAIE,IAAA,QAAQ,EAAC,GAJX;AAKE,IAAA,MAAM,EAAE;AAAEO,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,SAAS,EAAE,GAAb;AAAkBC,QAAAA,SAAS,EAAE;AAA7B;AAAZ;AALV;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAvBD;;KAAMlB,W;;AAyBN;AAAA,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA;;AACA,eAAeA,WAAf","sourcesContent":["import React, { useCallback } from 'react';\r\nimport './Dropzone.css'\r\nimport {useDropzone} from 'react-dropzone';\r\nimport styled from 'styled-components';\r\n\r\n\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { faUpload } from '@fortawesome/free-solid-svg-icons';\r\nimport * as pdflib from '../../../pdflib/processPdf.js'; \r\n\r\nimport 'react-dropzone-uploader/dist/styles.css'\r\nimport Dropzone from 'react-dropzone-uploader'\r\nlibrary.add(faUpload)\r\n\r\nconst getColor = (props) => {\r\n  /*if (props.isDragAccept) {\r\n      return '#00e676';\r\n  }\r\n  if (props.isDragReject) {\r\n      return '#ff1744';\r\n  }\r\n  if (props.isDragActive) {\r\n      return '#2196f3';\r\n  }*/\r\n  return '#00abeb';\r\n}\r\n\r\nconst Container = styled.div`\r\n\r\n  border-color: ${props => getColor(props)};\r\n\r\n`;\r\n\r\n\r\n/*const DropzonePDF = ({setFileUploadPDF}) => {\r\n\r\n  const onDrop = useCallback(acceptedFiles =>{\r\n    setFileUploadPDF(acceptedFiles);  \r\n    /*let formData = new FormData()\r\n    formData.append('pdf',acceptedFiles[0])\r\n\r\n    pdflib.preprocessPdf(acceptedFiles[0])\r\n\r\n    axios({\r\n      url: '/process',\r\n      method: \"POST\",\r\n      headers:{\r\n        'Content-Type': 'multipart/form-data'\r\n      },\r\n      data: formData\r\n    }).then((res)=>{\r\n      \r\n    })\r\n\r\n  }, [])\r\n  \r\n  const {\r\n    getRootProps,\r\n    getInputProps,\r\n    isDragActive,\r\n    isDragAccept,\r\n    isDragReject,\r\n  } = useDropzone({accept: '.pdf',onDrop});\r\n\r\n\r\n\r\n  \r\n  return (\r\n    <div className=\"container\">\r\n      <Container {...getRootProps({isDragActive, isDragAccept, isDragReject})} className=\"inner-container\">\r\n        <input {...getInputProps()} />\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <FontAwesomeIcon icon=\"upload\" size=\"3x\"/>\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <h1>DROP FILES HERE OR <span className=\"browse\">BROWSE</span></h1>\r\n        <br></br>\r\n        <br></br>\r\n        <p>Drag and drop files in this area for quick upload to the cloud or use file explorer</p>\r\n        \r\n\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\n<DropzonePDF />\r\nexport default DropzonePDF;*/\r\n\r\n\r\nconst DropzonePDF = ({setFileUploadPDF}) => {\r\n  const getUploadParams = () => {\r\n    return { url: 'https://httpbin.org/post' }\r\n  }\r\n\r\n  const handleChangeStatus = ({ meta }, status) => {\r\n    console.log(status, meta)\r\n  }\r\n\r\n  const handleSubmit = (files, allFiles) => {\r\n    console.log(files.map(f => f.meta))\r\n    allFiles.forEach(f => f.remove())\r\n  }\r\n\r\n  return (\r\n    <Dropzone\r\n      getUploadParams={getUploadParams}\r\n      onChangeStatus={handleChangeStatus}\r\n      onSubmit={handleSubmit}\r\n      maxFiles=\"1\"\r\n      styles={{ dropzone: { minHeight: 200, maxHeight: 250 } }}\r\n    />\r\n  )\r\n}\r\n\r\n<DropzonePDF />\r\nexport default DropzonePDF;\r\n"]},"metadata":{},"sourceType":"module"}