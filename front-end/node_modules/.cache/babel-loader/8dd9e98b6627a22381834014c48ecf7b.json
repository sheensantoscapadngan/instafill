{"ast":null,"code":"/*\r\n * Copyright 2012 Mozilla Foundation\r\n *\r\n * The Ascii85Stream class contained in this file is a TypeScript port of the\r\n * JavaScript Ascii85Stream class in Mozilla's pdf.js project, made available\r\n * under the Apache 2.0 open source license.\r\n */\nimport { __extends } from \"tslib\";\nimport DecodeStream from \"./DecodeStream\";\n\nvar isSpace = function (ch) {\n  return ch === 0x20 || ch === 0x09 || ch === 0x0d || ch === 0x0a;\n};\n\nvar Ascii85Stream =\n/** @class */\nfunction (_super) {\n  __extends(Ascii85Stream, _super);\n\n  function Ascii85Stream(stream, maybeLength) {\n    var _this = _super.call(this, maybeLength) || this;\n\n    _this.stream = stream;\n    _this.input = new Uint8Array(5); // Most streams increase in size when decoded, but Ascii85 streams\n    // typically shrink by ~20%.\n\n    if (maybeLength) {\n      maybeLength = 0.8 * maybeLength;\n    }\n\n    return _this;\n  }\n\n  Ascii85Stream.prototype.readBlock = function () {\n    var TILDA_CHAR = 0x7e; // '~'\n\n    var Z_LOWER_CHAR = 0x7a; // 'z'\n\n    var EOF = -1;\n    var stream = this.stream;\n    var c = stream.getByte();\n\n    while (isSpace(c)) {\n      c = stream.getByte();\n    }\n\n    if (c === EOF || c === TILDA_CHAR) {\n      this.eof = true;\n      return;\n    }\n\n    var bufferLength = this.bufferLength;\n    var buffer;\n    var i; // special code for z\n\n    if (c === Z_LOWER_CHAR) {\n      buffer = this.ensureBuffer(bufferLength + 4);\n\n      for (i = 0; i < 4; ++i) {\n        buffer[bufferLength + i] = 0;\n      }\n\n      this.bufferLength += 4;\n    } else {\n      var input = this.input;\n      input[0] = c;\n\n      for (i = 1; i < 5; ++i) {\n        c = stream.getByte();\n\n        while (isSpace(c)) {\n          c = stream.getByte();\n        }\n\n        input[i] = c;\n\n        if (c === EOF || c === TILDA_CHAR) {\n          break;\n        }\n      }\n\n      buffer = this.ensureBuffer(bufferLength + i - 1);\n      this.bufferLength += i - 1; // partial ending;\n\n      if (i < 5) {\n        for (; i < 5; ++i) {\n          input[i] = 0x21 + 84;\n        }\n\n        this.eof = true;\n      }\n\n      var t = 0;\n\n      for (i = 0; i < 5; ++i) {\n        t = t * 85 + (input[i] - 0x21);\n      }\n\n      for (i = 3; i >= 0; --i) {\n        buffer[bufferLength + i] = t & 0xff;\n        t >>= 8;\n      }\n    }\n  };\n\n  return Ascii85Stream;\n}(DecodeStream);\n\nexport default Ascii85Stream;","map":{"version":3,"sources":["../../../src/core/streams/Ascii85Stream.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\r\n * Copyright 2012 Mozilla Foundation\r\n *\r\n * The Ascii85Stream class contained in this file is a TypeScript port of the\r\n * JavaScript Ascii85Stream class in Mozilla's pdf.js project, made available\r\n * under the Apache 2.0 open source license.\r\n */\r\nimport { __extends } from \"tslib\";\r\nimport DecodeStream from \"./DecodeStream\";\r\nvar isSpace = function (ch) {\r\n    return ch === 0x20 || ch === 0x09 || ch === 0x0d || ch === 0x0a;\r\n};\r\nvar Ascii85Stream = /** @class */ (function (_super) {\r\n    __extends(Ascii85Stream, _super);\r\n    function Ascii85Stream(stream, maybeLength) {\r\n        var _this = _super.call(this, maybeLength) || this;\r\n        _this.stream = stream;\r\n        _this.input = new Uint8Array(5);\r\n        // Most streams increase in size when decoded, but Ascii85 streams\r\n        // typically shrink by ~20%.\r\n        if (maybeLength) {\r\n            maybeLength = 0.8 * maybeLength;\r\n        }\r\n        return _this;\r\n    }\r\n    Ascii85Stream.prototype.readBlock = function () {\r\n        var TILDA_CHAR = 0x7e; // '~'\r\n        var Z_LOWER_CHAR = 0x7a; // 'z'\r\n        var EOF = -1;\r\n        var stream = this.stream;\r\n        var c = stream.getByte();\r\n        while (isSpace(c)) {\r\n            c = stream.getByte();\r\n        }\r\n        if (c === EOF || c === TILDA_CHAR) {\r\n            this.eof = true;\r\n            return;\r\n        }\r\n        var bufferLength = this.bufferLength;\r\n        var buffer;\r\n        var i;\r\n        // special code for z\r\n        if (c === Z_LOWER_CHAR) {\r\n            buffer = this.ensureBuffer(bufferLength + 4);\r\n            for (i = 0; i < 4; ++i) {\r\n                buffer[bufferLength + i] = 0;\r\n            }\r\n            this.bufferLength += 4;\r\n        }\r\n        else {\r\n            var input = this.input;\r\n            input[0] = c;\r\n            for (i = 1; i < 5; ++i) {\r\n                c = stream.getByte();\r\n                while (isSpace(c)) {\r\n                    c = stream.getByte();\r\n                }\r\n                input[i] = c;\r\n                if (c === EOF || c === TILDA_CHAR) {\r\n                    break;\r\n                }\r\n            }\r\n            buffer = this.ensureBuffer(bufferLength + i - 1);\r\n            this.bufferLength += i - 1;\r\n            // partial ending;\r\n            if (i < 5) {\r\n                for (; i < 5; ++i) {\r\n                    input[i] = 0x21 + 84;\r\n                }\r\n                this.eof = true;\r\n            }\r\n            var t = 0;\r\n            for (i = 0; i < 5; ++i) {\r\n                t = t * 85 + (input[i] - 0x21);\r\n            }\r\n            for (i = 3; i >= 0; --i) {\r\n                buffer[bufferLength + i] = t & 0xff;\r\n                t >>= 8;\r\n            }\r\n        }\r\n    };\r\n    return Ascii85Stream;\r\n}(DecodeStream));\r\nexport default Ascii85Stream;\r\n//# sourceMappingURL=Ascii85Stream.js.map"]},"metadata":{},"sourceType":"module"}