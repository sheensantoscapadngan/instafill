{"ast":null,"code":"import { useState } from 'react';\nimport { __read } from 'tslib';\nimport { motionValue } from '../value/index.js';\nimport { useOnChange } from '../value/use-on-change.js'; // Does this device prefer reduced motion? Returns `null` server-side.\n\nvar prefersReducedMotion;\n\nfunction initPrefersReducedMotion() {\n  prefersReducedMotion = motionValue(null);\n  if (typeof window === \"undefined\") return;\n\n  if (window.matchMedia) {\n    var motionMediaQuery_1 = window.matchMedia(\"(prefers-reduced-motion)\");\n\n    var setReducedMotionPreferences = function () {\n      return prefersReducedMotion.set(motionMediaQuery_1.matches);\n    };\n\n    motionMediaQuery_1.addListener(setReducedMotionPreferences);\n    setReducedMotionPreferences();\n  } else {\n    prefersReducedMotion.set(false);\n  }\n}\n/**\r\n * A hook that returns `true` if we should be using reduced motion based on the current device's Reduced Motion setting.\r\n *\r\n * This can be used to implement changes to your UI based on Reduced Motion. For instance, replacing motion-sickness inducing\r\n * `x`/`y` animations with `opacity`, disabling the autoplay of background videos, or turning off parallax motion.\r\n *\r\n * It will actively respond to changes and re-render your components with the latest setting.\r\n *\r\n * ```jsx\r\n * export function Sidebar({ isOpen }) {\r\n *   const shouldReduceMotion = useReducedMotion()\r\n *   const closedX = shouldReduceMotion ? 0 : \"-100%\"\r\n *\r\n *   return (\r\n *     <motion.div animate={{\r\n *       opacity: isOpen ? 1 : 0,\r\n *       x: isOpen ? 0 : closedX\r\n *     }} />\r\n *   )\r\n * }\r\n * ```\r\n *\r\n * @return boolean\r\n *\r\n * @public\r\n */\n\n\nfunction useReducedMotion() {\n  /**\r\n   * Lazy initialisation of prefersReducedMotion\r\n   */\n  !prefersReducedMotion && initPrefersReducedMotion();\n\n  var _a = __read(useState(prefersReducedMotion.get()), 2),\n      shouldReduceMotion = _a[0],\n      setShouldReduceMotion = _a[1];\n\n  useOnChange(prefersReducedMotion, setShouldReduceMotion);\n  return shouldReduceMotion;\n}\n\nexport { useReducedMotion };","map":{"version":3,"sources":["D:/programming stuff i dont save on oneDrive/github_repos/instafill/front-end/node_modules/framer-motion/dist/es/utils/use-reduced-motion.js"],"names":["useState","__read","motionValue","useOnChange","prefersReducedMotion","initPrefersReducedMotion","window","matchMedia","motionMediaQuery_1","setReducedMotionPreferences","set","matches","addListener","useReducedMotion","_a","get","shouldReduceMotion","setShouldReduceMotion"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,MAAT,QAAuB,OAAvB;AACA,SAASC,WAAT,QAA4B,mBAA5B;AACA,SAASC,WAAT,QAA4B,2BAA5B,C,CAEA;;AACA,IAAIC,oBAAJ;;AACA,SAASC,wBAAT,GAAoC;AAChCD,EAAAA,oBAAoB,GAAGF,WAAW,CAAC,IAAD,CAAlC;AACA,MAAI,OAAOI,MAAP,KAAkB,WAAtB,EACI;;AACJ,MAAIA,MAAM,CAACC,UAAX,EAAuB;AACnB,QAAIC,kBAAkB,GAAGF,MAAM,CAACC,UAAP,CAAkB,0BAAlB,CAAzB;;AACA,QAAIE,2BAA2B,GAAG,YAAY;AAC1C,aAAOL,oBAAoB,CAACM,GAArB,CAAyBF,kBAAkB,CAACG,OAA5C,CAAP;AACH,KAFD;;AAGAH,IAAAA,kBAAkB,CAACI,WAAnB,CAA+BH,2BAA/B;AACAA,IAAAA,2BAA2B;AAC9B,GAPD,MAQK;AACDL,IAAAA,oBAAoB,CAACM,GAArB,CAAyB,KAAzB;AACH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,gBAAT,GAA4B;AACxB;AACJ;AACA;AACI,GAACT,oBAAD,IAAyBC,wBAAwB,EAAjD;;AACA,MAAIS,EAAE,GAAGb,MAAM,CAACD,QAAQ,CAACI,oBAAoB,CAACW,GAArB,EAAD,CAAT,EAAuC,CAAvC,CAAf;AAAA,MAA0DC,kBAAkB,GAAGF,EAAE,CAAC,CAAD,CAAjF;AAAA,MAAsFG,qBAAqB,GAAGH,EAAE,CAAC,CAAD,CAAhH;;AACAX,EAAAA,WAAW,CAACC,oBAAD,EAAuBa,qBAAvB,CAAX;AACA,SAAOD,kBAAP;AACH;;AAED,SAASH,gBAAT","sourcesContent":["import { useState } from 'react';\r\nimport { __read } from 'tslib';\r\nimport { motionValue } from '../value/index.js';\r\nimport { useOnChange } from '../value/use-on-change.js';\r\n\r\n// Does this device prefer reduced motion? Returns `null` server-side.\r\nvar prefersReducedMotion;\r\nfunction initPrefersReducedMotion() {\r\n    prefersReducedMotion = motionValue(null);\r\n    if (typeof window === \"undefined\")\r\n        return;\r\n    if (window.matchMedia) {\r\n        var motionMediaQuery_1 = window.matchMedia(\"(prefers-reduced-motion)\");\r\n        var setReducedMotionPreferences = function () {\r\n            return prefersReducedMotion.set(motionMediaQuery_1.matches);\r\n        };\r\n        motionMediaQuery_1.addListener(setReducedMotionPreferences);\r\n        setReducedMotionPreferences();\r\n    }\r\n    else {\r\n        prefersReducedMotion.set(false);\r\n    }\r\n}\r\n/**\r\n * A hook that returns `true` if we should be using reduced motion based on the current device's Reduced Motion setting.\r\n *\r\n * This can be used to implement changes to your UI based on Reduced Motion. For instance, replacing motion-sickness inducing\r\n * `x`/`y` animations with `opacity`, disabling the autoplay of background videos, or turning off parallax motion.\r\n *\r\n * It will actively respond to changes and re-render your components with the latest setting.\r\n *\r\n * ```jsx\r\n * export function Sidebar({ isOpen }) {\r\n *   const shouldReduceMotion = useReducedMotion()\r\n *   const closedX = shouldReduceMotion ? 0 : \"-100%\"\r\n *\r\n *   return (\r\n *     <motion.div animate={{\r\n *       opacity: isOpen ? 1 : 0,\r\n *       x: isOpen ? 0 : closedX\r\n *     }} />\r\n *   )\r\n * }\r\n * ```\r\n *\r\n * @return boolean\r\n *\r\n * @public\r\n */\r\nfunction useReducedMotion() {\r\n    /**\r\n     * Lazy initialisation of prefersReducedMotion\r\n     */\r\n    !prefersReducedMotion && initPrefersReducedMotion();\r\n    var _a = __read(useState(prefersReducedMotion.get()), 2), shouldReduceMotion = _a[0], setShouldReduceMotion = _a[1];\r\n    useOnChange(prefersReducedMotion, setShouldReduceMotion);\r\n    return shouldReduceMotion;\r\n}\r\n\r\nexport { useReducedMotion };\r\n"]},"metadata":{},"sourceType":"module"}