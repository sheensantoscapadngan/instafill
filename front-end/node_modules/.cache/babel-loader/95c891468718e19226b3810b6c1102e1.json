{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { MissingPageContentsEmbeddingError, UnrecognizedStreamTypeError } from \"../errors\";\nimport PDFNumber from \"../objects/PDFNumber\";\nimport PDFRawStream from \"../objects/PDFRawStream\";\nimport PDFStream from \"../objects/PDFStream\";\nimport { decodePDFRawStream } from \"../streams/decode\";\nimport PDFContentStream from \"../structures/PDFContentStream\";\nimport CharCodes from \"../syntax/CharCodes\";\nimport { mergeIntoTypedArray } from \"../../utils\";\n\nvar fullPageBoundingBox = function (page) {\n  var mediaBox = page.MediaBox();\n  var width = mediaBox.lookup(2, PDFNumber).asNumber() - mediaBox.lookup(0, PDFNumber).asNumber();\n  var height = mediaBox.lookup(3, PDFNumber).asNumber() - mediaBox.lookup(1, PDFNumber).asNumber();\n  return {\n    left: 0,\n    bottom: 0,\n    right: width,\n    top: height\n  };\n}; // Returns the identity matrix, modified to position the content of the given\n// bounding box at (0, 0).\n\n\nvar boundingBoxAdjustedMatrix = function (bb) {\n  return [1, 0, 0, 1, -bb.left, -bb.bottom];\n};\n\nvar PDFPageEmbedder =\n/** @class */\nfunction () {\n  function PDFPageEmbedder(page, boundingBox, transformationMatrix) {\n    this.page = page;\n    var bb = boundingBox !== null && boundingBox !== void 0 ? boundingBox : fullPageBoundingBox(page);\n    this.width = bb.right - bb.left;\n    this.height = bb.top - bb.bottom;\n    this.boundingBox = bb;\n    this.transformationMatrix = transformationMatrix !== null && transformationMatrix !== void 0 ? transformationMatrix : boundingBoxAdjustedMatrix(bb);\n  }\n\n  PDFPageEmbedder.for = function (page, boundingBox, transformationMatrix) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , new PDFPageEmbedder(page, boundingBox, transformationMatrix)];\n      });\n    });\n  };\n\n  PDFPageEmbedder.prototype.embedIntoContext = function (context, ref) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, Contents, Resources, decodedContents, _b, left, bottom, right, top, xObject;\n\n      return __generator(this, function (_c) {\n        _a = this.page.normalizedEntries(), Contents = _a.Contents, Resources = _a.Resources;\n        if (!Contents) throw new MissingPageContentsEmbeddingError();\n        decodedContents = this.decodeContents(Contents);\n        _b = this.boundingBox, left = _b.left, bottom = _b.bottom, right = _b.right, top = _b.top;\n        xObject = context.stream(decodedContents, {\n          Type: 'XObject',\n          Subtype: 'Form',\n          FormType: 1,\n          BBox: [left, bottom, right, top],\n          Matrix: this.transformationMatrix,\n          Resources: Resources\n        });\n\n        if (ref) {\n          context.assign(ref, xObject);\n          return [2\n          /*return*/\n          , ref];\n        } else {\n          return [2\n          /*return*/\n          , context.register(xObject)];\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  }; // `contents` is an array of streams which are merged to include them in the XObject.\n  // This methods extracts each stream and joins them with a newline character.\n\n\n  PDFPageEmbedder.prototype.decodeContents = function (contents) {\n    var newline = Uint8Array.of(CharCodes.Newline);\n    var decodedContents = [];\n\n    for (var idx = 0, len = contents.size(); idx < len; idx++) {\n      var stream = contents.lookup(idx, PDFStream);\n      var content = void 0;\n\n      if (stream instanceof PDFRawStream) {\n        content = decodePDFRawStream(stream).decode();\n      } else if (stream instanceof PDFContentStream) {\n        content = stream.getUnencodedContents();\n      } else {\n        throw new UnrecognizedStreamTypeError(stream);\n      }\n\n      decodedContents.push(content, newline);\n    }\n\n    return mergeIntoTypedArray.apply(void 0, decodedContents);\n  };\n\n  return PDFPageEmbedder;\n}();\n\nexport default PDFPageEmbedder;","map":{"version":3,"sources":["../../../src/core/embedders/PDFPageEmbedder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __awaiter, __generator } from \"tslib\";\nimport { MissingPageContentsEmbeddingError, UnrecognizedStreamTypeError, } from \"../errors\";\nimport PDFNumber from \"../objects/PDFNumber\";\nimport PDFRawStream from \"../objects/PDFRawStream\";\nimport PDFStream from \"../objects/PDFStream\";\nimport { decodePDFRawStream } from \"../streams/decode\";\nimport PDFContentStream from \"../structures/PDFContentStream\";\nimport CharCodes from \"../syntax/CharCodes\";\nimport { mergeIntoTypedArray } from \"../../utils\";\nvar fullPageBoundingBox = function (page) {\n    var mediaBox = page.MediaBox();\n    var width = mediaBox.lookup(2, PDFNumber).asNumber() -\n        mediaBox.lookup(0, PDFNumber).asNumber();\n    var height = mediaBox.lookup(3, PDFNumber).asNumber() -\n        mediaBox.lookup(1, PDFNumber).asNumber();\n    return { left: 0, bottom: 0, right: width, top: height };\n};\n// Returns the identity matrix, modified to position the content of the given\n// bounding box at (0, 0).\nvar boundingBoxAdjustedMatrix = function (bb) { return [1, 0, 0, 1, -bb.left, -bb.bottom]; };\nvar PDFPageEmbedder = /** @class */ (function () {\n    function PDFPageEmbedder(page, boundingBox, transformationMatrix) {\n        this.page = page;\n        var bb = boundingBox !== null && boundingBox !== void 0 ? boundingBox : fullPageBoundingBox(page);\n        this.width = bb.right - bb.left;\n        this.height = bb.top - bb.bottom;\n        this.boundingBox = bb;\n        this.transformationMatrix = transformationMatrix !== null && transformationMatrix !== void 0 ? transformationMatrix : boundingBoxAdjustedMatrix(bb);\n    }\n    PDFPageEmbedder.for = function (page, boundingBox, transformationMatrix) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, new PDFPageEmbedder(page, boundingBox, transformationMatrix)];\n            });\n        });\n    };\n    PDFPageEmbedder.prototype.embedIntoContext = function (context, ref) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, Contents, Resources, decodedContents, _b, left, bottom, right, top, xObject;\n            return __generator(this, function (_c) {\n                _a = this.page.normalizedEntries(), Contents = _a.Contents, Resources = _a.Resources;\n                if (!Contents)\n                    throw new MissingPageContentsEmbeddingError();\n                decodedContents = this.decodeContents(Contents);\n                _b = this.boundingBox, left = _b.left, bottom = _b.bottom, right = _b.right, top = _b.top;\n                xObject = context.stream(decodedContents, {\n                    Type: 'XObject',\n                    Subtype: 'Form',\n                    FormType: 1,\n                    BBox: [left, bottom, right, top],\n                    Matrix: this.transformationMatrix,\n                    Resources: Resources,\n                });\n                if (ref) {\n                    context.assign(ref, xObject);\n                    return [2 /*return*/, ref];\n                }\n                else {\n                    return [2 /*return*/, context.register(xObject)];\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    // `contents` is an array of streams which are merged to include them in the XObject.\n    // This methods extracts each stream and joins them with a newline character.\n    PDFPageEmbedder.prototype.decodeContents = function (contents) {\n        var newline = Uint8Array.of(CharCodes.Newline);\n        var decodedContents = [];\n        for (var idx = 0, len = contents.size(); idx < len; idx++) {\n            var stream = contents.lookup(idx, PDFStream);\n            var content = void 0;\n            if (stream instanceof PDFRawStream) {\n                content = decodePDFRawStream(stream).decode();\n            }\n            else if (stream instanceof PDFContentStream) {\n                content = stream.getUnencodedContents();\n            }\n            else {\n                throw new UnrecognizedStreamTypeError(stream);\n            }\n            decodedContents.push(content, newline);\n        }\n        return mergeIntoTypedArray.apply(void 0, decodedContents);\n    };\n    return PDFPageEmbedder;\n}());\nexport default PDFPageEmbedder;\n//# sourceMappingURL=PDFPageEmbedder.js.map"]},"metadata":{},"sourceType":"module"}