{"ast":null,"code":"/* tslint:disable:ban-types */\nimport { values as objectValues } from \"./objects\";\nexport var backtick = function (val) {\n  return \"`\" + val + \"`\";\n};\nexport var singleQuote = function (val) {\n  return \"'\" + val + \"'\";\n}; // prettier-ignore\n\nvar formatValue = function (value) {\n  var type = typeof value;\n  if (type === 'string') return singleQuote(value);else if (type === 'undefined') return backtick(value);else return value;\n};\n\nexport var createValueErrorMsg = function (value, valueName, values) {\n  var allowedValues = new Array(values.length);\n\n  for (var idx = 0, len = values.length; idx < len; idx++) {\n    var v = values[idx];\n    allowedValues[idx] = formatValue(v);\n  }\n\n  var joinedValues = allowedValues.join(' or '); // prettier-ignore\n\n  return backtick(valueName) + \" must be one of \" + joinedValues + \", but was actually \" + formatValue(value);\n};\nexport var assertIsOneOf = function (value, valueName, allowedValues) {\n  if (!Array.isArray(allowedValues)) {\n    allowedValues = objectValues(allowedValues);\n  }\n\n  for (var idx = 0, len = allowedValues.length; idx < len; idx++) {\n    if (value === allowedValues[idx]) return;\n  }\n\n  throw new TypeError(createValueErrorMsg(value, valueName, allowedValues));\n};\nexport var assertIsOneOfOrUndefined = function (value, valueName, allowedValues) {\n  if (!Array.isArray(allowedValues)) {\n    allowedValues = objectValues(allowedValues);\n  }\n\n  assertIsOneOf(value, valueName, allowedValues.concat(undefined));\n};\nexport var assertIsSubset = function (values, valueName, allowedValues) {\n  if (!Array.isArray(allowedValues)) {\n    allowedValues = objectValues(allowedValues);\n  }\n\n  for (var idx = 0, len = values.length; idx < len; idx++) {\n    assertIsOneOf(values[idx], valueName, allowedValues);\n  }\n};\nexport var getType = function (val) {\n  if (val === null) return 'null';\n  if (val === undefined) return 'undefined';\n  if (typeof val === 'string') return 'string';\n  if (isNaN(val)) return 'NaN';\n  if (typeof val === 'number') return 'number';\n  if (typeof val === 'boolean') return 'boolean';\n  if (typeof val === 'symbol') return 'symbol';\n  if (typeof val === 'bigint') return 'bigint';\n  if (val.constructor && val.constructor.name) return val.constructor.name;\n  if (val.name) return val.name;\n  if (val.constructor) return String(val.constructor);\n  return String(val);\n};\nexport var isType = function (value, type) {\n  if (type === 'null') return value === null;\n  if (type === 'undefined') return value === undefined;\n  if (type === 'string') return typeof value === 'string';\n  if (type === 'number') return typeof value === 'number' && !isNaN(value);\n  if (type === 'boolean') return typeof value === 'boolean';\n  if (type === 'symbol') return typeof value === 'symbol';\n  if (type === 'bigint') return typeof value === 'bigint';\n  if (type === Date) return value instanceof Date;\n  if (type === Array) return value instanceof Array;\n  if (type === Uint8Array) return value instanceof Uint8Array;\n  if (type === ArrayBuffer) return value instanceof ArrayBuffer;\n  if (type === Function) return value instanceof Function;\n  return value instanceof type[0];\n};\nexport var createTypeErrorMsg = function (value, valueName, types) {\n  var allowedTypes = new Array(types.length);\n\n  for (var idx = 0, len = types.length; idx < len; idx++) {\n    var type = types[idx];\n    if (type === 'null') allowedTypes[idx] = backtick('null');\n    if (type === 'undefined') allowedTypes[idx] = backtick('undefined');\n    if (type === 'string') allowedTypes[idx] = backtick('string');else if (type === 'number') allowedTypes[idx] = backtick('number');else if (type === 'boolean') allowedTypes[idx] = backtick('boolean');else if (type === 'symbol') allowedTypes[idx] = backtick('symbol');else if (type === 'bigint') allowedTypes[idx] = backtick('bigint');else if (type === Array) allowedTypes[idx] = backtick('Array');else if (type === Uint8Array) allowedTypes[idx] = backtick('Uint8Array');else if (type === ArrayBuffer) allowedTypes[idx] = backtick('ArrayBuffer');else allowedTypes[idx] = backtick(type[1]);\n  }\n\n  var joinedTypes = allowedTypes.join(' or '); // prettier-ignore\n\n  return backtick(valueName) + \" must be of type \" + joinedTypes + \", but was actually of type \" + backtick(getType(value));\n};\nexport var assertIs = function (value, valueName, types) {\n  for (var idx = 0, len = types.length; idx < len; idx++) {\n    if (isType(value, types[idx])) return;\n  }\n\n  throw new TypeError(createTypeErrorMsg(value, valueName, types));\n};\nexport var assertOrUndefined = function (value, valueName, types) {\n  assertIs(value, valueName, types.concat('undefined'));\n};\nexport var assertEachIs = function (values, valueName, types) {\n  for (var idx = 0, len = values.length; idx < len; idx++) {\n    assertIs(values[idx], valueName, types);\n  }\n};\nexport var assertRange = function (value, valueName, min, max) {\n  assertIs(value, valueName, ['number']);\n  assertIs(min, 'min', ['number']);\n  assertIs(max, 'max', ['number']);\n  max = Math.max(min, max);\n\n  if (value < min || value > max) {\n    // prettier-ignore\n    throw new Error(backtick(valueName) + \" must be at least \" + min + \" and at most \" + max + \", but was actually \" + value);\n  }\n};\nexport var assertRangeOrUndefined = function (value, valueName, min, max) {\n  assertIs(value, valueName, ['number', 'undefined']);\n  if (typeof value === 'number') assertRange(value, valueName, min, max);\n};\nexport var assertMultiple = function (value, valueName, multiplier) {\n  assertIs(value, valueName, ['number']);\n\n  if (value % multiplier !== 0) {\n    // prettier-ignore\n    throw new Error(backtick(valueName) + \" must be a multiple of \" + multiplier + \", but was actually \" + value);\n  }\n};\nexport var assertInteger = function (value, valueName) {\n  if (!Number.isInteger(value)) {\n    throw new Error(backtick(valueName) + \" must be an integer, but was actually \" + value);\n  }\n};\nexport var assertPositive = function (value, valueName) {\n  if (![1, 0].includes(Math.sign(value))) {\n    // prettier-ignore\n    throw new Error(backtick(valueName) + \" must be a positive number or 0, but was actually \" + value);\n  }\n};","map":{"version":3,"sources":["../../src/utils/validators.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/* tslint:disable:ban-types */\nimport { values as objectValues } from \"./objects\";\nexport var backtick = function (val) { return \"`\" + val + \"`\"; };\nexport var singleQuote = function (val) { return \"'\" + val + \"'\"; };\n// prettier-ignore\nvar formatValue = function (value) {\n    var type = typeof value;\n    if (type === 'string')\n        return singleQuote(value);\n    else if (type === 'undefined')\n        return backtick(value);\n    else\n        return value;\n};\nexport var createValueErrorMsg = function (value, valueName, values) {\n    var allowedValues = new Array(values.length);\n    for (var idx = 0, len = values.length; idx < len; idx++) {\n        var v = values[idx];\n        allowedValues[idx] = formatValue(v);\n    }\n    var joinedValues = allowedValues.join(' or ');\n    // prettier-ignore\n    return backtick(valueName) + \" must be one of \" + joinedValues + \", but was actually \" + formatValue(value);\n};\nexport var assertIsOneOf = function (value, valueName, allowedValues) {\n    if (!Array.isArray(allowedValues)) {\n        allowedValues = objectValues(allowedValues);\n    }\n    for (var idx = 0, len = allowedValues.length; idx < len; idx++) {\n        if (value === allowedValues[idx])\n            return;\n    }\n    throw new TypeError(createValueErrorMsg(value, valueName, allowedValues));\n};\nexport var assertIsOneOfOrUndefined = function (value, valueName, allowedValues) {\n    if (!Array.isArray(allowedValues)) {\n        allowedValues = objectValues(allowedValues);\n    }\n    assertIsOneOf(value, valueName, allowedValues.concat(undefined));\n};\nexport var assertIsSubset = function (values, valueName, allowedValues) {\n    if (!Array.isArray(allowedValues)) {\n        allowedValues = objectValues(allowedValues);\n    }\n    for (var idx = 0, len = values.length; idx < len; idx++) {\n        assertIsOneOf(values[idx], valueName, allowedValues);\n    }\n};\nexport var getType = function (val) {\n    if (val === null)\n        return 'null';\n    if (val === undefined)\n        return 'undefined';\n    if (typeof val === 'string')\n        return 'string';\n    if (isNaN(val))\n        return 'NaN';\n    if (typeof val === 'number')\n        return 'number';\n    if (typeof val === 'boolean')\n        return 'boolean';\n    if (typeof val === 'symbol')\n        return 'symbol';\n    if (typeof val === 'bigint')\n        return 'bigint';\n    if (val.constructor && val.constructor.name)\n        return val.constructor.name;\n    if (val.name)\n        return val.name;\n    if (val.constructor)\n        return String(val.constructor);\n    return String(val);\n};\nexport var isType = function (value, type) {\n    if (type === 'null')\n        return value === null;\n    if (type === 'undefined')\n        return value === undefined;\n    if (type === 'string')\n        return typeof value === 'string';\n    if (type === 'number')\n        return typeof value === 'number' && !isNaN(value);\n    if (type === 'boolean')\n        return typeof value === 'boolean';\n    if (type === 'symbol')\n        return typeof value === 'symbol';\n    if (type === 'bigint')\n        return typeof value === 'bigint';\n    if (type === Date)\n        return value instanceof Date;\n    if (type === Array)\n        return value instanceof Array;\n    if (type === Uint8Array)\n        return value instanceof Uint8Array;\n    if (type === ArrayBuffer)\n        return value instanceof ArrayBuffer;\n    if (type === Function)\n        return value instanceof Function;\n    return value instanceof type[0];\n};\nexport var createTypeErrorMsg = function (value, valueName, types) {\n    var allowedTypes = new Array(types.length);\n    for (var idx = 0, len = types.length; idx < len; idx++) {\n        var type = types[idx];\n        if (type === 'null')\n            allowedTypes[idx] = backtick('null');\n        if (type === 'undefined')\n            allowedTypes[idx] = backtick('undefined');\n        if (type === 'string')\n            allowedTypes[idx] = backtick('string');\n        else if (type === 'number')\n            allowedTypes[idx] = backtick('number');\n        else if (type === 'boolean')\n            allowedTypes[idx] = backtick('boolean');\n        else if (type === 'symbol')\n            allowedTypes[idx] = backtick('symbol');\n        else if (type === 'bigint')\n            allowedTypes[idx] = backtick('bigint');\n        else if (type === Array)\n            allowedTypes[idx] = backtick('Array');\n        else if (type === Uint8Array)\n            allowedTypes[idx] = backtick('Uint8Array');\n        else if (type === ArrayBuffer)\n            allowedTypes[idx] = backtick('ArrayBuffer');\n        else\n            allowedTypes[idx] = backtick(type[1]);\n    }\n    var joinedTypes = allowedTypes.join(' or ');\n    // prettier-ignore\n    return backtick(valueName) + \" must be of type \" + joinedTypes + \", but was actually of type \" + backtick(getType(value));\n};\nexport var assertIs = function (value, valueName, types) {\n    for (var idx = 0, len = types.length; idx < len; idx++) {\n        if (isType(value, types[idx]))\n            return;\n    }\n    throw new TypeError(createTypeErrorMsg(value, valueName, types));\n};\nexport var assertOrUndefined = function (value, valueName, types) {\n    assertIs(value, valueName, types.concat('undefined'));\n};\nexport var assertEachIs = function (values, valueName, types) {\n    for (var idx = 0, len = values.length; idx < len; idx++) {\n        assertIs(values[idx], valueName, types);\n    }\n};\nexport var assertRange = function (value, valueName, min, max) {\n    assertIs(value, valueName, ['number']);\n    assertIs(min, 'min', ['number']);\n    assertIs(max, 'max', ['number']);\n    max = Math.max(min, max);\n    if (value < min || value > max) {\n        // prettier-ignore\n        throw new Error(backtick(valueName) + \" must be at least \" + min + \" and at most \" + max + \", but was actually \" + value);\n    }\n};\nexport var assertRangeOrUndefined = function (value, valueName, min, max) {\n    assertIs(value, valueName, ['number', 'undefined']);\n    if (typeof value === 'number')\n        assertRange(value, valueName, min, max);\n};\nexport var assertMultiple = function (value, valueName, multiplier) {\n    assertIs(value, valueName, ['number']);\n    if (value % multiplier !== 0) {\n        // prettier-ignore\n        throw new Error(backtick(valueName) + \" must be a multiple of \" + multiplier + \", but was actually \" + value);\n    }\n};\nexport var assertInteger = function (value, valueName) {\n    if (!Number.isInteger(value)) {\n        throw new Error(backtick(valueName) + \" must be an integer, but was actually \" + value);\n    }\n};\nexport var assertPositive = function (value, valueName) {\n    if (![1, 0].includes(Math.sign(value))) {\n        // prettier-ignore\n        throw new Error(backtick(valueName) + \" must be a positive number or 0, but was actually \" + value);\n    }\n};\n//# sourceMappingURL=validators.js.map"]},"metadata":{},"sourceType":"module"}