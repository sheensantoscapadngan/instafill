{"ast":null,"code":"import { __assign, __spread } from 'tslib';\nimport { number, color, complex, filter, px, degrees, scale, alpha, progressPercentage, percent, vw, vh } from 'style-value-types';\n/**\n * ValueType for \"auto\"\n */\n\nvar auto = {\n  test: function (v) {\n    return v === \"auto\";\n  },\n  parse: function (v) {\n    return v;\n  }\n};\n/**\n * ValueType for ints\n */\n\nvar int = __assign(__assign({}, number), {\n  transform: Math.round\n});\n/**\n * A map of default value types for common values\n */\n\n\nvar defaultValueTypes = {\n  // Color props\n  color: color,\n  backgroundColor: color,\n  outlineColor: color,\n  fill: color,\n  stroke: color,\n  // Border props\n  borderColor: color,\n  borderTopColor: color,\n  borderRightColor: color,\n  borderBottomColor: color,\n  borderLeftColor: color,\n  borderWidth: px,\n  borderTopWidth: px,\n  borderRightWidth: px,\n  borderBottomWidth: px,\n  borderLeftWidth: px,\n  borderRadius: px,\n  radius: px,\n  borderTopLeftRadius: px,\n  borderTopRightRadius: px,\n  borderBottomRightRadius: px,\n  borderBottomLeftRadius: px,\n  // Positioning props\n  width: px,\n  maxWidth: px,\n  height: px,\n  maxHeight: px,\n  size: px,\n  top: px,\n  right: px,\n  bottom: px,\n  left: px,\n  // Spacing props\n  padding: px,\n  paddingTop: px,\n  paddingRight: px,\n  paddingBottom: px,\n  paddingLeft: px,\n  margin: px,\n  marginTop: px,\n  marginRight: px,\n  marginBottom: px,\n  marginLeft: px,\n  // Transform props\n  rotate: degrees,\n  rotateX: degrees,\n  rotateY: degrees,\n  rotateZ: degrees,\n  scale: scale,\n  scaleX: scale,\n  scaleY: scale,\n  scaleZ: scale,\n  skew: degrees,\n  skewX: degrees,\n  skewY: degrees,\n  distance: px,\n  translateX: px,\n  translateY: px,\n  translateZ: px,\n  x: px,\n  y: px,\n  z: px,\n  perspective: px,\n  transformPerspective: px,\n  opacity: alpha,\n  originX: progressPercentage,\n  originY: progressPercentage,\n  originZ: px,\n  // Misc\n  zIndex: int,\n  filter: filter,\n  WebkitFilter: filter,\n  // SVG\n  fillOpacity: alpha,\n  strokeOpacity: alpha,\n  numOctaves: int\n};\n/**\n * A list of value types commonly used for dimensions\n */\n\nvar dimensionValueTypes = [number, px, percent, degrees, vw, vh, auto];\n/**\n * Tests a provided value against a ValueType\n */\n\nvar testValueType = function (v) {\n  return function (type) {\n    return type.test(v);\n  };\n};\n/**\n * Tests a dimensional value against the list of dimension ValueTypes\n */\n\n\nvar findDimensionValueType = function (v) {\n  return dimensionValueTypes.find(testValueType(v));\n};\n/**\n * A list of all ValueTypes\n */\n\n\nvar valueTypes = __spread(dimensionValueTypes, [color, complex]);\n/**\n * Tests a value against the list of ValueTypes\n */\n\n\nvar findValueType = function (v) {\n  return valueTypes.find(testValueType(v));\n};\n/**\n * Gets the default ValueType for the provided value key\n */\n\n\nvar getDefaultValueType = function (key) {\n  return defaultValueTypes[key];\n};\n/**\n * Provided a value and a ValueType, returns the value as that value type.\n */\n\n\nvar getValueAsType = function (value, type) {\n  return type && typeof value === \"number\" ? type.transform(value) : value;\n};\n\nfunction getAnimatableNone(key, value) {\n  var _a;\n\n  var defaultValueType = getDefaultValueType(key);\n  if (defaultValueType !== filter) defaultValueType = complex; // If value is not recognised as animatable, ie \"none\", create an animatable version origin based on the target\n\n  return (_a = defaultValueType.getAnimatableNone) === null || _a === void 0 ? void 0 : _a.call(defaultValueType, value);\n}\n\nexport { auto, findDimensionValueType, findValueType, getAnimatableNone, getDefaultValueType, getValueAsType };","map":{"version":3,"sources":["F:/github_repos/instafill/front-end/node_modules/framer-motion/dist/es/render/dom/utils/value-types.js"],"names":["__assign","__spread","number","color","complex","filter","px","degrees","scale","alpha","progressPercentage","percent","vw","vh","auto","test","v","parse","int","transform","Math","round","defaultValueTypes","backgroundColor","outlineColor","fill","stroke","borderColor","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","borderWidth","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","borderRadius","radius","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","width","maxWidth","height","maxHeight","size","top","right","bottom","left","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","margin","marginTop","marginRight","marginBottom","marginLeft","rotate","rotateX","rotateY","rotateZ","scaleX","scaleY","scaleZ","skew","skewX","skewY","distance","translateX","translateY","translateZ","x","y","z","perspective","transformPerspective","opacity","originX","originY","originZ","zIndex","WebkitFilter","fillOpacity","strokeOpacity","numOctaves","dimensionValueTypes","testValueType","type","findDimensionValueType","find","valueTypes","findValueType","getDefaultValueType","key","getValueAsType","value","getAnimatableNone","_a","defaultValueType","call"],"mappings":"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","sourcesContent":["import { __assign, __spread } from 'tslib';\nimport { number, color, complex, filter, px, degrees, scale, alpha, progressPercentage, percent, vw, vh } from 'style-value-types';\n\n/**\n * ValueType for \"auto\"\n */\nvar auto = {\n    test: function (v) { return v === \"auto\"; },\n    parse: function (v) { return v; },\n};\n/**\n * ValueType for ints\n */\nvar int = __assign(__assign({}, number), { transform: Math.round });\n/**\n * A map of default value types for common values\n */\nvar defaultValueTypes = {\n    // Color props\n    color: color,\n    backgroundColor: color,\n    outlineColor: color,\n    fill: color,\n    stroke: color,\n    // Border props\n    borderColor: color,\n    borderTopColor: color,\n    borderRightColor: color,\n    borderBottomColor: color,\n    borderLeftColor: color,\n    borderWidth: px,\n    borderTopWidth: px,\n    borderRightWidth: px,\n    borderBottomWidth: px,\n    borderLeftWidth: px,\n    borderRadius: px,\n    radius: px,\n    borderTopLeftRadius: px,\n    borderTopRightRadius: px,\n    borderBottomRightRadius: px,\n    borderBottomLeftRadius: px,\n    // Positioning props\n    width: px,\n    maxWidth: px,\n    height: px,\n    maxHeight: px,\n    size: px,\n    top: px,\n    right: px,\n    bottom: px,\n    left: px,\n    // Spacing props\n    padding: px,\n    paddingTop: px,\n    paddingRight: px,\n    paddingBottom: px,\n    paddingLeft: px,\n    margin: px,\n    marginTop: px,\n    marginRight: px,\n    marginBottom: px,\n    marginLeft: px,\n    // Transform props\n    rotate: degrees,\n    rotateX: degrees,\n    rotateY: degrees,\n    rotateZ: degrees,\n    scale: scale,\n    scaleX: scale,\n    scaleY: scale,\n    scaleZ: scale,\n    skew: degrees,\n    skewX: degrees,\n    skewY: degrees,\n    distance: px,\n    translateX: px,\n    translateY: px,\n    translateZ: px,\n    x: px,\n    y: px,\n    z: px,\n    perspective: px,\n    transformPerspective: px,\n    opacity: alpha,\n    originX: progressPercentage,\n    originY: progressPercentage,\n    originZ: px,\n    // Misc\n    zIndex: int,\n    filter: filter,\n    WebkitFilter: filter,\n    // SVG\n    fillOpacity: alpha,\n    strokeOpacity: alpha,\n    numOctaves: int,\n};\n/**\n * A list of value types commonly used for dimensions\n */\nvar dimensionValueTypes = [number, px, percent, degrees, vw, vh, auto];\n/**\n * Tests a provided value against a ValueType\n */\nvar testValueType = function (v) { return function (type) { return type.test(v); }; };\n/**\n * Tests a dimensional value against the list of dimension ValueTypes\n */\nvar findDimensionValueType = function (v) {\n    return dimensionValueTypes.find(testValueType(v));\n};\n/**\n * A list of all ValueTypes\n */\nvar valueTypes = __spread(dimensionValueTypes, [color, complex]);\n/**\n * Tests a value against the list of ValueTypes\n */\nvar findValueType = function (v) { return valueTypes.find(testValueType(v)); };\n/**\n * Gets the default ValueType for the provided value key\n */\nvar getDefaultValueType = function (key) { return defaultValueTypes[key]; };\n/**\n * Provided a value and a ValueType, returns the value as that value type.\n */\nvar getValueAsType = function (value, type) {\n    return type && typeof value === \"number\"\n        ? type.transform(value)\n        : value;\n};\nfunction getAnimatableNone(key, value) {\n    var _a;\n    var defaultValueType = getDefaultValueType(key);\n    if (defaultValueType !== filter)\n        defaultValueType = complex;\n    // If value is not recognised as animatable, ie \"none\", create an animatable version origin based on the target\n    return (_a = defaultValueType.getAnimatableNone) === null || _a === void 0 ? void 0 : _a.call(defaultValueType, value);\n}\n\nexport { auto, findDimensionValueType, findValueType, getAnimatableNone, getDefaultValueType, getValueAsType };\n"]},"metadata":{},"sourceType":"module"}