{"ast":null,"code":"import { useContext, useEffect } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.js';\nimport { useConstant } from '../../utils/use-constant.js';\n/**\r\n * When a component is the child of `AnimatePresence`, it can use `usePresence`\r\n * to access information about whether it's still present in the React tree.\r\n *\r\n * ```jsx\r\n * import { usePresence } from \"framer-motion\"\r\n *\r\n * export const Component = () => {\r\n *   const [isPresent, safeToRemove] = usePresence()\r\n *\r\n *   useEffect(() => {\r\n *     !isPresent && setTimeout(safeToRemove, 1000)\r\n *   }, [isPresent])\r\n *\r\n *   return <div />\r\n * }\r\n * ```\r\n *\r\n * If `isPresent` is `false`, it means that a component has been removed the tree, but\r\n * `AnimatePresence` won't really remove it until `safeToRemove` has been called.\r\n *\r\n * @public\r\n */\n\nfunction usePresence() {\n  var context = useContext(PresenceContext);\n  if (context === null) return [true, null];\n  var isPresent = context.isPresent,\n      onExitComplete = context.onExitComplete,\n      register = context.register; // It's safe to call the following hooks conditionally (after an early return) because the context will always\n  // either be null or non-null for the lifespan of the component.\n  // Replace with useOpaqueId when released in React\n\n  var id = useUniqueId();\n  useEffect(function () {\n    return register(id);\n  }, []);\n\n  var safeToRemove = function () {\n    return onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete(id);\n  };\n\n  return !isPresent && onExitComplete ? [false, safeToRemove] : [true];\n}\n/**\r\n * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.\r\n * There is no `safeToRemove` function.\r\n *\r\n * ```jsx\r\n * import { useIsPresent } from \"framer-motion\"\r\n *\r\n * export const Component = () => {\r\n *   const isPresent = useIsPresent()\r\n *\r\n *   useEffect(() => {\r\n *     !isPresent && console.log(\"I've been removed!\")\r\n *   }, [isPresent])\r\n *\r\n *   return <div />\r\n * }\r\n * ```\r\n *\r\n * @public\r\n */\n\n\nfunction useIsPresent() {\n  return isPresent(useContext(PresenceContext));\n}\n\nfunction isPresent(context) {\n  return context === null ? true : context.isPresent;\n}\n\nvar counter = 0;\n\nvar incrementId = function () {\n  return counter++;\n};\n\nvar useUniqueId = function () {\n  return useConstant(incrementId);\n};\n\nexport { isPresent, useIsPresent, usePresence };","map":{"version":3,"sources":["D:/Documents/GitHub/instafill/front-end/node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.js"],"names":["useContext","useEffect","PresenceContext","useConstant","usePresence","context","isPresent","onExitComplete","register","id","useUniqueId","safeToRemove","useIsPresent","counter","incrementId"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,SAArB,QAAsC,OAAtC;AACA,SAASC,eAAT,QAAgC,kCAAhC;AACA,SAASC,WAAT,QAA4B,6BAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,WAAT,GAAuB;AACnB,MAAIC,OAAO,GAAGL,UAAU,CAACE,eAAD,CAAxB;AACA,MAAIG,OAAO,KAAK,IAAhB,EACI,OAAO,CAAC,IAAD,EAAO,IAAP,CAAP;AACJ,MAAIC,SAAS,GAAGD,OAAO,CAACC,SAAxB;AAAA,MAAmCC,cAAc,GAAGF,OAAO,CAACE,cAA5D;AAAA,MAA4EC,QAAQ,GAAGH,OAAO,CAACG,QAA/F,CAJmB,CAKnB;AACA;AACA;;AACA,MAAIC,EAAE,GAAGC,WAAW,EAApB;AACAT,EAAAA,SAAS,CAAC,YAAY;AAAE,WAAOO,QAAQ,CAACC,EAAD,CAAf;AAAsB,GAArC,EAAuC,EAAvC,CAAT;;AACA,MAAIE,YAAY,GAAG,YAAY;AAAE,WAAOJ,cAAc,KAAK,IAAnB,IAA2BA,cAAc,KAAK,KAAK,CAAnD,GAAuD,KAAK,CAA5D,GAAgEA,cAAc,CAACE,EAAD,CAArF;AAA4F,GAA7H;;AACA,SAAO,CAACH,SAAD,IAAcC,cAAd,GAA+B,CAAC,KAAD,EAAQI,YAAR,CAA/B,GAAuD,CAAC,IAAD,CAA9D;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,YAAT,GAAwB;AACpB,SAAON,SAAS,CAACN,UAAU,CAACE,eAAD,CAAX,CAAhB;AACH;;AACD,SAASI,SAAT,CAAmBD,OAAnB,EAA4B;AACxB,SAAOA,OAAO,KAAK,IAAZ,GAAmB,IAAnB,GAA0BA,OAAO,CAACC,SAAzC;AACH;;AACD,IAAIO,OAAO,GAAG,CAAd;;AACA,IAAIC,WAAW,GAAG,YAAY;AAAE,SAAOD,OAAO,EAAd;AAAmB,CAAnD;;AACA,IAAIH,WAAW,GAAG,YAAY;AAAE,SAAOP,WAAW,CAACW,WAAD,CAAlB;AAAkC,CAAlE;;AAEA,SAASR,SAAT,EAAoBM,YAApB,EAAkCR,WAAlC","sourcesContent":["import { useContext, useEffect } from 'react';\r\nimport { PresenceContext } from '../../context/PresenceContext.js';\r\nimport { useConstant } from '../../utils/use-constant.js';\r\n\r\n/**\r\n * When a component is the child of `AnimatePresence`, it can use `usePresence`\r\n * to access information about whether it's still present in the React tree.\r\n *\r\n * ```jsx\r\n * import { usePresence } from \"framer-motion\"\r\n *\r\n * export const Component = () => {\r\n *   const [isPresent, safeToRemove] = usePresence()\r\n *\r\n *   useEffect(() => {\r\n *     !isPresent && setTimeout(safeToRemove, 1000)\r\n *   }, [isPresent])\r\n *\r\n *   return <div />\r\n * }\r\n * ```\r\n *\r\n * If `isPresent` is `false`, it means that a component has been removed the tree, but\r\n * `AnimatePresence` won't really remove it until `safeToRemove` has been called.\r\n *\r\n * @public\r\n */\r\nfunction usePresence() {\r\n    var context = useContext(PresenceContext);\r\n    if (context === null)\r\n        return [true, null];\r\n    var isPresent = context.isPresent, onExitComplete = context.onExitComplete, register = context.register;\r\n    // It's safe to call the following hooks conditionally (after an early return) because the context will always\r\n    // either be null or non-null for the lifespan of the component.\r\n    // Replace with useOpaqueId when released in React\r\n    var id = useUniqueId();\r\n    useEffect(function () { return register(id); }, []);\r\n    var safeToRemove = function () { return onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete(id); };\r\n    return !isPresent && onExitComplete ? [false, safeToRemove] : [true];\r\n}\r\n/**\r\n * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.\r\n * There is no `safeToRemove` function.\r\n *\r\n * ```jsx\r\n * import { useIsPresent } from \"framer-motion\"\r\n *\r\n * export const Component = () => {\r\n *   const isPresent = useIsPresent()\r\n *\r\n *   useEffect(() => {\r\n *     !isPresent && console.log(\"I've been removed!\")\r\n *   }, [isPresent])\r\n *\r\n *   return <div />\r\n * }\r\n * ```\r\n *\r\n * @public\r\n */\r\nfunction useIsPresent() {\r\n    return isPresent(useContext(PresenceContext));\r\n}\r\nfunction isPresent(context) {\r\n    return context === null ? true : context.isPresent;\r\n}\r\nvar counter = 0;\r\nvar incrementId = function () { return counter++; };\r\nvar useUniqueId = function () { return useConstant(incrementId); };\r\n\r\nexport { isPresent, useIsPresent, usePresence };\r\n"]},"metadata":{},"sourceType":"module"}