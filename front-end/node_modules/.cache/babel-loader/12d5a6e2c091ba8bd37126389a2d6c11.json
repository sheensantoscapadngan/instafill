{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport PDFDocument from \"./PDFDocument\";\nimport { JpegEmbedder, PDFRef, PngEmbedder } from \"../core\";\nimport { assertIs } from \"../utils\";\n/**\r\n * Represents an image that has been embedded in a [[PDFDocument]].\r\n */\n\nvar PDFImage =\n/** @class */\nfunction () {\n  function PDFImage(ref, doc, embedder) {\n    this.alreadyEmbedded = false;\n    assertIs(ref, 'ref', [[PDFRef, 'PDFRef']]);\n    assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n    assertIs(embedder, 'embedder', [[JpegEmbedder, 'JpegEmbedder'], [PngEmbedder, 'PngEmbedder']]);\n    this.ref = ref;\n    this.doc = doc;\n    this.width = embedder.width;\n    this.height = embedder.height;\n    this.embedder = embedder;\n  }\n  /**\r\n   * Compute the width and height of this image after being scaled by the\r\n   * given `factor`. For example:\r\n   * ```js\r\n   * image.width  // => 500\r\n   * image.height // => 250\r\n   *\r\n   * const scaled = image.scale(0.5)\r\n   * scaled.width  // => 250\r\n   * scaled.height // => 125\r\n   * ```\r\n   * This operation is often useful before drawing an image with\r\n   * [[PDFPage.drawImage]] to compute the `width` and `height` options.\r\n   * @param factor The factor by which this image should be scaled.\r\n   * @returns The width and height of the image after being scaled.\r\n   */\n\n\n  PDFImage.prototype.scale = function (factor) {\n    assertIs(factor, 'factor', ['number']);\n    return {\n      width: this.width * factor,\n      height: this.height * factor\n    };\n  };\n  /**\r\n   * Get the width and height of this image after scaling it as large as\r\n   * possible while maintaining its aspect ratio and not exceeding the\r\n   * specified `width` and `height`. For example:\r\n   * ```\r\n   * image.width  // => 500\r\n   * image.height // => 250\r\n   *\r\n   * const scaled = image.scaleToFit(750, 1000)\r\n   * scaled.width  // => 750\r\n   * scaled.height // => 375\r\n   * ```\r\n   * The `width` and `height` parameters can also be thought of as the width\r\n   * and height of a box that the scaled image must fit within.\r\n   * @param width The bounding box's width.\r\n   * @param height The bounding box's height.\r\n   * @returns The width and height of the image after being scaled.\r\n   */\n\n\n  PDFImage.prototype.scaleToFit = function (width, height) {\n    assertIs(width, 'width', ['number']);\n    assertIs(height, 'height', ['number']);\n    var imgWidthScale = width / this.width;\n    var imgHeightScale = height / this.height;\n    var scale = Math.min(imgWidthScale, imgHeightScale);\n    return this.scale(scale);\n  };\n  /**\r\n   * Get the width and height of this image. For example:\r\n   * ```js\r\n   * const { width, height } = image.size()\r\n   * ```\r\n   * @returns The width and height of the image.\r\n   */\n\n\n  PDFImage.prototype.size = function () {\n    return this.scale(1);\n  };\n  /**\r\n   * > **NOTE:** You probably don't need to call this method directly. The\r\n   * > [[PDFDocument.save]] and [[PDFDocument.saveAsBase64]] methods will\r\n   * > automatically ensure all images get embedded.\r\n   *\r\n   * Embed this image in its document.\r\n   *\r\n   * @returns Resolves when the embedding is complete.\r\n   */\n\n\n  PDFImage.prototype.embed = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!this.alreadyEmbedded) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.embedder.embedIntoContext(this.doc.context, this.ref)];\n\n          case 1:\n            _a.sent();\n\n            this.alreadyEmbedded = true;\n            _a.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\r\n   * > consider using the [[PDFDocument.embedPng]] and [[PDFDocument.embedJpg]]\r\n   * > methods, which will create instances of [[PDFImage]] for you.\r\n   *\r\n   * Create an instance of [[PDFImage]] from an existing ref and embedder\r\n   *\r\n   * @param ref The unique reference for this image.\r\n   * @param doc The document to which the image will belong.\r\n   * @param embedder The embedder that will be used to embed the image.\r\n   */\n\n\n  PDFImage.of = function (ref, doc, embedder) {\n    return new PDFImage(ref, doc, embedder);\n  };\n\n  return PDFImage;\n}();\n\nexport default PDFImage;","map":{"version":3,"sources":["../../src/api/PDFImage.ts"],"names":[],"mappings":";AACA,OAAO,WAAP,MAAkB,eAAlB;AACA,SAAS,YAAT,EAAuB,MAAvB,EAA+B,WAA/B,QAA4C,SAA5C;AACA,SAAS,QAAT,QAAmB,UAAnB;AAIA;;AAEG;;AACH,IAAA,QAAA;AAAA;AAAA,YAAA;AA8BE,WAAA,QAAA,CAAoB,GAApB,EAAiC,GAAjC,EAAmD,QAAnD,EAA0E;AAHlE,SAAA,eAAA,GAAkB,KAAlB;AAIN,IAAA,QAAQ,CAAC,GAAD,EAAM,KAAN,EAAa,CAAC,CAAC,MAAD,EAAS,QAAT,CAAD,CAAb,CAAR;AACA,IAAA,QAAQ,CAAC,GAAD,EAAM,KAAN,EAAa,CAAC,CAAC,WAAD,EAAc,aAAd,CAAD,CAAb,CAAR;AACA,IAAA,QAAQ,CAAC,QAAD,EAAW,UAAX,EAAuB,CAC7B,CAAC,YAAD,EAAe,cAAf,CAD6B,EAE7B,CAAC,WAAD,EAAc,aAAd,CAF6B,CAAvB,CAAR;AAKA,SAAK,GAAL,GAAW,GAAX;AACA,SAAK,GAAL,GAAW,GAAX;AACA,SAAK,KAAL,GAAa,QAAQ,CAAC,KAAtB;AACA,SAAK,MAAL,GAAc,QAAQ,CAAC,MAAvB;AAEA,SAAK,QAAL,GAAgB,QAAhB;AACD;AAED;;;;;;;;;;;;;;;AAeG;;;AACH,EAAA,QAAA,CAAA,SAAA,CAAA,KAAA,GAAA,UAAM,MAAN,EAAoB;AAClB,IAAA,QAAQ,CAAC,MAAD,EAAS,QAAT,EAAmB,CAAC,QAAD,CAAnB,CAAR;AACA,WAAO;AAAE,MAAA,KAAK,EAAE,KAAK,KAAL,GAAa,MAAtB;AAA8B,MAAA,MAAM,EAAE,KAAK,MAAL,GAAc;AAApD,KAAP;AACD,GAHD;AAKA;;;;;;;;;;;;;;;;;AAiBG;;;AACH,EAAA,QAAA,CAAA,SAAA,CAAA,UAAA,GAAA,UAAW,KAAX,EAA0B,MAA1B,EAAwC;AACtC,IAAA,QAAQ,CAAC,KAAD,EAAQ,OAAR,EAAiB,CAAC,QAAD,CAAjB,CAAR;AACA,IAAA,QAAQ,CAAC,MAAD,EAAS,QAAT,EAAmB,CAAC,QAAD,CAAnB,CAAR;AAEA,QAAM,aAAa,GAAG,KAAK,GAAG,KAAK,KAAnC;AACA,QAAM,cAAc,GAAG,MAAM,GAAG,KAAK,MAArC;AACA,QAAM,KAAK,GAAG,IAAI,CAAC,GAAL,CAAS,aAAT,EAAwB,cAAxB,CAAd;AAEA,WAAO,KAAK,KAAL,CAAW,KAAX,CAAP;AACD,GATD;AAWA;;;;;;AAMG;;;AACH,EAAA,QAAA,CAAA,SAAA,CAAA,IAAA,GAAA,YAAA;AACE,WAAO,KAAK,KAAL,CAAW,CAAX,CAAP;AACD,GAFD;AAIA;;;;;;;;AAQG;;;AACG,EAAA,QAAA,CAAA,SAAA,CAAA,KAAA,GAAN,YAAA;;;;;iBACM,CAAC,KAAK,e,EAAN,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AACF,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,QAAL,CAAc,gBAAd,CAA+B,KAAK,GAAL,CAAS,OAAxC,EAAiD,KAAK,GAAtD,CAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AACA,iBAAK,eAAL,GAAuB,IAAvB;;;;;;;;;;AAEH,GALK;AAnHN;;;;;;;;;;AAUG;;;AACI,EAAA,QAAA,CAAA,EAAA,GAAK,UAAC,GAAD,EAAc,GAAd,EAAgC,QAAhC,EAAuD;AACjE,WAAA,IAAI,QAAJ,CAAa,GAAb,EAAkB,GAAlB,EAAuB,QAAvB,CAAA;AAAgC,GAD3B;;AA8GT,SAAA,QAAA;AAAC,CA1HD,EAAA;;eAAqB,Q","sourceRoot":"","sourcesContent":["import { __awaiter, __generator } from \"tslib\";\r\nimport PDFDocument from \"./PDFDocument\";\r\nimport { JpegEmbedder, PDFRef, PngEmbedder } from \"../core\";\r\nimport { assertIs } from \"../utils\";\r\n/**\r\n * Represents an image that has been embedded in a [[PDFDocument]].\r\n */\r\nvar PDFImage = /** @class */ (function () {\r\n    function PDFImage(ref, doc, embedder) {\r\n        this.alreadyEmbedded = false;\r\n        assertIs(ref, 'ref', [[PDFRef, 'PDFRef']]);\r\n        assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\r\n        assertIs(embedder, 'embedder', [\r\n            [JpegEmbedder, 'JpegEmbedder'],\r\n            [PngEmbedder, 'PngEmbedder'],\r\n        ]);\r\n        this.ref = ref;\r\n        this.doc = doc;\r\n        this.width = embedder.width;\r\n        this.height = embedder.height;\r\n        this.embedder = embedder;\r\n    }\r\n    /**\r\n     * Compute the width and height of this image after being scaled by the\r\n     * given `factor`. For example:\r\n     * ```js\r\n     * image.width  // => 500\r\n     * image.height // => 250\r\n     *\r\n     * const scaled = image.scale(0.5)\r\n     * scaled.width  // => 250\r\n     * scaled.height // => 125\r\n     * ```\r\n     * This operation is often useful before drawing an image with\r\n     * [[PDFPage.drawImage]] to compute the `width` and `height` options.\r\n     * @param factor The factor by which this image should be scaled.\r\n     * @returns The width and height of the image after being scaled.\r\n     */\r\n    PDFImage.prototype.scale = function (factor) {\r\n        assertIs(factor, 'factor', ['number']);\r\n        return { width: this.width * factor, height: this.height * factor };\r\n    };\r\n    /**\r\n     * Get the width and height of this image after scaling it as large as\r\n     * possible while maintaining its aspect ratio and not exceeding the\r\n     * specified `width` and `height`. For example:\r\n     * ```\r\n     * image.width  // => 500\r\n     * image.height // => 250\r\n     *\r\n     * const scaled = image.scaleToFit(750, 1000)\r\n     * scaled.width  // => 750\r\n     * scaled.height // => 375\r\n     * ```\r\n     * The `width` and `height` parameters can also be thought of as the width\r\n     * and height of a box that the scaled image must fit within.\r\n     * @param width The bounding box's width.\r\n     * @param height The bounding box's height.\r\n     * @returns The width and height of the image after being scaled.\r\n     */\r\n    PDFImage.prototype.scaleToFit = function (width, height) {\r\n        assertIs(width, 'width', ['number']);\r\n        assertIs(height, 'height', ['number']);\r\n        var imgWidthScale = width / this.width;\r\n        var imgHeightScale = height / this.height;\r\n        var scale = Math.min(imgWidthScale, imgHeightScale);\r\n        return this.scale(scale);\r\n    };\r\n    /**\r\n     * Get the width and height of this image. For example:\r\n     * ```js\r\n     * const { width, height } = image.size()\r\n     * ```\r\n     * @returns The width and height of the image.\r\n     */\r\n    PDFImage.prototype.size = function () {\r\n        return this.scale(1);\r\n    };\r\n    /**\r\n     * > **NOTE:** You probably don't need to call this method directly. The\r\n     * > [[PDFDocument.save]] and [[PDFDocument.saveAsBase64]] methods will\r\n     * > automatically ensure all images get embedded.\r\n     *\r\n     * Embed this image in its document.\r\n     *\r\n     * @returns Resolves when the embedding is complete.\r\n     */\r\n    PDFImage.prototype.embed = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!!this.alreadyEmbedded) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, this.embedder.embedIntoContext(this.doc.context, this.ref)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        this.alreadyEmbedded = true;\r\n                        _a.label = 2;\r\n                    case 2: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * > **NOTE:** You probably don't want to call this method directly. Instead,\r\n     * > consider using the [[PDFDocument.embedPng]] and [[PDFDocument.embedJpg]]\r\n     * > methods, which will create instances of [[PDFImage]] for you.\r\n     *\r\n     * Create an instance of [[PDFImage]] from an existing ref and embedder\r\n     *\r\n     * @param ref The unique reference for this image.\r\n     * @param doc The document to which the image will belong.\r\n     * @param embedder The embedder that will be used to embed the image.\r\n     */\r\n    PDFImage.of = function (ref, doc, embedder) {\r\n        return new PDFImage(ref, doc, embedder);\r\n    };\r\n    return PDFImage;\r\n}());\r\nexport default PDFImage;\r\n//# sourceMappingURL=PDFImage.js.map"]},"metadata":{},"sourceType":"module"}