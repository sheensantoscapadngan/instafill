{"ast":null,"code":"var _jsxFileName = \"F:\\\\github_repos\\\\instafill\\\\front-end\\\\src\\\\components\\\\common\\\\dropzone\\\\DropzoneMASTER.jsx\";\nimport React, { useCallback, Component } from 'react';\nimport './Dropzone.css';\nimport styled from 'styled-components';\nimport axios from 'axios';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faUpload } from '@fortawesome/free-solid-svg-icons';\nimport Dropzone from 'react-dropzone';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlibrary.add(faUpload);\n/*const getColor = (props) => {\r\n  /*if (props.isDragAccept) {\r\n      return '#00e676';\r\n  }\r\n  if (props.isDragReject) {\r\n      return '#ff1744';\r\n  }\r\n  if (props.isDragActive) {\r\n      return '#2196f3';\r\n  }\r\n  return '#00abeb';\r\n}\r\n\r\nconst Container = styled.div`\r\n\r\n  border-color: ${props => getColor(props)};\r\n\r\n`;\r\n\r\n\r\nfunction DropzoneMASTER(props) {\r\n\r\n  const onDrop = useCallback(acceptedFiles =>{\r\n    let formData = new FormData()\r\n    formData.append('master',acceptedFiles[0])\r\n\r\n    \r\n    \r\n    axios({\r\n      url: '/process',\r\n      method: \"POST\",\r\n      headers:{\r\n        'Content-Type': 'multipart/form-data'\r\n      },\r\n      data: formData\r\n    }).then((res)=>{\r\n      \r\n    })\r\n\r\n  }, [])\r\n  \r\n  const {\r\n    getRootProps,\r\n    getInputProps,\r\n    isDragActive,\r\n    isDragAccept,\r\n    isDragReject,\r\n  } = useDropzone({accept: '.pdf, .txt',onDrop});\r\n\r\n  \r\n  return (\r\n    <div className=\"container\">\r\n      <Container {...getRootProps({isDragActive, isDragAccept, isDragReject})} className=\"inner-container\">\r\n        <input {...getInputProps()} />\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <FontAwesomeIcon icon=\"upload\" size=\"3x\"/>\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <h1>DROP FILES HERE OR <span className=\"browse\">BROWSE</span></h1>\r\n        <br></br>\r\n        <br></br>\r\n        <p>Drag and drop files in this area for quick upload to the cloud or use file explorer</p>\r\n        \r\n\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\n<DropzoneMASTER />\r\nexport default DropzoneMASTER;*/\n\nclass DropzoneMASTER extends Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"hello\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default DropzoneMASTER;","map":{"version":3,"sources":["F:/github_repos/instafill/front-end/src/components/common/dropzone/DropzoneMASTER.jsx"],"names":["React","useCallback","Component","styled","axios","FontAwesomeIcon","library","faUpload","Dropzone","add","DropzoneMASTER","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,QAA8C,OAA9C;AACA,OAAO,gBAAP;AAEA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAAQC,eAAR,QAA8B,gCAA9B;AACA,SAASC,OAAT,QAAwB,mCAAxB;AACA,SAASC,QAAT,QAAyB,mCAAzB;AAEA,OAAOC,QAAP,MAAqB,gBAArB;;AAEAF,OAAO,CAACG,GAAR,CAAYF,QAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,MAAMG,cAAN,SAA6BR,SAA7B,CAAsC;AACpCS,EAAAA,MAAM,GAAE;AACN,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAGD;;AALmC;;AAStC,eAAeD,cAAf","sourcesContent":["import React, { useCallback, Component } from 'react';\r\nimport './Dropzone.css'\r\n\r\nimport styled from 'styled-components';\r\nimport axios from 'axios';\r\n\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { faUpload } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport Dropzone from 'react-dropzone';\r\n\r\nlibrary.add(faUpload)\r\n\r\n/*const getColor = (props) => {\r\n  /*if (props.isDragAccept) {\r\n      return '#00e676';\r\n  }\r\n  if (props.isDragReject) {\r\n      return '#ff1744';\r\n  }\r\n  if (props.isDragActive) {\r\n      return '#2196f3';\r\n  }\r\n  return '#00abeb';\r\n}\r\n\r\nconst Container = styled.div`\r\n\r\n  border-color: ${props => getColor(props)};\r\n\r\n`;\r\n\r\n\r\nfunction DropzoneMASTER(props) {\r\n\r\n  const onDrop = useCallback(acceptedFiles =>{\r\n    let formData = new FormData()\r\n    formData.append('master',acceptedFiles[0])\r\n\r\n    \r\n    \r\n    axios({\r\n      url: '/process',\r\n      method: \"POST\",\r\n      headers:{\r\n        'Content-Type': 'multipart/form-data'\r\n      },\r\n      data: formData\r\n    }).then((res)=>{\r\n      \r\n    })\r\n\r\n  }, [])\r\n  \r\n  const {\r\n    getRootProps,\r\n    getInputProps,\r\n    isDragActive,\r\n    isDragAccept,\r\n    isDragReject,\r\n  } = useDropzone({accept: '.pdf, .txt',onDrop});\r\n\r\n  \r\n  return (\r\n    <div className=\"container\">\r\n      <Container {...getRootProps({isDragActive, isDragAccept, isDragReject})} className=\"inner-container\">\r\n        <input {...getInputProps()} />\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <FontAwesomeIcon icon=\"upload\" size=\"3x\"/>\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <h1>DROP FILES HERE OR <span className=\"browse\">BROWSE</span></h1>\r\n        <br></br>\r\n        <br></br>\r\n        <p>Drag and drop files in this area for quick upload to the cloud or use file explorer</p>\r\n        \r\n\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\n<DropzoneMASTER />\r\nexport default DropzoneMASTER;*/\r\n\r\n\r\nclass DropzoneMASTER extends Component{\r\n  render(){\r\n    return(\r\n      <div>hello</div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default DropzoneMASTER"]},"metadata":{},"sourceType":"module"}