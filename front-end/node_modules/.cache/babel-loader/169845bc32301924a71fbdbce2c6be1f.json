{"ast":null,"code":"import { NextByteAssertionError } from \"../errors\";\nimport { decodePDFRawStream } from \"../streams/decode\";\nimport CharCodes from \"../syntax/CharCodes\"; // TODO: See how line/col tracking affects performance\n\nvar ByteStream =\n/** @class */\nfunction () {\n  function ByteStream(bytes) {\n    this.idx = 0;\n    this.line = 0;\n    this.column = 0;\n    this.bytes = bytes;\n    this.length = this.bytes.length;\n  }\n\n  ByteStream.prototype.moveTo = function (offset) {\n    this.idx = offset;\n  };\n\n  ByteStream.prototype.next = function () {\n    var byte = this.bytes[this.idx++];\n\n    if (byte === CharCodes.Newline) {\n      this.line += 1;\n      this.column = 0;\n    } else {\n      this.column += 1;\n    }\n\n    return byte;\n  };\n\n  ByteStream.prototype.assertNext = function (expected) {\n    if (this.peek() !== expected) {\n      throw new NextByteAssertionError(this.position(), expected, this.peek());\n    }\n\n    return this.next();\n  };\n\n  ByteStream.prototype.peek = function () {\n    return this.bytes[this.idx];\n  };\n\n  ByteStream.prototype.peekAhead = function (steps) {\n    return this.bytes[this.idx + steps];\n  };\n\n  ByteStream.prototype.peekAt = function (offset) {\n    return this.bytes[offset];\n  };\n\n  ByteStream.prototype.done = function () {\n    return this.idx >= this.length;\n  };\n\n  ByteStream.prototype.offset = function () {\n    return this.idx;\n  };\n\n  ByteStream.prototype.slice = function (start, end) {\n    return this.bytes.slice(start, end);\n  };\n\n  ByteStream.prototype.position = function () {\n    return {\n      line: this.line,\n      column: this.column,\n      offset: this.idx\n    };\n  };\n\n  ByteStream.of = function (bytes) {\n    return new ByteStream(bytes);\n  };\n\n  ByteStream.fromPDFRawStream = function (rawStream) {\n    return ByteStream.of(decodePDFRawStream(rawStream).decode());\n  };\n\n  return ByteStream;\n}();\n\nexport default ByteStream;","map":{"version":3,"sources":["../../../src/core/parser/ByteStream.ts"],"names":[],"mappings":"AAAA,SAAS,sBAAT,QAAiC,WAAjC;AAEA,SAAS,kBAAT,QAA6B,mBAA7B;AACA,OAAO,SAAP,MAAgB,qBAAhB,C,CAEA;;AACA,IAAA,UAAA;AAAA;AAAA,YAAA;AAaE,WAAA,UAAA,CAAY,KAAZ,EAA6B;AAJrB,SAAA,GAAA,GAAM,CAAN;AACA,SAAA,IAAA,GAAO,CAAP;AACA,SAAA,MAAA,GAAS,CAAT;AAGN,SAAK,KAAL,GAAa,KAAb;AACA,SAAK,MAAL,GAAc,KAAK,KAAL,CAAW,MAAzB;AACD;;AAED,EAAA,UAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,MAAP,EAAqB;AACnB,SAAK,GAAL,GAAW,MAAX;AACD,GAFD;;AAIA,EAAA,UAAA,CAAA,SAAA,CAAA,IAAA,GAAA,YAAA;AACE,QAAM,IAAI,GAAG,KAAK,KAAL,CAAW,KAAK,GAAL,EAAX,CAAb;;AACA,QAAI,IAAI,KAAK,SAAS,CAAC,OAAvB,EAAgC;AAC9B,WAAK,IAAL,IAAa,CAAb;AACA,WAAK,MAAL,GAAc,CAAd;AACD,KAHD,MAGO;AACL,WAAK,MAAL,IAAe,CAAf;AACD;;AACD,WAAO,IAAP;AACD,GATD;;AAWA,EAAA,UAAA,CAAA,SAAA,CAAA,UAAA,GAAA,UAAW,QAAX,EAA2B;AACzB,QAAI,KAAK,IAAL,OAAgB,QAApB,EAA8B;AAC5B,YAAM,IAAI,sBAAJ,CAA2B,KAAK,QAAL,EAA3B,EAA4C,QAA5C,EAAsD,KAAK,IAAL,EAAtD,CAAN;AACD;;AACD,WAAO,KAAK,IAAL,EAAP;AACD,GALD;;AAOA,EAAA,UAAA,CAAA,SAAA,CAAA,IAAA,GAAA,YAAA;AACE,WAAO,KAAK,KAAL,CAAW,KAAK,GAAhB,CAAP;AACD,GAFD;;AAIA,EAAA,UAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,KAAV,EAAuB;AACrB,WAAO,KAAK,KAAL,CAAW,KAAK,GAAL,GAAW,KAAtB,CAAP;AACD,GAFD;;AAIA,EAAA,UAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,MAAP,EAAqB;AACnB,WAAO,KAAK,KAAL,CAAW,MAAX,CAAP;AACD,GAFD;;AAIA,EAAA,UAAA,CAAA,SAAA,CAAA,IAAA,GAAA,YAAA;AACE,WAAO,KAAK,GAAL,IAAY,KAAK,MAAxB;AACD,GAFD;;AAIA,EAAA,UAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACE,WAAO,KAAK,GAAZ;AACD,GAFD;;AAIA,EAAA,UAAA,CAAA,SAAA,CAAA,KAAA,GAAA,UAAM,KAAN,EAAqB,GAArB,EAAgC;AAC9B,WAAO,KAAK,KAAL,CAAW,KAAX,CAAiB,KAAjB,EAAwB,GAAxB,CAAP;AACD,GAFD;;AAIA,EAAA,UAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AACE,WAAO;AAAE,MAAA,IAAI,EAAE,KAAK,IAAb;AAAmB,MAAA,MAAM,EAAE,KAAK,MAAhC;AAAwC,MAAA,MAAM,EAAE,KAAK;AAArD,KAAP;AACD,GAFD;;AA/DO,EAAA,UAAA,CAAA,EAAA,GAAK,UAAC,KAAD,EAAkB;AAAK,WAAA,IAAI,UAAJ,CAAA,KAAA,CAAA;AAAqB,GAAjD;;AAEA,EAAA,UAAA,CAAA,gBAAA,GAAmB,UAAC,SAAD,EAAwB;AAChD,WAAA,UAAU,CAAC,EAAX,CAAc,kBAAkB,CAAC,SAAD,CAAlB,CAA8B,MAA9B,EAAd,CAAA;AAAqD,GADhD;;AAgET,SAAA,UAAA;AAAC,CAnED,EAAA;;AAqEA,eAAe,UAAf","sourceRoot":"","sourcesContent":["import { NextByteAssertionError } from \"../errors\";\r\nimport { decodePDFRawStream } from \"../streams/decode\";\r\nimport CharCodes from \"../syntax/CharCodes\";\r\n// TODO: See how line/col tracking affects performance\r\nvar ByteStream = /** @class */ (function () {\r\n    function ByteStream(bytes) {\r\n        this.idx = 0;\r\n        this.line = 0;\r\n        this.column = 0;\r\n        this.bytes = bytes;\r\n        this.length = this.bytes.length;\r\n    }\r\n    ByteStream.prototype.moveTo = function (offset) {\r\n        this.idx = offset;\r\n    };\r\n    ByteStream.prototype.next = function () {\r\n        var byte = this.bytes[this.idx++];\r\n        if (byte === CharCodes.Newline) {\r\n            this.line += 1;\r\n            this.column = 0;\r\n        }\r\n        else {\r\n            this.column += 1;\r\n        }\r\n        return byte;\r\n    };\r\n    ByteStream.prototype.assertNext = function (expected) {\r\n        if (this.peek() !== expected) {\r\n            throw new NextByteAssertionError(this.position(), expected, this.peek());\r\n        }\r\n        return this.next();\r\n    };\r\n    ByteStream.prototype.peek = function () {\r\n        return this.bytes[this.idx];\r\n    };\r\n    ByteStream.prototype.peekAhead = function (steps) {\r\n        return this.bytes[this.idx + steps];\r\n    };\r\n    ByteStream.prototype.peekAt = function (offset) {\r\n        return this.bytes[offset];\r\n    };\r\n    ByteStream.prototype.done = function () {\r\n        return this.idx >= this.length;\r\n    };\r\n    ByteStream.prototype.offset = function () {\r\n        return this.idx;\r\n    };\r\n    ByteStream.prototype.slice = function (start, end) {\r\n        return this.bytes.slice(start, end);\r\n    };\r\n    ByteStream.prototype.position = function () {\r\n        return { line: this.line, column: this.column, offset: this.idx };\r\n    };\r\n    ByteStream.of = function (bytes) { return new ByteStream(bytes); };\r\n    ByteStream.fromPDFRawStream = function (rawStream) {\r\n        return ByteStream.of(decodePDFRawStream(rawStream).decode());\r\n    };\r\n    return ByteStream;\r\n}());\r\nexport default ByteStream;\r\n//# sourceMappingURL=ByteStream.js.map"]},"metadata":{},"sourceType":"module"}