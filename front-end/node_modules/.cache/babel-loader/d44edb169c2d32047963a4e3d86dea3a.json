{"ast":null,"code":"import React, { useCallback } from 'react';\nimport './Dropzone.css';\nimport { useDropzone } from 'react-dropzone';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faUpload } from '@fortawesome/free-solid-svg-icons';\nimport * as pdflib from '../../../pdflib/processPdf.js';\nlibrary.add(faUpload);\n\nconst getColor = props => {\n  /*if (props.isDragAccept) {\r\n      return '#00e676';\r\n  }\r\n  if (props.isDragReject) {\r\n      return '#ff1744';\r\n  }\r\n  if (props.isDragActive) {\r\n      return '#2196f3';\r\n  }*/\n  return '#00abeb';\n};\n\nconst Container = styled.div`\n\n  border-color: ${props => getColor(props)};\n\n`;\n/*const DropzonePDF = ({setFileUploadPDF}) => {\r\n\r\n  const onDrop = useCallback(acceptedFiles =>{\r\n    setFileUploadPDF(acceptedFiles);  \r\n    /*let formData = new FormData()\r\n    formData.append('pdf',acceptedFiles[0])\r\n\r\n    pdflib.preprocessPdf(acceptedFiles[0])\r\n\r\n    axios({\r\n      url: '/process',\r\n      method: \"POST\",\r\n      headers:{\r\n        'Content-Type': 'multipart/form-data'\r\n      },\r\n      data: formData\r\n    }).then((res)=>{\r\n      \r\n    })\r\n\r\n  }, [])\r\n  \r\n  const {\r\n    getRootProps,\r\n    getInputProps,\r\n    isDragActive,\r\n    isDragAccept,\r\n    isDragReject,\r\n  } = useDropzone({accept: '.pdf',onDrop});\r\n\r\n\r\n\r\n  \r\n  return (\r\n    <div className=\"container\">\r\n      <Container {...getRootProps({isDragActive, isDragAccept, isDragReject})} className=\"inner-container\">\r\n        <input {...getInputProps()} />\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <FontAwesomeIcon icon=\"upload\" size=\"3x\"/>\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <h1>DROP FILES HERE OR <span className=\"browse\">BROWSE</span></h1>\r\n        <br></br>\r\n        <br></br>\r\n        <p>Drag and drop files in this area for quick upload to the cloud or use file explorer</p>\r\n        \r\n\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\n<DropzonePDF />\r\nexport default DropzonePDF;*/","map":{"version":3,"sources":["F:/github_repos/instafill/front-end/src/components/common/dropzone/DropzonePDF.jsx"],"names":["React","useCallback","useDropzone","styled","FontAwesomeIcon","library","faUpload","pdflib","add","getColor","props","Container","div"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AACA,OAAO,gBAAP;AACA,SAAQC,WAAR,QAA0B,gBAA1B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAGA,SAAQC,eAAR,QAA8B,gCAA9B;AACA,SAASC,OAAT,QAAwB,mCAAxB;AACA,SAASC,QAAT,QAAyB,mCAAzB;AACA,OAAO,KAAKC,MAAZ,MAAwB,+BAAxB;AACAF,OAAO,CAACG,GAAR,CAAYF,QAAZ;;AAEA,MAAMG,QAAQ,GAAIC,KAAD,IAAW;AAC1B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,SAAO,SAAP;AACD,CAXD;;AAaA,MAAMC,SAAS,GAAGR,MAAM,CAACS,GAAI;AAC7B;AACA,kBAAkBF,KAAK,IAAID,QAAQ,CAACC,KAAD,CAAQ;AAC3C;AACA,CAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useCallback } from 'react';\r\nimport './Dropzone.css'\r\nimport {useDropzone} from 'react-dropzone';\r\nimport styled from 'styled-components';\r\n\r\n\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { faUpload } from '@fortawesome/free-solid-svg-icons';\r\nimport * as pdflib from '../../../pdflib/processPdf.js'; \r\nlibrary.add(faUpload)\r\n\r\nconst getColor = (props) => {\r\n  /*if (props.isDragAccept) {\r\n      return '#00e676';\r\n  }\r\n  if (props.isDragReject) {\r\n      return '#ff1744';\r\n  }\r\n  if (props.isDragActive) {\r\n      return '#2196f3';\r\n  }*/\r\n  return '#00abeb';\r\n}\r\n\r\nconst Container = styled.div`\r\n\r\n  border-color: ${props => getColor(props)};\r\n\r\n`;\r\n\r\n\r\n/*const DropzonePDF = ({setFileUploadPDF}) => {\r\n\r\n  const onDrop = useCallback(acceptedFiles =>{\r\n    setFileUploadPDF(acceptedFiles);  \r\n    /*let formData = new FormData()\r\n    formData.append('pdf',acceptedFiles[0])\r\n\r\n    pdflib.preprocessPdf(acceptedFiles[0])\r\n\r\n    axios({\r\n      url: '/process',\r\n      method: \"POST\",\r\n      headers:{\r\n        'Content-Type': 'multipart/form-data'\r\n      },\r\n      data: formData\r\n    }).then((res)=>{\r\n      \r\n    })\r\n\r\n  }, [])\r\n  \r\n  const {\r\n    getRootProps,\r\n    getInputProps,\r\n    isDragActive,\r\n    isDragAccept,\r\n    isDragReject,\r\n  } = useDropzone({accept: '.pdf',onDrop});\r\n\r\n\r\n\r\n  \r\n  return (\r\n    <div className=\"container\">\r\n      <Container {...getRootProps({isDragActive, isDragAccept, isDragReject})} className=\"inner-container\">\r\n        <input {...getInputProps()} />\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <FontAwesomeIcon icon=\"upload\" size=\"3x\"/>\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <h1>DROP FILES HERE OR <span className=\"browse\">BROWSE</span></h1>\r\n        <br></br>\r\n        <br></br>\r\n        <p>Drag and drop files in this area for quick upload to the cloud or use file explorer</p>\r\n        \r\n\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\n<DropzonePDF />\r\nexport default DropzonePDF;*/\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}