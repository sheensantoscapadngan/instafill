{"ast":null,"code":"import { degrees, PDFDocument, rgb, StandardFonts } from 'pdf-lib';\n\nfunction downloadPdf(bytes) {\n  var blob = new Blob([bytes], {\n    type: \"application/pdf\"\n  });\n  var link = document.createElement('a');\n  link.href = window.URL.createObjectURL(blob);\n  link.download = \"edited.pdf\";\n  link.click();\n}\n\nasync function modifyPdf(bytes, position_dicts) {\n  position_dicts = {\n    0: [{\n      \"position\": (10, 10),\n      \"value\": \"carabao\"\n    }]\n  };\n  const existingPdfBytes = bytes;\n  const pdfDoc = await PDFDocument.load(existingPdfBytes);\n  const pages = pdfDoc.getPages();\n  const {\n    width,\n    height\n  } = pages[0];\n  console.log(\"WIDTH AND HEIGHT:\", width, \",\", height);\n\n  for (let page_number in position_dicts) {\n    let fill_objects = position_dicts[page_number];\n\n    for (let object_number in fill_objects) {\n      let fill_object = fill_objects[object_number];\n      let page = pages[page_number];\n      let value = fill_object[\"value\"];\n      let position = fill_object[\"position\"];\n      page.drawText(value, {\n        x: position[0],\n        y: position[1],\n        size: 20\n      });\n    }\n  }\n\n  const pdfBytes = await pdfDoc.save();\n  downloadPdf(pdfBytes);\n}\n\nexport function preprocessPdf(file, position_dicts) {\n  let reader = new FileReader();\n  reader.readAsArrayBuffer(file);\n\n  reader.onload = () => {\n    modifyPdf(reader.result);\n  };\n}","map":{"version":3,"sources":["E:/PROJECTS/instafill_local/instafill/front-end/src/pdflib/processPdf.js"],"names":["degrees","PDFDocument","rgb","StandardFonts","downloadPdf","bytes","blob","Blob","type","link","document","createElement","href","window","URL","createObjectURL","download","click","modifyPdf","position_dicts","existingPdfBytes","pdfDoc","load","pages","getPages","width","height","console","log","page_number","fill_objects","object_number","fill_object","page","value","position","drawText","x","y","size","pdfBytes","save","preprocessPdf","file","reader","FileReader","readAsArrayBuffer","onload","result"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,WAAlB,EAA+BC,GAA/B,EAAoCC,aAApC,QAAyD,SAAzD;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA2B;AACzB,MAAIC,IAAI,GAAC,IAAIC,IAAJ,CAAS,CAACF,KAAD,CAAT,EAAkB;AAACG,IAAAA,IAAI,EAAE;AAAP,GAAlB,CAAT;AACA,MAAIC,IAAI,GAACC,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAT;AACAF,EAAAA,IAAI,CAACG,IAAL,GAAUC,MAAM,CAACC,GAAP,CAAWC,eAAX,CAA2BT,IAA3B,CAAV;AACAG,EAAAA,IAAI,CAACO,QAAL,GAAc,YAAd;AACAP,EAAAA,IAAI,CAACQ,KAAL;AACD;;AAED,eAAeC,SAAf,CAAyBb,KAAzB,EAA+Bc,cAA/B,EAA+C;AAE7CA,EAAAA,cAAc,GAAG;AACb,OAAE,CAAC;AAAC,mBAAY,IAAG,EAAf,CAAD;AAAoB,eAAQ;AAA5B,KAAD;AADW,GAAjB;AAIA,QAAMC,gBAAgB,GAAGf,KAAzB;AAEA,QAAMgB,MAAM,GAAG,MAAMpB,WAAW,CAACqB,IAAZ,CAAiBF,gBAAjB,CAArB;AAEA,QAAMG,KAAK,GAAGF,MAAM,CAACG,QAAP,EAAd;AACA,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAoBH,KAAK,CAAC,CAAD,CAA/B;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAgCH,KAAhC,EAAsC,GAAtC,EAA0CC,MAA1C;;AAEA,OAAI,IAAIG,WAAR,IAAuBV,cAAvB,EAAsC;AACpC,QAAIW,YAAY,GAAGX,cAAc,CAACU,WAAD,CAAjC;;AACA,SAAI,IAAIE,aAAR,IAAyBD,YAAzB,EAAsC;AACpC,UAAIE,WAAW,GAAGF,YAAY,CAACC,aAAD,CAA9B;AACA,UAAIE,IAAI,GAAGV,KAAK,CAACM,WAAD,CAAhB;AACA,UAAIK,KAAK,GAAGF,WAAW,CAAC,OAAD,CAAvB;AACA,UAAIG,QAAQ,GAAGH,WAAW,CAAC,UAAD,CAA1B;AACAC,MAAAA,IAAI,CAACG,QAAL,CAAcF,KAAd,EAAoB;AAClBG,QAAAA,CAAC,EAACF,QAAQ,CAAC,CAAD,CADQ;AAElBG,QAAAA,CAAC,EAACH,QAAQ,CAAC,CAAD,CAFQ;AAGlBI,QAAAA,IAAI,EAAC;AAHa,OAApB;AAKD;AAEF;;AAED,QAAMC,QAAQ,GAAG,MAAMnB,MAAM,CAACoB,IAAP,EAAvB;AACArC,EAAAA,WAAW,CAACoC,QAAD,CAAX;AACD;;AAED,OAAO,SAASE,aAAT,CAAuBC,IAAvB,EAA4BxB,cAA5B,EAA2C;AAChD,MAAIyB,MAAM,GAAG,IAAIC,UAAJ,EAAb;AACAD,EAAAA,MAAM,CAACE,iBAAP,CAAyBH,IAAzB;;AAEAC,EAAAA,MAAM,CAACG,MAAP,GAAgB,MAAI;AAClB7B,IAAAA,SAAS,CAAC0B,MAAM,CAACI,MAAR,CAAT;AACD,GAFD;AAGD","sourcesContent":["import { degrees, PDFDocument, rgb, StandardFonts } from 'pdf-lib';\r\n\r\nfunction downloadPdf(bytes){\r\n  var blob=new Blob([bytes], {type: \"application/pdf\"});\r\n  var link=document.createElement('a');\r\n  link.href=window.URL.createObjectURL(blob);\r\n  link.download=\"edited.pdf\";\r\n  link.click();\r\n}\r\n\r\nasync function modifyPdf(bytes,position_dicts) {\r\n\r\n  position_dicts = {\r\n      0:[{\"position\":(10,10),\"value\":\"carabao\"}]\r\n  }\r\n\r\n  const existingPdfBytes = bytes\r\n\r\n  const pdfDoc = await PDFDocument.load(existingPdfBytes)\r\n\r\n  const pages = pdfDoc.getPages()\r\n  const { width, height } = pages[0]\r\n  console.log(\"WIDTH AND HEIGHT:\",width,\",\",height)\r\n\r\n  for(let page_number in position_dicts){\r\n    let fill_objects = position_dicts[page_number]\r\n    for(let object_number in fill_objects){\r\n      let fill_object = fill_objects[object_number]\r\n      let page = pages[page_number]\r\n      let value = fill_object[\"value\"]\r\n      let position = fill_object[\"position\"]\r\n      page.drawText(value,{\r\n        x:position[0],\r\n        y:position[1],\r\n        size:20\r\n      })\r\n    }\r\n  \r\n  }\r\n\r\n  const pdfBytes = await pdfDoc.save()\r\n  downloadPdf(pdfBytes)\r\n}\r\n \r\nexport function preprocessPdf(file,position_dicts){\r\n  let reader = new FileReader()\r\n  reader.readAsArrayBuffer(file)\r\n\r\n  reader.onload = ()=>{\r\n    modifyPdf(reader.result)\r\n  }\r\n} \r\n  "]},"metadata":{},"sourceType":"module"}