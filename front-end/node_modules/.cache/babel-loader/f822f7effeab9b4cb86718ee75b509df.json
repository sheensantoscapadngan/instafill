{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { MethodNotImplementedError } from \"../errors\";\nimport PDFName from \"./PDFName\";\nimport PDFNumber from \"./PDFNumber\";\nimport PDFObject from \"./PDFObject\";\nimport CharCodes from \"../syntax/CharCodes\";\n\nvar PDFStream =\n/** @class */\nfunction (_super) {\n  __extends(PDFStream, _super);\n\n  function PDFStream(dict) {\n    var _this = _super.call(this) || this;\n\n    _this.dict = dict;\n    return _this;\n  }\n\n  PDFStream.prototype.clone = function (_context) {\n    throw new MethodNotImplementedError(this.constructor.name, 'clone');\n  };\n\n  PDFStream.prototype.getContentsString = function () {\n    throw new MethodNotImplementedError(this.constructor.name, 'getContentsString');\n  };\n\n  PDFStream.prototype.getContents = function () {\n    throw new MethodNotImplementedError(this.constructor.name, 'getContents');\n  };\n\n  PDFStream.prototype.getContentsSize = function () {\n    throw new MethodNotImplementedError(this.constructor.name, 'getContentsSize');\n  };\n\n  PDFStream.prototype.updateDict = function () {\n    var contentsSize = this.getContentsSize();\n    this.dict.set(PDFName.Length, PDFNumber.of(contentsSize));\n  };\n\n  PDFStream.prototype.sizeInBytes = function () {\n    this.updateDict();\n    return this.dict.sizeInBytes() + this.getContentsSize() + 18;\n  };\n\n  PDFStream.prototype.toString = function () {\n    this.updateDict();\n    var streamString = this.dict.toString();\n    streamString += '\\nstream\\n';\n    streamString += this.getContentsString();\n    streamString += '\\nendstream';\n    return streamString;\n  };\n\n  PDFStream.prototype.copyBytesInto = function (buffer, offset) {\n    this.updateDict();\n    var initialOffset = offset;\n    offset += this.dict.copyBytesInto(buffer, offset);\n    buffer[offset++] = CharCodes.Newline;\n    buffer[offset++] = CharCodes.s;\n    buffer[offset++] = CharCodes.t;\n    buffer[offset++] = CharCodes.r;\n    buffer[offset++] = CharCodes.e;\n    buffer[offset++] = CharCodes.a;\n    buffer[offset++] = CharCodes.m;\n    buffer[offset++] = CharCodes.Newline;\n    var contents = this.getContents();\n\n    for (var idx = 0, len = contents.length; idx < len; idx++) {\n      buffer[offset++] = contents[idx];\n    }\n\n    buffer[offset++] = CharCodes.Newline;\n    buffer[offset++] = CharCodes.e;\n    buffer[offset++] = CharCodes.n;\n    buffer[offset++] = CharCodes.d;\n    buffer[offset++] = CharCodes.s;\n    buffer[offset++] = CharCodes.t;\n    buffer[offset++] = CharCodes.r;\n    buffer[offset++] = CharCodes.e;\n    buffer[offset++] = CharCodes.a;\n    buffer[offset++] = CharCodes.m;\n    return offset - initialOffset;\n  };\n\n  return PDFStream;\n}(PDFObject);\n\nexport default PDFStream;","map":{"version":3,"sources":["../../../src/core/objects/PDFStream.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { MethodNotImplementedError } from \"../errors\";\nimport PDFName from \"./PDFName\";\nimport PDFNumber from \"./PDFNumber\";\nimport PDFObject from \"./PDFObject\";\nimport CharCodes from \"../syntax/CharCodes\";\nvar PDFStream = /** @class */ (function (_super) {\n    __extends(PDFStream, _super);\n    function PDFStream(dict) {\n        var _this = _super.call(this) || this;\n        _this.dict = dict;\n        return _this;\n    }\n    PDFStream.prototype.clone = function (_context) {\n        throw new MethodNotImplementedError(this.constructor.name, 'clone');\n    };\n    PDFStream.prototype.getContentsString = function () {\n        throw new MethodNotImplementedError(this.constructor.name, 'getContentsString');\n    };\n    PDFStream.prototype.getContents = function () {\n        throw new MethodNotImplementedError(this.constructor.name, 'getContents');\n    };\n    PDFStream.prototype.getContentsSize = function () {\n        throw new MethodNotImplementedError(this.constructor.name, 'getContentsSize');\n    };\n    PDFStream.prototype.updateDict = function () {\n        var contentsSize = this.getContentsSize();\n        this.dict.set(PDFName.Length, PDFNumber.of(contentsSize));\n    };\n    PDFStream.prototype.sizeInBytes = function () {\n        this.updateDict();\n        return this.dict.sizeInBytes() + this.getContentsSize() + 18;\n    };\n    PDFStream.prototype.toString = function () {\n        this.updateDict();\n        var streamString = this.dict.toString();\n        streamString += '\\nstream\\n';\n        streamString += this.getContentsString();\n        streamString += '\\nendstream';\n        return streamString;\n    };\n    PDFStream.prototype.copyBytesInto = function (buffer, offset) {\n        this.updateDict();\n        var initialOffset = offset;\n        offset += this.dict.copyBytesInto(buffer, offset);\n        buffer[offset++] = CharCodes.Newline;\n        buffer[offset++] = CharCodes.s;\n        buffer[offset++] = CharCodes.t;\n        buffer[offset++] = CharCodes.r;\n        buffer[offset++] = CharCodes.e;\n        buffer[offset++] = CharCodes.a;\n        buffer[offset++] = CharCodes.m;\n        buffer[offset++] = CharCodes.Newline;\n        var contents = this.getContents();\n        for (var idx = 0, len = contents.length; idx < len; idx++) {\n            buffer[offset++] = contents[idx];\n        }\n        buffer[offset++] = CharCodes.Newline;\n        buffer[offset++] = CharCodes.e;\n        buffer[offset++] = CharCodes.n;\n        buffer[offset++] = CharCodes.d;\n        buffer[offset++] = CharCodes.s;\n        buffer[offset++] = CharCodes.t;\n        buffer[offset++] = CharCodes.r;\n        buffer[offset++] = CharCodes.e;\n        buffer[offset++] = CharCodes.a;\n        buffer[offset++] = CharCodes.m;\n        return offset - initialOffset;\n    };\n    return PDFStream;\n}(PDFObject));\nexport default PDFStream;\n//# sourceMappingURL=PDFStream.js.map"]},"metadata":{},"sourceType":"module"}