{"ast":null,"code":"import PDFObject from \"../objects/PDFObject\";\nimport CharCodes from \"../syntax/CharCodes\";\nimport { copyStringIntoBuffer } from \"../../utils\";\n\nvar PDFOperator =\n/** @class */\nfunction () {\n  function PDFOperator(name, args) {\n    this.name = name;\n    this.args = args || [];\n  }\n\n  PDFOperator.prototype.clone = function (context) {\n    var args = new Array(this.args.length);\n\n    for (var idx = 0, len = args.length; idx < len; idx++) {\n      var arg = this.args[idx];\n      args[idx] = arg instanceof PDFObject ? arg.clone(context) : arg;\n    }\n\n    return PDFOperator.of(this.name, args);\n  };\n\n  PDFOperator.prototype.toString = function () {\n    var value = '';\n\n    for (var idx = 0, len = this.args.length; idx < len; idx++) {\n      value += String(this.args[idx]) + ' ';\n    }\n\n    value += this.name;\n    return value;\n  };\n\n  PDFOperator.prototype.sizeInBytes = function () {\n    var size = 0;\n\n    for (var idx = 0, len = this.args.length; idx < len; idx++) {\n      var arg = this.args[idx];\n      size += (arg instanceof PDFObject ? arg.sizeInBytes() : arg.length) + 1;\n    }\n\n    size += this.name.length;\n    return size;\n  };\n\n  PDFOperator.prototype.copyBytesInto = function (buffer, offset) {\n    var initialOffset = offset;\n\n    for (var idx = 0, len = this.args.length; idx < len; idx++) {\n      var arg = this.args[idx];\n\n      if (arg instanceof PDFObject) {\n        offset += arg.copyBytesInto(buffer, offset);\n      } else {\n        offset += copyStringIntoBuffer(arg, buffer, offset);\n      }\n\n      buffer[offset++] = CharCodes.Space;\n    }\n\n    offset += copyStringIntoBuffer(this.name, buffer, offset);\n    return offset - initialOffset;\n  };\n\n  PDFOperator.of = function (name, args) {\n    return new PDFOperator(name, args);\n  };\n\n  return PDFOperator;\n}();\n\nexport default PDFOperator;","map":{"version":3,"sources":["../../../src/core/operators/PDFOperator.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import PDFObject from \"../objects/PDFObject\";\nimport CharCodes from \"../syntax/CharCodes\";\nimport { copyStringIntoBuffer } from \"../../utils\";\nvar PDFOperator = /** @class */ (function () {\n    function PDFOperator(name, args) {\n        this.name = name;\n        this.args = args || [];\n    }\n    PDFOperator.prototype.clone = function (context) {\n        var args = new Array(this.args.length);\n        for (var idx = 0, len = args.length; idx < len; idx++) {\n            var arg = this.args[idx];\n            args[idx] = arg instanceof PDFObject ? arg.clone(context) : arg;\n        }\n        return PDFOperator.of(this.name, args);\n    };\n    PDFOperator.prototype.toString = function () {\n        var value = '';\n        for (var idx = 0, len = this.args.length; idx < len; idx++) {\n            value += String(this.args[idx]) + ' ';\n        }\n        value += this.name;\n        return value;\n    };\n    PDFOperator.prototype.sizeInBytes = function () {\n        var size = 0;\n        for (var idx = 0, len = this.args.length; idx < len; idx++) {\n            var arg = this.args[idx];\n            size += (arg instanceof PDFObject ? arg.sizeInBytes() : arg.length) + 1;\n        }\n        size += this.name.length;\n        return size;\n    };\n    PDFOperator.prototype.copyBytesInto = function (buffer, offset) {\n        var initialOffset = offset;\n        for (var idx = 0, len = this.args.length; idx < len; idx++) {\n            var arg = this.args[idx];\n            if (arg instanceof PDFObject) {\n                offset += arg.copyBytesInto(buffer, offset);\n            }\n            else {\n                offset += copyStringIntoBuffer(arg, buffer, offset);\n            }\n            buffer[offset++] = CharCodes.Space;\n        }\n        offset += copyStringIntoBuffer(this.name, buffer, offset);\n        return offset - initialOffset;\n    };\n    PDFOperator.of = function (name, args) {\n        return new PDFOperator(name, args);\n    };\n    return PDFOperator;\n}());\nexport default PDFOperator;\n//# sourceMappingURL=PDFOperator.js.map"]},"metadata":{},"sourceType":"module"}