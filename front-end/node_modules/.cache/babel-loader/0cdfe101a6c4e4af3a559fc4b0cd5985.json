{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFDict from \"../objects/PDFDict\";\nimport PDFName from \"../objects/PDFName\";\nimport { PDFAcroForm } from \"../acroform\";\nimport ViewerPreferences from '../interactive/ViewerPreferences';\n\nvar PDFCatalog =\n/** @class */\nfunction (_super) {\n  __extends(PDFCatalog, _super);\n\n  function PDFCatalog() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  PDFCatalog.prototype.Pages = function () {\n    return this.lookup(PDFName.of('Pages'), PDFDict);\n  };\n\n  PDFCatalog.prototype.AcroForm = function () {\n    return this.lookupMaybe(PDFName.of('AcroForm'), PDFDict);\n  };\n\n  PDFCatalog.prototype.getAcroForm = function () {\n    var dict = this.AcroForm();\n    if (!dict) return undefined;\n    return PDFAcroForm.fromDict(dict);\n  };\n\n  PDFCatalog.prototype.getOrCreateAcroForm = function () {\n    var acroForm = this.getAcroForm();\n\n    if (!acroForm) {\n      acroForm = PDFAcroForm.create(this.context);\n      var acroFormRef = this.context.register(acroForm.dict);\n      this.set(PDFName.of('AcroForm'), acroFormRef);\n    }\n\n    return acroForm;\n  };\n\n  PDFCatalog.prototype.ViewerPreferences = function () {\n    return this.lookupMaybe(PDFName.of('ViewerPreferences'), PDFDict);\n  };\n\n  PDFCatalog.prototype.getViewerPreferences = function () {\n    var dict = this.ViewerPreferences();\n    if (!dict) return undefined;\n    return ViewerPreferences.fromDict(dict);\n  };\n\n  PDFCatalog.prototype.getOrCreateViewerPreferences = function () {\n    var viewerPrefs = this.getViewerPreferences();\n\n    if (!viewerPrefs) {\n      viewerPrefs = ViewerPreferences.create(this.context);\n      var viewerPrefsRef = this.context.register(viewerPrefs.dict);\n      this.set(PDFName.of('ViewerPreferences'), viewerPrefsRef);\n    }\n\n    return viewerPrefs;\n  };\n  /**\r\n   * Inserts the given ref as a leaf node of this catalog's page tree at the\r\n   * specified index (zero-based). Also increments the `Count` of each node in\r\n   * the page tree hierarchy to accomodate the new page.\r\n   *\r\n   * Returns the ref of the PDFPageTree node into which `leafRef` was inserted.\r\n   */\n\n\n  PDFCatalog.prototype.insertLeafNode = function (leafRef, index) {\n    var pagesRef = this.get(PDFName.of('Pages'));\n    var maybeParentRef = this.Pages().insertLeafNode(leafRef, index);\n    return maybeParentRef || pagesRef;\n  };\n\n  PDFCatalog.prototype.removeLeafNode = function (index) {\n    this.Pages().removeLeafNode(index);\n  };\n\n  PDFCatalog.withContextAndPages = function (context, pages) {\n    var dict = new Map();\n    dict.set(PDFName.of('Type'), PDFName.of('Catalog'));\n    dict.set(PDFName.of('Pages'), pages);\n    return new PDFCatalog(dict, context);\n  };\n\n  PDFCatalog.fromMapWithContext = function (map, context) {\n    return new PDFCatalog(map, context);\n  };\n\n  return PDFCatalog;\n}(PDFDict);\n\nexport default PDFCatalog;","map":{"version":3,"sources":["../../../src/core/structures/PDFCatalog.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\r\nimport PDFDict from \"../objects/PDFDict\";\r\nimport PDFName from \"../objects/PDFName\";\r\nimport { PDFAcroForm } from \"../acroform\";\r\nimport ViewerPreferences from '../interactive/ViewerPreferences';\r\nvar PDFCatalog = /** @class */ (function (_super) {\r\n    __extends(PDFCatalog, _super);\r\n    function PDFCatalog() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    PDFCatalog.prototype.Pages = function () {\r\n        return this.lookup(PDFName.of('Pages'), PDFDict);\r\n    };\r\n    PDFCatalog.prototype.AcroForm = function () {\r\n        return this.lookupMaybe(PDFName.of('AcroForm'), PDFDict);\r\n    };\r\n    PDFCatalog.prototype.getAcroForm = function () {\r\n        var dict = this.AcroForm();\r\n        if (!dict)\r\n            return undefined;\r\n        return PDFAcroForm.fromDict(dict);\r\n    };\r\n    PDFCatalog.prototype.getOrCreateAcroForm = function () {\r\n        var acroForm = this.getAcroForm();\r\n        if (!acroForm) {\r\n            acroForm = PDFAcroForm.create(this.context);\r\n            var acroFormRef = this.context.register(acroForm.dict);\r\n            this.set(PDFName.of('AcroForm'), acroFormRef);\r\n        }\r\n        return acroForm;\r\n    };\r\n    PDFCatalog.prototype.ViewerPreferences = function () {\r\n        return this.lookupMaybe(PDFName.of('ViewerPreferences'), PDFDict);\r\n    };\r\n    PDFCatalog.prototype.getViewerPreferences = function () {\r\n        var dict = this.ViewerPreferences();\r\n        if (!dict)\r\n            return undefined;\r\n        return ViewerPreferences.fromDict(dict);\r\n    };\r\n    PDFCatalog.prototype.getOrCreateViewerPreferences = function () {\r\n        var viewerPrefs = this.getViewerPreferences();\r\n        if (!viewerPrefs) {\r\n            viewerPrefs = ViewerPreferences.create(this.context);\r\n            var viewerPrefsRef = this.context.register(viewerPrefs.dict);\r\n            this.set(PDFName.of('ViewerPreferences'), viewerPrefsRef);\r\n        }\r\n        return viewerPrefs;\r\n    };\r\n    /**\r\n     * Inserts the given ref as a leaf node of this catalog's page tree at the\r\n     * specified index (zero-based). Also increments the `Count` of each node in\r\n     * the page tree hierarchy to accomodate the new page.\r\n     *\r\n     * Returns the ref of the PDFPageTree node into which `leafRef` was inserted.\r\n     */\r\n    PDFCatalog.prototype.insertLeafNode = function (leafRef, index) {\r\n        var pagesRef = this.get(PDFName.of('Pages'));\r\n        var maybeParentRef = this.Pages().insertLeafNode(leafRef, index);\r\n        return maybeParentRef || pagesRef;\r\n    };\r\n    PDFCatalog.prototype.removeLeafNode = function (index) {\r\n        this.Pages().removeLeafNode(index);\r\n    };\r\n    PDFCatalog.withContextAndPages = function (context, pages) {\r\n        var dict = new Map();\r\n        dict.set(PDFName.of('Type'), PDFName.of('Catalog'));\r\n        dict.set(PDFName.of('Pages'), pages);\r\n        return new PDFCatalog(dict, context);\r\n    };\r\n    PDFCatalog.fromMapWithContext = function (map, context) {\r\n        return new PDFCatalog(map, context);\r\n    };\r\n    return PDFCatalog;\r\n}(PDFDict));\r\nexport default PDFCatalog;\r\n//# sourceMappingURL=PDFCatalog.js.map"]},"metadata":{},"sourceType":"module"}