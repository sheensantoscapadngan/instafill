{"ast":null,"code":"'use strict';\n\nvar zlib_deflate = require('./zlib/deflate');\n\nvar utils = require('./utils/common');\n\nvar strings = require('./utils/strings');\n\nvar msg = require('./zlib/messages');\n\nvar ZStream = require('./zlib/zstream');\n\nvar toString = Object.prototype.toString;\n/* Public constants ==========================================================*/\n\n/* ===========================================================================*/\n\nvar Z_NO_FLUSH = 0;\nvar Z_FINISH = 4;\nvar Z_OK = 0;\nvar Z_STREAM_END = 1;\nvar Z_SYNC_FLUSH = 2;\nvar Z_DEFAULT_COMPRESSION = -1;\nvar Z_DEFAULT_STRATEGY = 0;\nvar Z_DEFLATED = 8;\n/* ===========================================================================*/\n\n/**\r\n * class Deflate\r\n *\r\n * Generic JS-style wrapper for zlib calls. If you don't need\r\n * streaming behaviour - use more simple functions: [[deflate]],\r\n * [[deflateRaw]] and [[gzip]].\r\n **/\n\n/* internal\r\n * Deflate.chunks -> Array\r\n *\r\n * Chunks of output data, if [[Deflate#onData]] not overridden.\r\n **/\n\n/**\r\n * Deflate.result -> Uint8Array|Array\r\n *\r\n * Compressed result, generated by default [[Deflate#onData]]\r\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\r\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you\r\n * push a chunk with explicit flush (call [[Deflate#push]] with\r\n * `Z_SYNC_FLUSH` param).\r\n **/\n\n/**\r\n * Deflate.err -> Number\r\n *\r\n * Error code after deflate finished. 0 (Z_OK) on success.\r\n * You will not need it in real life, because deflate errors\r\n * are possible only on wrong options or bad `onData` / `onEnd`\r\n * custom handlers.\r\n **/\n\n/**\r\n * Deflate.msg -> String\r\n *\r\n * Error message, if [[Deflate.err]] != 0\r\n **/\n\n/**\r\n * new Deflate(options)\r\n * - options (Object): zlib deflate options.\r\n *\r\n * Creates new deflator instance with specified params. Throws exception\r\n * on bad params. Supported options:\r\n *\r\n * - `level`\r\n * - `windowBits`\r\n * - `memLevel`\r\n * - `strategy`\r\n * - `dictionary`\r\n *\r\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\r\n * for more information on these.\r\n *\r\n * Additional options, for internal needs:\r\n *\r\n * - `chunkSize` - size of generated data chunks (16K by default)\r\n * - `raw` (Boolean) - do raw deflate\r\n * - `gzip` (Boolean) - create gzip wrapper\r\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\r\n *    (each char code [0..255])\r\n * - `header` (Object) - custom header for gzip\r\n *   - `text` (Boolean) - true if compressed data believed to be text\r\n *   - `time` (Number) - modification time, unix timestamp\r\n *   - `os` (Number) - operation system code\r\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\r\n *   - `name` (String) - file name (binary string)\r\n *   - `comment` (String) - comment (binary string)\r\n *   - `hcrc` (Boolean) - true if header crc should be added\r\n *\r\n * ##### Example:\r\n *\r\n * ```javascript\r\n * var pako = require('pako')\r\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\r\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\r\n *\r\n * var deflate = new pako.Deflate({ level: 3});\r\n *\r\n * deflate.push(chunk1, false);\r\n * deflate.push(chunk2, true);  // true -> last chunk\r\n *\r\n * if (deflate.err) { throw new Error(deflate.err); }\r\n *\r\n * console.log(deflate.result);\r\n * ```\r\n **/\n\nfunction Deflate(options) {\n  if (!(this instanceof Deflate)) return new Deflate(options);\n  this.options = utils.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY,\n    to: ''\n  }, options || {});\n  var opt = this.options;\n\n  if (opt.raw && opt.windowBits > 0) {\n    opt.windowBits = -opt.windowBits;\n  } else if (opt.gzip && opt.windowBits > 0 && opt.windowBits < 16) {\n    opt.windowBits += 16;\n  }\n\n  this.err = 0; // error code, if happens (0 = Z_OK)\n\n  this.msg = ''; // error message\n\n  this.ended = false; // used to avoid multiple onEnd() calls\n\n  this.chunks = []; // chunks of compressed data\n\n  this.strm = new ZStream();\n  this.strm.avail_out = 0;\n  var status = zlib_deflate.deflateInit2(this.strm, opt.level, opt.method, opt.windowBits, opt.memLevel, opt.strategy);\n\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  if (opt.header) {\n    zlib_deflate.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    var dict; // Convert data if needed\n\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = zlib_deflate.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK) {\n      throw new Error(msg[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n/**\r\n * Deflate#push(data[, mode]) -> Boolean\r\n * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be\r\n *   converted to utf8 byte sequence.\r\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\r\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\r\n *\r\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\r\n * new compressed chunks. Returns `true` on success. The last data block must have\r\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\r\n * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you\r\n * can use mode Z_SYNC_FLUSH, keeping the compression context.\r\n *\r\n * On fail call [[Deflate#onEnd]] with error code and return false.\r\n *\r\n * We strongly recommend to use `Uint8Array` on input for best speed (output\r\n * array format is detected automatically). Also, don't skip last param and always\r\n * use the same type in your code (boolean or number). That will improve JS speed.\r\n *\r\n * For regular `Array`-s make sure all elements are [0..255].\r\n *\r\n * ##### Example\r\n *\r\n * ```javascript\r\n * push(chunk, false); // push one of data chunks\r\n * ...\r\n * push(chunk, true);  // push last chunk\r\n * ```\r\n **/\n\n\nDeflate.prototype.push = function (data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n\n  var status, _mode;\n\n  if (this.ended) {\n    return false;\n  }\n\n  _mode = mode === ~~mode ? mode : mode === true ? Z_FINISH : Z_NO_FLUSH; // Convert data if needed\n\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = zlib_deflate.deflate(strm, _mode);\n    /* no bad return value */\n\n    if (status !== Z_STREAM_END && status !== Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n\n    if (strm.avail_out === 0 || strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH)) {\n      if (this.options.to === 'string') {\n        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));\n      } else {\n        this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n      }\n    }\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END); // Finalize on the last chunk.\n\n\n  if (_mode === Z_FINISH) {\n    status = zlib_deflate.deflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === Z_OK;\n  } // callback interim results if Z_SYNC_FLUSH.\n\n\n  if (_mode === Z_SYNC_FLUSH) {\n    this.onEnd(Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n/**\r\n * Deflate#onData(chunk) -> Void\r\n * - chunk (Uint8Array|Array|String): output data. Type of array depends\r\n *   on js engine support. When string output requested, each chunk\r\n *   will be string.\r\n *\r\n * By default, stores data blocks in `chunks[]` property and glue\r\n * those in `onEnd`. Override this handler, if you need another behaviour.\r\n **/\n\n\nDeflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n/**\r\n * Deflate#onEnd(status) -> Void\r\n * - status (Number): deflate status. 0 (Z_OK) on success,\r\n *   other if not.\r\n *\r\n * Called once after you tell deflate that the input stream is\r\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\r\n * or if an error happened. By default - join collected chunks,\r\n * free memory and fill `results` / `err` properties.\r\n **/\n\n\nDeflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n/**\r\n * deflate(data[, options]) -> Uint8Array|Array|String\r\n * - data (Uint8Array|Array|String): input data to compress.\r\n * - options (Object): zlib deflate options.\r\n *\r\n * Compress `data` with deflate algorithm and `options`.\r\n *\r\n * Supported options are:\r\n *\r\n * - level\r\n * - windowBits\r\n * - memLevel\r\n * - strategy\r\n * - dictionary\r\n *\r\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\r\n * for more information on these.\r\n *\r\n * Sugar (options):\r\n *\r\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\r\n *   negative windowBits implicitly.\r\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\r\n *    (each char code [0..255])\r\n *\r\n * ##### Example:\r\n *\r\n * ```javascript\r\n * var pako = require('pako')\r\n *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);\r\n *\r\n * console.log(pako.deflate(data));\r\n * ```\r\n **/\n\n\nfunction deflate(input, options) {\n  var deflator = new Deflate(options);\n  deflator.push(input, true); // That will never happens, if you don't cheat with options :)\n\n  if (deflator.err) {\n    throw deflator.msg || msg[deflator.err];\n  }\n\n  return deflator.result;\n}\n/**\r\n * deflateRaw(data[, options]) -> Uint8Array|Array|String\r\n * - data (Uint8Array|Array|String): input data to compress.\r\n * - options (Object): zlib deflate options.\r\n *\r\n * The same as [[deflate]], but creates raw data, without wrapper\r\n * (header and adler32 crc).\r\n **/\n\n\nfunction deflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate(input, options);\n}\n/**\r\n * gzip(data[, options]) -> Uint8Array|Array|String\r\n * - data (Uint8Array|Array|String): input data to compress.\r\n * - options (Object): zlib deflate options.\r\n *\r\n * The same as [[deflate]], but create gzip wrapper instead of\r\n * deflate one.\r\n **/\n\n\nfunction gzip(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate(input, options);\n}\n\nexports.Deflate = Deflate;\nexports.deflate = deflate;\nexports.deflateRaw = deflateRaw;\nexports.gzip = gzip;","map":{"version":3,"sources":["D:/Documents/GitHub/instafill/front-end/node_modules/pako/lib/deflate.js"],"names":["zlib_deflate","require","utils","strings","msg","ZStream","toString","Object","prototype","Z_NO_FLUSH","Z_FINISH","Z_OK","Z_STREAM_END","Z_SYNC_FLUSH","Z_DEFAULT_COMPRESSION","Z_DEFAULT_STRATEGY","Z_DEFLATED","Deflate","options","assign","level","method","chunkSize","windowBits","memLevel","strategy","to","opt","raw","gzip","err","ended","chunks","strm","avail_out","status","deflateInit2","Error","header","deflateSetHeader","dictionary","dict","string2buf","call","Uint8Array","deflateSetDictionary","_dict_set","push","data","mode","_mode","input","next_in","avail_in","length","output","Buf8","next_out","deflate","onEnd","onData","buf2binstring","shrinkBuf","deflateEnd","chunk","result","join","flattenChunks","deflator","deflateRaw","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\n\r\nvar zlib_deflate = require('./zlib/deflate');\r\nvar utils        = require('./utils/common');\r\nvar strings      = require('./utils/strings');\r\nvar msg          = require('./zlib/messages');\r\nvar ZStream      = require('./zlib/zstream');\r\n\r\nvar toString = Object.prototype.toString;\r\n\r\n/* Public constants ==========================================================*/\r\n/* ===========================================================================*/\r\n\r\nvar Z_NO_FLUSH      = 0;\r\nvar Z_FINISH        = 4;\r\n\r\nvar Z_OK            = 0;\r\nvar Z_STREAM_END    = 1;\r\nvar Z_SYNC_FLUSH    = 2;\r\n\r\nvar Z_DEFAULT_COMPRESSION = -1;\r\n\r\nvar Z_DEFAULT_STRATEGY    = 0;\r\n\r\nvar Z_DEFLATED  = 8;\r\n\r\n/* ===========================================================================*/\r\n\r\n\r\n/**\r\n * class Deflate\r\n *\r\n * Generic JS-style wrapper for zlib calls. If you don't need\r\n * streaming behaviour - use more simple functions: [[deflate]],\r\n * [[deflateRaw]] and [[gzip]].\r\n **/\r\n\r\n/* internal\r\n * Deflate.chunks -> Array\r\n *\r\n * Chunks of output data, if [[Deflate#onData]] not overridden.\r\n **/\r\n\r\n/**\r\n * Deflate.result -> Uint8Array|Array\r\n *\r\n * Compressed result, generated by default [[Deflate#onData]]\r\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\r\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you\r\n * push a chunk with explicit flush (call [[Deflate#push]] with\r\n * `Z_SYNC_FLUSH` param).\r\n **/\r\n\r\n/**\r\n * Deflate.err -> Number\r\n *\r\n * Error code after deflate finished. 0 (Z_OK) on success.\r\n * You will not need it in real life, because deflate errors\r\n * are possible only on wrong options or bad `onData` / `onEnd`\r\n * custom handlers.\r\n **/\r\n\r\n/**\r\n * Deflate.msg -> String\r\n *\r\n * Error message, if [[Deflate.err]] != 0\r\n **/\r\n\r\n\r\n/**\r\n * new Deflate(options)\r\n * - options (Object): zlib deflate options.\r\n *\r\n * Creates new deflator instance with specified params. Throws exception\r\n * on bad params. Supported options:\r\n *\r\n * - `level`\r\n * - `windowBits`\r\n * - `memLevel`\r\n * - `strategy`\r\n * - `dictionary`\r\n *\r\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\r\n * for more information on these.\r\n *\r\n * Additional options, for internal needs:\r\n *\r\n * - `chunkSize` - size of generated data chunks (16K by default)\r\n * - `raw` (Boolean) - do raw deflate\r\n * - `gzip` (Boolean) - create gzip wrapper\r\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\r\n *    (each char code [0..255])\r\n * - `header` (Object) - custom header for gzip\r\n *   - `text` (Boolean) - true if compressed data believed to be text\r\n *   - `time` (Number) - modification time, unix timestamp\r\n *   - `os` (Number) - operation system code\r\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\r\n *   - `name` (String) - file name (binary string)\r\n *   - `comment` (String) - comment (binary string)\r\n *   - `hcrc` (Boolean) - true if header crc should be added\r\n *\r\n * ##### Example:\r\n *\r\n * ```javascript\r\n * var pako = require('pako')\r\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\r\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\r\n *\r\n * var deflate = new pako.Deflate({ level: 3});\r\n *\r\n * deflate.push(chunk1, false);\r\n * deflate.push(chunk2, true);  // true -> last chunk\r\n *\r\n * if (deflate.err) { throw new Error(deflate.err); }\r\n *\r\n * console.log(deflate.result);\r\n * ```\r\n **/\r\nfunction Deflate(options) {\r\n  if (!(this instanceof Deflate)) return new Deflate(options);\r\n\r\n  this.options = utils.assign({\r\n    level: Z_DEFAULT_COMPRESSION,\r\n    method: Z_DEFLATED,\r\n    chunkSize: 16384,\r\n    windowBits: 15,\r\n    memLevel: 8,\r\n    strategy: Z_DEFAULT_STRATEGY,\r\n    to: ''\r\n  }, options || {});\r\n\r\n  var opt = this.options;\r\n\r\n  if (opt.raw && (opt.windowBits > 0)) {\r\n    opt.windowBits = -opt.windowBits;\r\n  }\r\n\r\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\r\n    opt.windowBits += 16;\r\n  }\r\n\r\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\r\n  this.msg    = '';     // error message\r\n  this.ended  = false;  // used to avoid multiple onEnd() calls\r\n  this.chunks = [];     // chunks of compressed data\r\n\r\n  this.strm = new ZStream();\r\n  this.strm.avail_out = 0;\r\n\r\n  var status = zlib_deflate.deflateInit2(\r\n    this.strm,\r\n    opt.level,\r\n    opt.method,\r\n    opt.windowBits,\r\n    opt.memLevel,\r\n    opt.strategy\r\n  );\r\n\r\n  if (status !== Z_OK) {\r\n    throw new Error(msg[status]);\r\n  }\r\n\r\n  if (opt.header) {\r\n    zlib_deflate.deflateSetHeader(this.strm, opt.header);\r\n  }\r\n\r\n  if (opt.dictionary) {\r\n    var dict;\r\n    // Convert data if needed\r\n    if (typeof opt.dictionary === 'string') {\r\n      // If we need to compress text, change encoding to utf8.\r\n      dict = strings.string2buf(opt.dictionary);\r\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\r\n      dict = new Uint8Array(opt.dictionary);\r\n    } else {\r\n      dict = opt.dictionary;\r\n    }\r\n\r\n    status = zlib_deflate.deflateSetDictionary(this.strm, dict);\r\n\r\n    if (status !== Z_OK) {\r\n      throw new Error(msg[status]);\r\n    }\r\n\r\n    this._dict_set = true;\r\n  }\r\n}\r\n\r\n/**\r\n * Deflate#push(data[, mode]) -> Boolean\r\n * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be\r\n *   converted to utf8 byte sequence.\r\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\r\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\r\n *\r\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\r\n * new compressed chunks. Returns `true` on success. The last data block must have\r\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\r\n * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you\r\n * can use mode Z_SYNC_FLUSH, keeping the compression context.\r\n *\r\n * On fail call [[Deflate#onEnd]] with error code and return false.\r\n *\r\n * We strongly recommend to use `Uint8Array` on input for best speed (output\r\n * array format is detected automatically). Also, don't skip last param and always\r\n * use the same type in your code (boolean or number). That will improve JS speed.\r\n *\r\n * For regular `Array`-s make sure all elements are [0..255].\r\n *\r\n * ##### Example\r\n *\r\n * ```javascript\r\n * push(chunk, false); // push one of data chunks\r\n * ...\r\n * push(chunk, true);  // push last chunk\r\n * ```\r\n **/\r\nDeflate.prototype.push = function (data, mode) {\r\n  var strm = this.strm;\r\n  var chunkSize = this.options.chunkSize;\r\n  var status, _mode;\r\n\r\n  if (this.ended) { return false; }\r\n\r\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);\r\n\r\n  // Convert data if needed\r\n  if (typeof data === 'string') {\r\n    // If we need to compress text, change encoding to utf8.\r\n    strm.input = strings.string2buf(data);\r\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\r\n    strm.input = new Uint8Array(data);\r\n  } else {\r\n    strm.input = data;\r\n  }\r\n\r\n  strm.next_in = 0;\r\n  strm.avail_in = strm.input.length;\r\n\r\n  do {\r\n    if (strm.avail_out === 0) {\r\n      strm.output = new utils.Buf8(chunkSize);\r\n      strm.next_out = 0;\r\n      strm.avail_out = chunkSize;\r\n    }\r\n    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */\r\n\r\n    if (status !== Z_STREAM_END && status !== Z_OK) {\r\n      this.onEnd(status);\r\n      this.ended = true;\r\n      return false;\r\n    }\r\n    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {\r\n      if (this.options.to === 'string') {\r\n        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));\r\n      } else {\r\n        this.onData(utils.shrinkBuf(strm.output, strm.next_out));\r\n      }\r\n    }\r\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);\r\n\r\n  // Finalize on the last chunk.\r\n  if (_mode === Z_FINISH) {\r\n    status = zlib_deflate.deflateEnd(this.strm);\r\n    this.onEnd(status);\r\n    this.ended = true;\r\n    return status === Z_OK;\r\n  }\r\n\r\n  // callback interim results if Z_SYNC_FLUSH.\r\n  if (_mode === Z_SYNC_FLUSH) {\r\n    this.onEnd(Z_OK);\r\n    strm.avail_out = 0;\r\n    return true;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\n\r\n/**\r\n * Deflate#onData(chunk) -> Void\r\n * - chunk (Uint8Array|Array|String): output data. Type of array depends\r\n *   on js engine support. When string output requested, each chunk\r\n *   will be string.\r\n *\r\n * By default, stores data blocks in `chunks[]` property and glue\r\n * those in `onEnd`. Override this handler, if you need another behaviour.\r\n **/\r\nDeflate.prototype.onData = function (chunk) {\r\n  this.chunks.push(chunk);\r\n};\r\n\r\n\r\n/**\r\n * Deflate#onEnd(status) -> Void\r\n * - status (Number): deflate status. 0 (Z_OK) on success,\r\n *   other if not.\r\n *\r\n * Called once after you tell deflate that the input stream is\r\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\r\n * or if an error happened. By default - join collected chunks,\r\n * free memory and fill `results` / `err` properties.\r\n **/\r\nDeflate.prototype.onEnd = function (status) {\r\n  // On success - join\r\n  if (status === Z_OK) {\r\n    if (this.options.to === 'string') {\r\n      this.result = this.chunks.join('');\r\n    } else {\r\n      this.result = utils.flattenChunks(this.chunks);\r\n    }\r\n  }\r\n  this.chunks = [];\r\n  this.err = status;\r\n  this.msg = this.strm.msg;\r\n};\r\n\r\n\r\n/**\r\n * deflate(data[, options]) -> Uint8Array|Array|String\r\n * - data (Uint8Array|Array|String): input data to compress.\r\n * - options (Object): zlib deflate options.\r\n *\r\n * Compress `data` with deflate algorithm and `options`.\r\n *\r\n * Supported options are:\r\n *\r\n * - level\r\n * - windowBits\r\n * - memLevel\r\n * - strategy\r\n * - dictionary\r\n *\r\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\r\n * for more information on these.\r\n *\r\n * Sugar (options):\r\n *\r\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\r\n *   negative windowBits implicitly.\r\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\r\n *    (each char code [0..255])\r\n *\r\n * ##### Example:\r\n *\r\n * ```javascript\r\n * var pako = require('pako')\r\n *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);\r\n *\r\n * console.log(pako.deflate(data));\r\n * ```\r\n **/\r\nfunction deflate(input, options) {\r\n  var deflator = new Deflate(options);\r\n\r\n  deflator.push(input, true);\r\n\r\n  // That will never happens, if you don't cheat with options :)\r\n  if (deflator.err) { throw deflator.msg || msg[deflator.err]; }\r\n\r\n  return deflator.result;\r\n}\r\n\r\n\r\n/**\r\n * deflateRaw(data[, options]) -> Uint8Array|Array|String\r\n * - data (Uint8Array|Array|String): input data to compress.\r\n * - options (Object): zlib deflate options.\r\n *\r\n * The same as [[deflate]], but creates raw data, without wrapper\r\n * (header and adler32 crc).\r\n **/\r\nfunction deflateRaw(input, options) {\r\n  options = options || {};\r\n  options.raw = true;\r\n  return deflate(input, options);\r\n}\r\n\r\n\r\n/**\r\n * gzip(data[, options]) -> Uint8Array|Array|String\r\n * - data (Uint8Array|Array|String): input data to compress.\r\n * - options (Object): zlib deflate options.\r\n *\r\n * The same as [[deflate]], but create gzip wrapper instead of\r\n * deflate one.\r\n **/\r\nfunction gzip(input, options) {\r\n  options = options || {};\r\n  options.gzip = true;\r\n  return deflate(input, options);\r\n}\r\n\r\n\r\nexports.Deflate = Deflate;\r\nexports.deflate = deflate;\r\nexports.deflateRaw = deflateRaw;\r\nexports.gzip = gzip;\r\n"]},"metadata":{},"sourceType":"script"}