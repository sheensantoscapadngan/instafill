{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFPage from \"../PDFPage\";\nimport { normalizeAppearance, defaultCheckBoxAppearanceProvider } from \"./appearances\";\nimport { rgb } from \"../colors\";\nimport { degrees } from \"../rotations\";\nimport PDFField, { assertFieldAppearanceOptions } from \"./PDFField\";\nimport { PDFName, PDFDict, PDFAcroCheckBox } from \"../../core\";\nimport { assertIs, assertOrUndefined } from \"../../utils\";\n/**\n * Represents a check box field of a [[PDFForm]].\n *\n * [[PDFCheckBox]] fields are interactive boxes that users can click with their\n * mouse. This type of [[PDFField]] has two states: `on` and `off`. The purpose\n * of a check box is to enable users to select from one or more options, where\n * each option is represented by a single check box. Check boxes are typically\n * square in shape and display a check mark when they are in the `on` state.\n */\n\nvar PDFCheckBox =\n/** @class */\nfunction (_super) {\n  __extends(PDFCheckBox, _super);\n\n  function PDFCheckBox(acroCheckBox, ref, doc) {\n    var _this = _super.call(this, acroCheckBox, ref, doc) || this;\n\n    assertIs(acroCheckBox, 'acroCheckBox', [[PDFAcroCheckBox, 'PDFAcroCheckBox']]);\n    _this.acroField = acroCheckBox;\n    return _this;\n  }\n  /**\n   * Mark this check box. This operation is analogous to a human user clicking\n   * a check box to fill it in a PDF reader. This method will update the\n   * underlying state of the check box field to indicate it has been selected.\n   * PDF libraries and readers will be able to extract this value from the\n   * saved document and determine that it was selected.\n   *\n   * For example:\n   * ```js\n   * const checkBox = form.getCheckBox('some.checkBox.field')\n   * checkBox.check()\n   * ```\n   *\n   * This method will mark this check box as dirty, causing its appearance\n   * streams to be updated when either [[PDFDocument.save]] or\n   * [[PDFForm.updateFieldAppearances]] is called. The updated appearance\n   * streams will display a check mark inside the widgets of this check box\n   * field.\n   */\n\n\n  PDFCheckBox.prototype.check = function () {\n    var _a;\n\n    var onValue = (_a = this.acroField.getOnValue()) !== null && _a !== void 0 ? _a : PDFName.of('Yes');\n    this.markAsDirty();\n    this.acroField.setValue(onValue);\n  };\n  /**\n   * Clears this check box. This operation is analogous to a human user clicking\n   * a check box to unmark it in a PDF reader. This method will update the\n   * underlying state of the check box field to indicate it has been deselected.\n   * PDF libraries and readers will be able to extract this value from the\n   * saved document and determine that it was not selected.\n   *\n   * For example:\n   * ```js\n   * const checkBox = form.getCheckBox('some.checkBox.field')\n   * checkBox.uncheck()\n   * ```\n   *\n   * This method will mark this check box as dirty. See [[PDFCheckBox.check]]\n   * for more details about what this means.\n   */\n\n\n  PDFCheckBox.prototype.uncheck = function () {\n    this.markAsDirty();\n    this.acroField.setValue(PDFName.of('Off'));\n  };\n  /**\n   * Returns `true` if this check box is selected (either by a human user via\n   * a PDF reader, or else programmatically via software). For example:\n   * ```js\n   * const checkBox = form.getCheckBox('some.checkBox.field')\n   * if (checkBox.isChecked()) console.log('check box is selected')\n   * ```\n   * @returns Whether or not this check box is selected.\n   */\n\n\n  PDFCheckBox.prototype.isChecked = function () {\n    var onValue = this.acroField.getOnValue();\n    return !!onValue && onValue === this.acroField.getValue();\n  };\n  /**\n   * Show this check box on the specified page. For example:\n   * ```js\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const checkBox = form.createCheckBox('some.checkBox.field')\n   *\n   * checkBox.addToPage(page, {\n   *   x: 50,\n   *   y: 75,\n   *   width: 25,\n   *   height: 25,\n   *   textColor: rgb(1, 0, 0),\n   *   backgroundColor: rgb(0, 1, 0),\n   *   borderColor: rgb(0, 0, 1),\n   *   borderWidth: 2,\n   *   rotate: degrees(90),\n   * })\n   * ```\n   * This will create a new widget for this check box field.\n   * @param page The page to which this check box widget should be added.\n   * @param options The options to be used when adding this check box widget.\n   */\n\n\n  PDFCheckBox.prototype.addToPage = function (page, options) {\n    var _a, _b, _c, _d, _e, _f;\n\n    assertIs(page, 'page', [[PDFPage, 'PDFPage']]);\n    assertFieldAppearanceOptions(options);\n    if (!options) options = {};\n    if (!('textColor' in options)) options.textColor = rgb(0, 0, 0);\n    if (!('backgroundColor' in options)) options.backgroundColor = rgb(1, 1, 1);\n    if (!('borderColor' in options)) options.borderColor = rgb(0, 0, 0);\n    if (!('borderWidth' in options)) options.borderWidth = 1; // Create a widget for this check box\n\n    var widget = this.createWidget({\n      x: (_a = options.x) !== null && _a !== void 0 ? _a : 0,\n      y: (_b = options.y) !== null && _b !== void 0 ? _b : 0,\n      width: (_c = options.width) !== null && _c !== void 0 ? _c : 50,\n      height: (_d = options.height) !== null && _d !== void 0 ? _d : 50,\n      textColor: options.textColor,\n      backgroundColor: options.backgroundColor,\n      borderColor: options.borderColor,\n      borderWidth: (_e = options.borderWidth) !== null && _e !== void 0 ? _e : 0,\n      rotate: (_f = options.rotate) !== null && _f !== void 0 ? _f : degrees(0),\n      hidden: options.hidden\n    });\n    var widgetRef = this.doc.context.register(widget.dict); // Add widget to this field\n\n    this.acroField.addWidget(widgetRef); // Set appearance streams for widget\n\n    widget.setAppearanceState(PDFName.of('Off'));\n    this.updateWidgetAppearance(widget, PDFName.of('Yes')); // Add widget to the given page\n\n    page.node.addAnnot(widgetRef);\n  };\n  /**\n   * Returns `true` if any of this check box's widgets do not have an\n   * appearance stream for its current state. For example:\n   * ```js\n   * const checkBox = form.getCheckBox('some.checkBox.field')\n   * if (checkBox.needsAppearancesUpdate()) console.log('Needs update')\n   * ```\n   * @returns Whether or not this check box needs an appearance update.\n   */\n\n\n  PDFCheckBox.prototype.needsAppearancesUpdate = function () {\n    var _a;\n\n    var widgets = this.acroField.getWidgets();\n\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var state = widget.getAppearanceState();\n      var normal = (_a = widget.getAppearances()) === null || _a === void 0 ? void 0 : _a.normal;\n      if (!(normal instanceof PDFDict)) return true;\n      if (state && !normal.has(state)) return true;\n    }\n\n    return false;\n  };\n  /**\n   * Update the appearance streams for each of this check box's widgets using\n   * the default appearance provider for check boxes. For example:\n   * ```js\n   * const checkBox = form.getCheckBox('some.checkBox.field')\n   * checkBox.defaultUpdateAppearances()\n   * ```\n   */\n\n\n  PDFCheckBox.prototype.defaultUpdateAppearances = function () {\n    this.updateAppearances();\n  };\n  /**\n   * Update the appearance streams for each of this check box's widgets using\n   * the given appearance provider. If no `provider` is passed, the default\n   * appearance provider for check boxs will be used. For example:\n   * ```js\n   * const checkBox = form.getCheckBox('some.checkBox.field')\n   * checkBox.updateAppearances((field, widget) => {\n   *   ...\n   *   return {\n   *     normal: { on: drawCheckBox(...), off: drawCheckBox(...) },\n   *     down: { on: drawCheckBox(...), off: drawCheckBox(...) },\n   *   }\n   * })\n   * ```\n   * @param provider Optionally, the appearance provider to be used for\n   *                 generating the contents of the appearance streams.\n   */\n\n\n  PDFCheckBox.prototype.updateAppearances = function (provider) {\n    var _a;\n\n    assertOrUndefined(provider, 'provider', [Function]);\n    var widgets = this.acroField.getWidgets();\n\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var onValue = (_a = widget.getOnValue()) !== null && _a !== void 0 ? _a : PDFName.of('Yes');\n      if (!onValue) continue;\n      this.updateWidgetAppearance(widget, onValue, provider);\n    }\n\n    this.markAsClean();\n  };\n\n  PDFCheckBox.prototype.updateWidgetAppearance = function (widget, onValue, provider) {\n    var apProvider = provider !== null && provider !== void 0 ? provider : defaultCheckBoxAppearanceProvider;\n    var appearances = normalizeAppearance(apProvider(this, widget));\n    this.updateOnOffWidgetAppearance(widget, onValue, appearances);\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFForm.getCheckBox]] method, which will create an\n   * > instance of [[PDFCheckBox]] for you.\n   *\n   * Create an instance of [[PDFCheckBox]] from an existing acroCheckBox and ref\n   *\n   * @param acroCheckBox The underlying `PDFAcroCheckBox` for this check box.\n   * @param ref The unique reference for this check box.\n   * @param doc The document to which this check box will belong.\n   */\n\n\n  PDFCheckBox.of = function (acroCheckBox, ref, doc) {\n    return new PDFCheckBox(acroCheckBox, ref, doc);\n  };\n\n  return PDFCheckBox;\n}(PDFField);\n\nexport default PDFCheckBox;","map":{"version":3,"sources":["../../../src/api/form/PDFCheckBox.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport PDFPage from \"../PDFPage\";\nimport { normalizeAppearance, defaultCheckBoxAppearanceProvider, } from \"./appearances\";\nimport { rgb } from \"../colors\";\nimport { degrees } from \"../rotations\";\nimport PDFField, { assertFieldAppearanceOptions, } from \"./PDFField\";\nimport { PDFName, PDFDict, PDFAcroCheckBox, } from \"../../core\";\nimport { assertIs, assertOrUndefined } from \"../../utils\";\n/**\n * Represents a check box field of a [[PDFForm]].\n *\n * [[PDFCheckBox]] fields are interactive boxes that users can click with their\n * mouse. This type of [[PDFField]] has two states: `on` and `off`. The purpose\n * of a check box is to enable users to select from one or more options, where\n * each option is represented by a single check box. Check boxes are typically\n * square in shape and display a check mark when they are in the `on` state.\n */\nvar PDFCheckBox = /** @class */ (function (_super) {\n    __extends(PDFCheckBox, _super);\n    function PDFCheckBox(acroCheckBox, ref, doc) {\n        var _this = _super.call(this, acroCheckBox, ref, doc) || this;\n        assertIs(acroCheckBox, 'acroCheckBox', [\n            [PDFAcroCheckBox, 'PDFAcroCheckBox'],\n        ]);\n        _this.acroField = acroCheckBox;\n        return _this;\n    }\n    /**\n     * Mark this check box. This operation is analogous to a human user clicking\n     * a check box to fill it in a PDF reader. This method will update the\n     * underlying state of the check box field to indicate it has been selected.\n     * PDF libraries and readers will be able to extract this value from the\n     * saved document and determine that it was selected.\n     *\n     * For example:\n     * ```js\n     * const checkBox = form.getCheckBox('some.checkBox.field')\n     * checkBox.check()\n     * ```\n     *\n     * This method will mark this check box as dirty, causing its appearance\n     * streams to be updated when either [[PDFDocument.save]] or\n     * [[PDFForm.updateFieldAppearances]] is called. The updated appearance\n     * streams will display a check mark inside the widgets of this check box\n     * field.\n     */\n    PDFCheckBox.prototype.check = function () {\n        var _a;\n        var onValue = (_a = this.acroField.getOnValue()) !== null && _a !== void 0 ? _a : PDFName.of('Yes');\n        this.markAsDirty();\n        this.acroField.setValue(onValue);\n    };\n    /**\n     * Clears this check box. This operation is analogous to a human user clicking\n     * a check box to unmark it in a PDF reader. This method will update the\n     * underlying state of the check box field to indicate it has been deselected.\n     * PDF libraries and readers will be able to extract this value from the\n     * saved document and determine that it was not selected.\n     *\n     * For example:\n     * ```js\n     * const checkBox = form.getCheckBox('some.checkBox.field')\n     * checkBox.uncheck()\n     * ```\n     *\n     * This method will mark this check box as dirty. See [[PDFCheckBox.check]]\n     * for more details about what this means.\n     */\n    PDFCheckBox.prototype.uncheck = function () {\n        this.markAsDirty();\n        this.acroField.setValue(PDFName.of('Off'));\n    };\n    /**\n     * Returns `true` if this check box is selected (either by a human user via\n     * a PDF reader, or else programmatically via software). For example:\n     * ```js\n     * const checkBox = form.getCheckBox('some.checkBox.field')\n     * if (checkBox.isChecked()) console.log('check box is selected')\n     * ```\n     * @returns Whether or not this check box is selected.\n     */\n    PDFCheckBox.prototype.isChecked = function () {\n        var onValue = this.acroField.getOnValue();\n        return !!onValue && onValue === this.acroField.getValue();\n    };\n    /**\n     * Show this check box on the specified page. For example:\n     * ```js\n     * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n     * const page = pdfDoc.addPage()\n     *\n     * const form = pdfDoc.getForm()\n     * const checkBox = form.createCheckBox('some.checkBox.field')\n     *\n     * checkBox.addToPage(page, {\n     *   x: 50,\n     *   y: 75,\n     *   width: 25,\n     *   height: 25,\n     *   textColor: rgb(1, 0, 0),\n     *   backgroundColor: rgb(0, 1, 0),\n     *   borderColor: rgb(0, 0, 1),\n     *   borderWidth: 2,\n     *   rotate: degrees(90),\n     * })\n     * ```\n     * This will create a new widget for this check box field.\n     * @param page The page to which this check box widget should be added.\n     * @param options The options to be used when adding this check box widget.\n     */\n    PDFCheckBox.prototype.addToPage = function (page, options) {\n        var _a, _b, _c, _d, _e, _f;\n        assertIs(page, 'page', [[PDFPage, 'PDFPage']]);\n        assertFieldAppearanceOptions(options);\n        if (!options)\n            options = {};\n        if (!('textColor' in options))\n            options.textColor = rgb(0, 0, 0);\n        if (!('backgroundColor' in options))\n            options.backgroundColor = rgb(1, 1, 1);\n        if (!('borderColor' in options))\n            options.borderColor = rgb(0, 0, 0);\n        if (!('borderWidth' in options))\n            options.borderWidth = 1;\n        // Create a widget for this check box\n        var widget = this.createWidget({\n            x: (_a = options.x) !== null && _a !== void 0 ? _a : 0,\n            y: (_b = options.y) !== null && _b !== void 0 ? _b : 0,\n            width: (_c = options.width) !== null && _c !== void 0 ? _c : 50,\n            height: (_d = options.height) !== null && _d !== void 0 ? _d : 50,\n            textColor: options.textColor,\n            backgroundColor: options.backgroundColor,\n            borderColor: options.borderColor,\n            borderWidth: (_e = options.borderWidth) !== null && _e !== void 0 ? _e : 0,\n            rotate: (_f = options.rotate) !== null && _f !== void 0 ? _f : degrees(0),\n            hidden: options.hidden,\n        });\n        var widgetRef = this.doc.context.register(widget.dict);\n        // Add widget to this field\n        this.acroField.addWidget(widgetRef);\n        // Set appearance streams for widget\n        widget.setAppearanceState(PDFName.of('Off'));\n        this.updateWidgetAppearance(widget, PDFName.of('Yes'));\n        // Add widget to the given page\n        page.node.addAnnot(widgetRef);\n    };\n    /**\n     * Returns `true` if any of this check box's widgets do not have an\n     * appearance stream for its current state. For example:\n     * ```js\n     * const checkBox = form.getCheckBox('some.checkBox.field')\n     * if (checkBox.needsAppearancesUpdate()) console.log('Needs update')\n     * ```\n     * @returns Whether or not this check box needs an appearance update.\n     */\n    PDFCheckBox.prototype.needsAppearancesUpdate = function () {\n        var _a;\n        var widgets = this.acroField.getWidgets();\n        for (var idx = 0, len = widgets.length; idx < len; idx++) {\n            var widget = widgets[idx];\n            var state = widget.getAppearanceState();\n            var normal = (_a = widget.getAppearances()) === null || _a === void 0 ? void 0 : _a.normal;\n            if (!(normal instanceof PDFDict))\n                return true;\n            if (state && !normal.has(state))\n                return true;\n        }\n        return false;\n    };\n    /**\n     * Update the appearance streams for each of this check box's widgets using\n     * the default appearance provider for check boxes. For example:\n     * ```js\n     * const checkBox = form.getCheckBox('some.checkBox.field')\n     * checkBox.defaultUpdateAppearances()\n     * ```\n     */\n    PDFCheckBox.prototype.defaultUpdateAppearances = function () {\n        this.updateAppearances();\n    };\n    /**\n     * Update the appearance streams for each of this check box's widgets using\n     * the given appearance provider. If no `provider` is passed, the default\n     * appearance provider for check boxs will be used. For example:\n     * ```js\n     * const checkBox = form.getCheckBox('some.checkBox.field')\n     * checkBox.updateAppearances((field, widget) => {\n     *   ...\n     *   return {\n     *     normal: { on: drawCheckBox(...), off: drawCheckBox(...) },\n     *     down: { on: drawCheckBox(...), off: drawCheckBox(...) },\n     *   }\n     * })\n     * ```\n     * @param provider Optionally, the appearance provider to be used for\n     *                 generating the contents of the appearance streams.\n     */\n    PDFCheckBox.prototype.updateAppearances = function (provider) {\n        var _a;\n        assertOrUndefined(provider, 'provider', [Function]);\n        var widgets = this.acroField.getWidgets();\n        for (var idx = 0, len = widgets.length; idx < len; idx++) {\n            var widget = widgets[idx];\n            var onValue = (_a = widget.getOnValue()) !== null && _a !== void 0 ? _a : PDFName.of('Yes');\n            if (!onValue)\n                continue;\n            this.updateWidgetAppearance(widget, onValue, provider);\n        }\n        this.markAsClean();\n    };\n    PDFCheckBox.prototype.updateWidgetAppearance = function (widget, onValue, provider) {\n        var apProvider = provider !== null && provider !== void 0 ? provider : defaultCheckBoxAppearanceProvider;\n        var appearances = normalizeAppearance(apProvider(this, widget));\n        this.updateOnOffWidgetAppearance(widget, onValue, appearances);\n    };\n    /**\n     * > **NOTE:** You probably don't want to call this method directly. Instead,\n     * > consider using the [[PDFForm.getCheckBox]] method, which will create an\n     * > instance of [[PDFCheckBox]] for you.\n     *\n     * Create an instance of [[PDFCheckBox]] from an existing acroCheckBox and ref\n     *\n     * @param acroCheckBox The underlying `PDFAcroCheckBox` for this check box.\n     * @param ref The unique reference for this check box.\n     * @param doc The document to which this check box will belong.\n     */\n    PDFCheckBox.of = function (acroCheckBox, ref, doc) {\n        return new PDFCheckBox(acroCheckBox, ref, doc);\n    };\n    return PDFCheckBox;\n}(PDFField));\nexport default PDFCheckBox;\n//# sourceMappingURL=PDFCheckBox.js.map"]},"metadata":{},"sourceType":"module"}