{"ast":null,"code":"import PDFDict from \"../objects/PDFDict\";\nimport PDFArray from \"../objects/PDFArray\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFAcroNonTerminal from \"./PDFAcroNonTerminal\";\nimport { createPDFAcroField, createPDFAcroFields } from \"./utils\";\n\nvar PDFAcroForm =\n/** @class */\nfunction () {\n  function PDFAcroForm(dict) {\n    this.dict = dict;\n  }\n\n  PDFAcroForm.prototype.Fields = function () {\n    var fields = this.dict.lookup(PDFName.of('Fields'));\n    if (fields instanceof PDFArray) return fields;\n    return undefined;\n  };\n\n  PDFAcroForm.prototype.getFields = function () {\n    var Fields = this.normalizedEntries().Fields;\n    var fields = new Array(Fields.size());\n\n    for (var idx = 0, len = Fields.size(); idx < len; idx++) {\n      var ref = Fields.get(idx);\n      var dict = Fields.lookup(idx, PDFDict);\n      fields[idx] = [createPDFAcroField(dict, ref), ref];\n    }\n\n    return fields;\n  };\n\n  PDFAcroForm.prototype.getAllFields = function () {\n    var allFields = [];\n\n    var pushFields = function (fields) {\n      if (!fields) return;\n\n      for (var idx = 0, len = fields.length; idx < len; idx++) {\n        var field = fields[idx];\n        allFields.push(field);\n        var fieldModel = field[0];\n\n        if (fieldModel instanceof PDFAcroNonTerminal) {\n          pushFields(createPDFAcroFields(fieldModel.Kids()));\n        }\n      }\n    };\n\n    pushFields(this.getFields());\n    return allFields;\n  };\n\n  PDFAcroForm.prototype.addField = function (field) {\n    var Fields = this.normalizedEntries().Fields;\n    Fields === null || Fields === void 0 ? void 0 : Fields.push(field);\n  };\n\n  PDFAcroForm.prototype.removeField = function (field) {\n    var parent = field.getParent();\n    var fields = parent === undefined ? this.normalizedEntries().Fields : parent.Kids();\n    var index = fields === null || fields === void 0 ? void 0 : fields.indexOf(field.ref);\n\n    if (fields === undefined || index === undefined) {\n      throw new Error(\"Tried to remove inexistent field \" + field.getFullyQualifiedName());\n    }\n\n    fields.remove(index);\n\n    if (parent !== undefined && fields.size() === 0) {\n      this.removeField(parent);\n    }\n  };\n\n  PDFAcroForm.prototype.normalizedEntries = function () {\n    var Fields = this.Fields();\n\n    if (!Fields) {\n      Fields = this.dict.context.obj([]);\n      this.dict.set(PDFName.of('Fields'), Fields);\n    }\n\n    return {\n      Fields: Fields\n    };\n  };\n\n  PDFAcroForm.fromDict = function (dict) {\n    return new PDFAcroForm(dict);\n  };\n\n  PDFAcroForm.create = function (context) {\n    var dict = context.obj({\n      Fields: []\n    });\n    return new PDFAcroForm(dict);\n  };\n\n  return PDFAcroForm;\n}();\n\nexport default PDFAcroForm;","map":{"version":3,"sources":["../../../src/core/acroform/PDFAcroForm.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import PDFDict from \"../objects/PDFDict\";\nimport PDFArray from \"../objects/PDFArray\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFAcroNonTerminal from \"./PDFAcroNonTerminal\";\nimport { createPDFAcroField, createPDFAcroFields, } from \"./utils\";\nvar PDFAcroForm = /** @class */ (function () {\n    function PDFAcroForm(dict) {\n        this.dict = dict;\n    }\n    PDFAcroForm.prototype.Fields = function () {\n        var fields = this.dict.lookup(PDFName.of('Fields'));\n        if (fields instanceof PDFArray)\n            return fields;\n        return undefined;\n    };\n    PDFAcroForm.prototype.getFields = function () {\n        var Fields = this.normalizedEntries().Fields;\n        var fields = new Array(Fields.size());\n        for (var idx = 0, len = Fields.size(); idx < len; idx++) {\n            var ref = Fields.get(idx);\n            var dict = Fields.lookup(idx, PDFDict);\n            fields[idx] = [createPDFAcroField(dict, ref), ref];\n        }\n        return fields;\n    };\n    PDFAcroForm.prototype.getAllFields = function () {\n        var allFields = [];\n        var pushFields = function (fields) {\n            if (!fields)\n                return;\n            for (var idx = 0, len = fields.length; idx < len; idx++) {\n                var field = fields[idx];\n                allFields.push(field);\n                var fieldModel = field[0];\n                if (fieldModel instanceof PDFAcroNonTerminal) {\n                    pushFields(createPDFAcroFields(fieldModel.Kids()));\n                }\n            }\n        };\n        pushFields(this.getFields());\n        return allFields;\n    };\n    PDFAcroForm.prototype.addField = function (field) {\n        var Fields = this.normalizedEntries().Fields;\n        Fields === null || Fields === void 0 ? void 0 : Fields.push(field);\n    };\n    PDFAcroForm.prototype.removeField = function (field) {\n        var parent = field.getParent();\n        var fields = parent === undefined ? this.normalizedEntries().Fields : parent.Kids();\n        var index = fields === null || fields === void 0 ? void 0 : fields.indexOf(field.ref);\n        if (fields === undefined || index === undefined) {\n            throw new Error(\"Tried to remove inexistent field \" + field.getFullyQualifiedName());\n        }\n        fields.remove(index);\n        if (parent !== undefined && fields.size() === 0) {\n            this.removeField(parent);\n        }\n    };\n    PDFAcroForm.prototype.normalizedEntries = function () {\n        var Fields = this.Fields();\n        if (!Fields) {\n            Fields = this.dict.context.obj([]);\n            this.dict.set(PDFName.of('Fields'), Fields);\n        }\n        return { Fields: Fields };\n    };\n    PDFAcroForm.fromDict = function (dict) { return new PDFAcroForm(dict); };\n    PDFAcroForm.create = function (context) {\n        var dict = context.obj({ Fields: [] });\n        return new PDFAcroForm(dict);\n    };\n    return PDFAcroForm;\n}());\nexport default PDFAcroForm;\n//# sourceMappingURL=PDFAcroForm.js.map"]},"metadata":{},"sourceType":"module"}