{"ast":null,"code":"import { useVisualElementContext } from '../context/MotionContext/index.js';\nimport { invariant, warning } from 'hey-listen';\nimport { useMotionValue } from './use-motion-value.js';\nimport { useTransform } from './use-transform.js'; // Keep things reasonable and avoid scale: Infinity. In practise we might need\n// to add another value, opacity, that could interpolate scaleX/Y [0,0.01] => [0,1]\n// to simply hide content at unreasonable scales.\n\nvar maxScale = 100000;\n\nvar invertScale = function (scale) {\n  return scale > 0.001 ? 1 / scale : maxScale;\n};\n\nvar hasWarned = false;\n/**\r\n * Returns a `MotionValue` each for `scaleX` and `scaleY` that update with the inverse\r\n * of their respective parent scales.\r\n *\r\n * This is useful for undoing the distortion of content when scaling a parent component.\r\n *\r\n * By default, `useInvertedScale` will automatically fetch `scaleX` and `scaleY` from the nearest parent.\r\n * By passing other `MotionValue`s in as `useInvertedScale({ scaleX, scaleY })`, it will invert the output\r\n * of those instead.\r\n *\r\n * @motion\r\n *\r\n * ```jsx\r\n * const MyComponent = () => {\r\n *   const { scaleX, scaleY } = useInvertedScale()\r\n *   return <motion.div style={{ scaleX, scaleY }} />\r\n * }\r\n * ```\r\n *\r\n * @library\r\n *\r\n * ```jsx\r\n * function MyComponent() {\r\n *   const { scaleX, scaleY } = useInvertedScale()\r\n *   return <Frame scaleX={scaleX} scaleY={scaleY} />\r\n * }\r\n * ```\r\n *\r\n * @deprecated\r\n */\n\nfunction useInvertedScale(scale) {\n  var parentScaleX = useMotionValue(1);\n  var parentScaleY = useMotionValue(1);\n  var visualElement = useVisualElementContext();\n  invariant(!!(scale || visualElement), \"If no scale values are provided, useInvertedScale must be used within a child of another motion component.\");\n  warning(hasWarned, \"useInvertedScale is deprecated and will be removed in 3.0. Use the layout prop instead.\");\n  hasWarned = true;\n\n  if (scale) {\n    parentScaleX = scale.scaleX || parentScaleX;\n    parentScaleY = scale.scaleY || parentScaleY;\n  } else if (visualElement) {\n    parentScaleX = visualElement.getValue(\"scaleX\", 1);\n    parentScaleY = visualElement.getValue(\"scaleY\", 1);\n  }\n\n  var scaleX = useTransform(parentScaleX, invertScale);\n  var scaleY = useTransform(parentScaleY, invertScale);\n  return {\n    scaleX: scaleX,\n    scaleY: scaleY\n  };\n}\n\nexport { invertScale, useInvertedScale };","map":{"version":3,"sources":["C:/Users/User/Documents/GitHub/instafill/front-end/node_modules/framer-motion/dist/es/value/use-inverted-scale.js"],"names":["useVisualElementContext","invariant","warning","useMotionValue","useTransform","maxScale","invertScale","scale","hasWarned","useInvertedScale","parentScaleX","parentScaleY","visualElement","scaleX","scaleY","getValue"],"mappings":"AAAA,SAASA,uBAAT,QAAwC,mCAAxC;AACA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,YAAnC;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,YAAT,QAA6B,oBAA7B,C,CAEA;AACA;AACA;;AACA,IAAIC,QAAQ,GAAG,MAAf;;AACA,IAAIC,WAAW,GAAG,UAAUC,KAAV,EAAiB;AAC/B,SAAOA,KAAK,GAAG,KAAR,GAAgB,IAAIA,KAApB,GAA4BF,QAAnC;AACH,CAFD;;AAGA,IAAIG,SAAS,GAAG,KAAhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,gBAAT,CAA0BF,KAA1B,EAAiC;AAC7B,MAAIG,YAAY,GAAGP,cAAc,CAAC,CAAD,CAAjC;AACA,MAAIQ,YAAY,GAAGR,cAAc,CAAC,CAAD,CAAjC;AACA,MAAIS,aAAa,GAAGZ,uBAAuB,EAA3C;AACAC,EAAAA,SAAS,CAAC,CAAC,EAAEM,KAAK,IAAIK,aAAX,CAAF,EAA6B,4GAA7B,CAAT;AACAV,EAAAA,OAAO,CAACM,SAAD,EAAY,yFAAZ,CAAP;AACAA,EAAAA,SAAS,GAAG,IAAZ;;AACA,MAAID,KAAJ,EAAW;AACPG,IAAAA,YAAY,GAAGH,KAAK,CAACM,MAAN,IAAgBH,YAA/B;AACAC,IAAAA,YAAY,GAAGJ,KAAK,CAACO,MAAN,IAAgBH,YAA/B;AACH,GAHD,MAIK,IAAIC,aAAJ,EAAmB;AACpBF,IAAAA,YAAY,GAAGE,aAAa,CAACG,QAAd,CAAuB,QAAvB,EAAiC,CAAjC,CAAf;AACAJ,IAAAA,YAAY,GAAGC,aAAa,CAACG,QAAd,CAAuB,QAAvB,EAAiC,CAAjC,CAAf;AACH;;AACD,MAAIF,MAAM,GAAGT,YAAY,CAACM,YAAD,EAAeJ,WAAf,CAAzB;AACA,MAAIQ,MAAM,GAAGV,YAAY,CAACO,YAAD,EAAeL,WAAf,CAAzB;AACA,SAAO;AAAEO,IAAAA,MAAM,EAAEA,MAAV;AAAkBC,IAAAA,MAAM,EAAEA;AAA1B,GAAP;AACH;;AAED,SAASR,WAAT,EAAsBG,gBAAtB","sourcesContent":["import { useVisualElementContext } from '../context/MotionContext/index.js';\r\nimport { invariant, warning } from 'hey-listen';\r\nimport { useMotionValue } from './use-motion-value.js';\r\nimport { useTransform } from './use-transform.js';\r\n\r\n// Keep things reasonable and avoid scale: Infinity. In practise we might need\r\n// to add another value, opacity, that could interpolate scaleX/Y [0,0.01] => [0,1]\r\n// to simply hide content at unreasonable scales.\r\nvar maxScale = 100000;\r\nvar invertScale = function (scale) {\r\n    return scale > 0.001 ? 1 / scale : maxScale;\r\n};\r\nvar hasWarned = false;\r\n/**\r\n * Returns a `MotionValue` each for `scaleX` and `scaleY` that update with the inverse\r\n * of their respective parent scales.\r\n *\r\n * This is useful for undoing the distortion of content when scaling a parent component.\r\n *\r\n * By default, `useInvertedScale` will automatically fetch `scaleX` and `scaleY` from the nearest parent.\r\n * By passing other `MotionValue`s in as `useInvertedScale({ scaleX, scaleY })`, it will invert the output\r\n * of those instead.\r\n *\r\n * @motion\r\n *\r\n * ```jsx\r\n * const MyComponent = () => {\r\n *   const { scaleX, scaleY } = useInvertedScale()\r\n *   return <motion.div style={{ scaleX, scaleY }} />\r\n * }\r\n * ```\r\n *\r\n * @library\r\n *\r\n * ```jsx\r\n * function MyComponent() {\r\n *   const { scaleX, scaleY } = useInvertedScale()\r\n *   return <Frame scaleX={scaleX} scaleY={scaleY} />\r\n * }\r\n * ```\r\n *\r\n * @deprecated\r\n */\r\nfunction useInvertedScale(scale) {\r\n    var parentScaleX = useMotionValue(1);\r\n    var parentScaleY = useMotionValue(1);\r\n    var visualElement = useVisualElementContext();\r\n    invariant(!!(scale || visualElement), \"If no scale values are provided, useInvertedScale must be used within a child of another motion component.\");\r\n    warning(hasWarned, \"useInvertedScale is deprecated and will be removed in 3.0. Use the layout prop instead.\");\r\n    hasWarned = true;\r\n    if (scale) {\r\n        parentScaleX = scale.scaleX || parentScaleX;\r\n        parentScaleY = scale.scaleY || parentScaleY;\r\n    }\r\n    else if (visualElement) {\r\n        parentScaleX = visualElement.getValue(\"scaleX\", 1);\r\n        parentScaleY = visualElement.getValue(\"scaleY\", 1);\r\n    }\r\n    var scaleX = useTransform(parentScaleX, invertScale);\r\n    var scaleY = useTransform(parentScaleY, invertScale);\r\n    return { scaleX: scaleX, scaleY: scaleY };\r\n}\r\n\r\nexport { invertScale, useInvertedScale };\r\n"]},"metadata":{},"sourceType":"module"}