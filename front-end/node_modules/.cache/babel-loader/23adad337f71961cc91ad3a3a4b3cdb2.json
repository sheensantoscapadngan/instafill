{"ast":null,"code":"import CharCodes from \"./CharCodes\";\nimport { IsDelimiter } from \"./Delimiters\";\nimport { IsWhitespace } from \"./Whitespace\";\nexport var IsIrregular = new Uint8Array(256);\n\nfor (var idx = 0, len = 256; idx < len; idx++) {\n  IsIrregular[idx] = IsWhitespace[idx] || IsDelimiter[idx] ? 1 : 0;\n}\n\nIsIrregular[CharCodes.Hash] = 1;","map":{"version":3,"sources":["../../../src/core/syntax/Irregular.ts"],"names":[],"mappings":"AAAA,OAAO,SAAP,MAAgB,aAAhB;AACA,SAAS,WAAT,QAAsB,cAAtB;AACA,SAAS,YAAT,QAAuB,cAAvB;AAEA,OAAO,IAAM,WAAW,GAAG,IAAI,UAAJ,CAAe,GAAf,CAApB;;AAEP,KAAK,IAAI,GAAG,GAAG,CAAV,EAAa,GAAG,GAAG,GAAxB,EAA6B,GAAG,GAAG,GAAnC,EAAwC,GAAG,EAA3C,EAA+C;AAC7C,EAAA,WAAW,CAAC,GAAD,CAAX,GAAmB,YAAY,CAAC,GAAD,CAAZ,IAAqB,WAAW,CAAC,GAAD,CAAhC,GAAwC,CAAxC,GAA4C,CAA/D;AACD;;AACD,WAAW,CAAC,SAAS,CAAC,IAAX,CAAX,GAA8B,CAA9B","sourceRoot":"","sourcesContent":["import CharCodes from \"./CharCodes\";\nimport { IsDelimiter } from \"./Delimiters\";\nimport { IsWhitespace } from \"./Whitespace\";\nexport var IsIrregular = new Uint8Array(256);\nfor (var idx = 0, len = 256; idx < len; idx++) {\n    IsIrregular[idx] = IsWhitespace[idx] || IsDelimiter[idx] ? 1 : 0;\n}\nIsIrregular[CharCodes.Hash] = 1;\n//# sourceMappingURL=Irregular.js.map"]},"metadata":{},"sourceType":"module"}