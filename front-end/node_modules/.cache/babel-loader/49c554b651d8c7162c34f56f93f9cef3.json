{"ast":null,"code":"import { toCharCode } from \"./strings\"; // Mapping from PDFDocEncoding to Unicode code point\n\nvar pdfDocEncodingToUnicode = new Uint16Array(256); // Initialize the code points which are the same\n\nfor (var idx = 0; idx < 256; idx++) {\n  pdfDocEncodingToUnicode[idx] = idx;\n} // Set differences (see \"Table D.2 – PDFDocEncoding Character Set\" of the PDF spec)\n\n\npdfDocEncodingToUnicode[0x16] = toCharCode('\\u0017'); // SYNCRONOUS IDLE\n\npdfDocEncodingToUnicode[0x18] = toCharCode('\\u02D8'); // BREVE\n\npdfDocEncodingToUnicode[0x19] = toCharCode('\\u02C7'); // CARON\n\npdfDocEncodingToUnicode[0x1a] = toCharCode('\\u02C6'); // MODIFIER LETTER CIRCUMFLEX ACCENT\n\npdfDocEncodingToUnicode[0x1b] = toCharCode('\\u02D9'); // DOT ABOVE\n\npdfDocEncodingToUnicode[0x1c] = toCharCode('\\u02DD'); // DOUBLE ACUTE ACCENT\n\npdfDocEncodingToUnicode[0x1d] = toCharCode('\\u02DB'); // OGONEK\n\npdfDocEncodingToUnicode[0x1e] = toCharCode('\\u02DA'); // RING ABOVE\n\npdfDocEncodingToUnicode[0x1f] = toCharCode('\\u02DC'); // SMALL TILDE\n\npdfDocEncodingToUnicode[0x7f] = toCharCode('\\uFFFD'); // REPLACEMENT CHARACTER (box with questionmark)\n\npdfDocEncodingToUnicode[0x80] = toCharCode('\\u2022'); // BULLET\n\npdfDocEncodingToUnicode[0x81] = toCharCode('\\u2020'); // DAGGER\n\npdfDocEncodingToUnicode[0x82] = toCharCode('\\u2021'); // DOUBLE DAGGER\n\npdfDocEncodingToUnicode[0x83] = toCharCode('\\u2026'); // HORIZONTAL ELLIPSIS\n\npdfDocEncodingToUnicode[0x84] = toCharCode('\\u2014'); // EM DASH\n\npdfDocEncodingToUnicode[0x85] = toCharCode('\\u2013'); // EN DASH\n\npdfDocEncodingToUnicode[0x86] = toCharCode('\\u0192'); // LATIN SMALL LETTER SCRIPT F\n\npdfDocEncodingToUnicode[0x87] = toCharCode('\\u2044'); // FRACTION SLASH (solidus)\n\npdfDocEncodingToUnicode[0x88] = toCharCode('\\u2039'); // SINGLE LEFT-POINTING ANGLE QUOTATION MARK\n\npdfDocEncodingToUnicode[0x89] = toCharCode('\\u203A'); // SINGLE RIGHT-POINTING ANGLE QUOTATION MARK\n\npdfDocEncodingToUnicode[0x8a] = toCharCode('\\u2212'); // MINUS SIGN\n\npdfDocEncodingToUnicode[0x8b] = toCharCode('\\u2030'); // PER MILLE SIGN\n\npdfDocEncodingToUnicode[0x8c] = toCharCode('\\u201E'); // DOUBLE LOW-9 QUOTATION MARK (quotedblbase)\n\npdfDocEncodingToUnicode[0x8d] = toCharCode('\\u201C'); // LEFT DOUBLE QUOTATION MARK (quotedblleft)\n\npdfDocEncodingToUnicode[0x8e] = toCharCode('\\u201D'); // RIGHT DOUBLE QUOTATION MARK (quotedblright)\n\npdfDocEncodingToUnicode[0x8f] = toCharCode('\\u2018'); // LEFT SINGLE QUOTATION MARK (quoteleft)\n\npdfDocEncodingToUnicode[0x90] = toCharCode('\\u2019'); // RIGHT SINGLE QUOTATION MARK (quoteright)\n\npdfDocEncodingToUnicode[0x91] = toCharCode('\\u201A'); // SINGLE LOW-9 QUOTATION MARK (quotesinglbase)\n\npdfDocEncodingToUnicode[0x92] = toCharCode('\\u2122'); // TRADE MARK SIGN\n\npdfDocEncodingToUnicode[0x93] = toCharCode('\\uFB01'); // LATIN SMALL LIGATURE FI\n\npdfDocEncodingToUnicode[0x94] = toCharCode('\\uFB02'); // LATIN SMALL LIGATURE FL\n\npdfDocEncodingToUnicode[0x95] = toCharCode('\\u0141'); // LATIN CAPITAL LETTER L WITH STROKE\n\npdfDocEncodingToUnicode[0x96] = toCharCode('\\u0152'); // LATIN CAPITAL LIGATURE OE\n\npdfDocEncodingToUnicode[0x97] = toCharCode('\\u0160'); // LATIN CAPITAL LETTER S WITH CARON\n\npdfDocEncodingToUnicode[0x98] = toCharCode('\\u0178'); // LATIN CAPITAL LETTER Y WITH DIAERESIS\n\npdfDocEncodingToUnicode[0x99] = toCharCode('\\u017D'); // LATIN CAPITAL LETTER Z WITH CARON\n\npdfDocEncodingToUnicode[0x9a] = toCharCode('\\u0131'); // LATIN SMALL LETTER DOTLESS I\n\npdfDocEncodingToUnicode[0x9b] = toCharCode('\\u0142'); // LATIN SMALL LETTER L WITH STROKE\n\npdfDocEncodingToUnicode[0x9c] = toCharCode('\\u0153'); // LATIN SMALL LIGATURE OE\n\npdfDocEncodingToUnicode[0x9d] = toCharCode('\\u0161'); // LATIN SMALL LETTER S WITH CARON\n\npdfDocEncodingToUnicode[0x9e] = toCharCode('\\u017E'); // LATIN SMALL LETTER Z WITH CARON\n\npdfDocEncodingToUnicode[0x9f] = toCharCode('\\uFFFD'); // REPLACEMENT CHARACTER (box with questionmark)\n\npdfDocEncodingToUnicode[0xa0] = toCharCode('\\u20AC'); // EURO SIGN\n\npdfDocEncodingToUnicode[0xad] = toCharCode('\\uFFFD'); // REPLACEMENT CHARACTER (box with questionmark)\n\n/**\r\n * Decode a byte array into a string using PDFDocEncoding.\r\n *\r\n * @param bytes a byte array (decimal representation) containing a string\r\n *              encoded with PDFDocEncoding.\r\n */\n\nexport var pdfDocEncodingDecode = function (bytes) {\n  var codePoints = new Array(bytes.length);\n\n  for (var idx = 0, len = bytes.length; idx < len; idx++) {\n    codePoints[idx] = pdfDocEncodingToUnicode[bytes[idx]];\n  }\n\n  return String.fromCodePoint.apply(String, codePoints);\n};","map":{"version":3,"sources":["../../src/utils/pdfDocEncoding.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { toCharCode } from \"./strings\";\r\n// Mapping from PDFDocEncoding to Unicode code point\r\nvar pdfDocEncodingToUnicode = new Uint16Array(256);\r\n// Initialize the code points which are the same\r\nfor (var idx = 0; idx < 256; idx++) {\r\n    pdfDocEncodingToUnicode[idx] = idx;\r\n}\r\n// Set differences (see \"Table D.2 – PDFDocEncoding Character Set\" of the PDF spec)\r\npdfDocEncodingToUnicode[0x16] = toCharCode('\\u0017'); // SYNCRONOUS IDLE\r\npdfDocEncodingToUnicode[0x18] = toCharCode('\\u02D8'); // BREVE\r\npdfDocEncodingToUnicode[0x19] = toCharCode('\\u02C7'); // CARON\r\npdfDocEncodingToUnicode[0x1a] = toCharCode('\\u02C6'); // MODIFIER LETTER CIRCUMFLEX ACCENT\r\npdfDocEncodingToUnicode[0x1b] = toCharCode('\\u02D9'); // DOT ABOVE\r\npdfDocEncodingToUnicode[0x1c] = toCharCode('\\u02DD'); // DOUBLE ACUTE ACCENT\r\npdfDocEncodingToUnicode[0x1d] = toCharCode('\\u02DB'); // OGONEK\r\npdfDocEncodingToUnicode[0x1e] = toCharCode('\\u02DA'); // RING ABOVE\r\npdfDocEncodingToUnicode[0x1f] = toCharCode('\\u02DC'); // SMALL TILDE\r\npdfDocEncodingToUnicode[0x7f] = toCharCode('\\uFFFD'); // REPLACEMENT CHARACTER (box with questionmark)\r\npdfDocEncodingToUnicode[0x80] = toCharCode('\\u2022'); // BULLET\r\npdfDocEncodingToUnicode[0x81] = toCharCode('\\u2020'); // DAGGER\r\npdfDocEncodingToUnicode[0x82] = toCharCode('\\u2021'); // DOUBLE DAGGER\r\npdfDocEncodingToUnicode[0x83] = toCharCode('\\u2026'); // HORIZONTAL ELLIPSIS\r\npdfDocEncodingToUnicode[0x84] = toCharCode('\\u2014'); // EM DASH\r\npdfDocEncodingToUnicode[0x85] = toCharCode('\\u2013'); // EN DASH\r\npdfDocEncodingToUnicode[0x86] = toCharCode('\\u0192'); // LATIN SMALL LETTER SCRIPT F\r\npdfDocEncodingToUnicode[0x87] = toCharCode('\\u2044'); // FRACTION SLASH (solidus)\r\npdfDocEncodingToUnicode[0x88] = toCharCode('\\u2039'); // SINGLE LEFT-POINTING ANGLE QUOTATION MARK\r\npdfDocEncodingToUnicode[0x89] = toCharCode('\\u203A'); // SINGLE RIGHT-POINTING ANGLE QUOTATION MARK\r\npdfDocEncodingToUnicode[0x8a] = toCharCode('\\u2212'); // MINUS SIGN\r\npdfDocEncodingToUnicode[0x8b] = toCharCode('\\u2030'); // PER MILLE SIGN\r\npdfDocEncodingToUnicode[0x8c] = toCharCode('\\u201E'); // DOUBLE LOW-9 QUOTATION MARK (quotedblbase)\r\npdfDocEncodingToUnicode[0x8d] = toCharCode('\\u201C'); // LEFT DOUBLE QUOTATION MARK (quotedblleft)\r\npdfDocEncodingToUnicode[0x8e] = toCharCode('\\u201D'); // RIGHT DOUBLE QUOTATION MARK (quotedblright)\r\npdfDocEncodingToUnicode[0x8f] = toCharCode('\\u2018'); // LEFT SINGLE QUOTATION MARK (quoteleft)\r\npdfDocEncodingToUnicode[0x90] = toCharCode('\\u2019'); // RIGHT SINGLE QUOTATION MARK (quoteright)\r\npdfDocEncodingToUnicode[0x91] = toCharCode('\\u201A'); // SINGLE LOW-9 QUOTATION MARK (quotesinglbase)\r\npdfDocEncodingToUnicode[0x92] = toCharCode('\\u2122'); // TRADE MARK SIGN\r\npdfDocEncodingToUnicode[0x93] = toCharCode('\\uFB01'); // LATIN SMALL LIGATURE FI\r\npdfDocEncodingToUnicode[0x94] = toCharCode('\\uFB02'); // LATIN SMALL LIGATURE FL\r\npdfDocEncodingToUnicode[0x95] = toCharCode('\\u0141'); // LATIN CAPITAL LETTER L WITH STROKE\r\npdfDocEncodingToUnicode[0x96] = toCharCode('\\u0152'); // LATIN CAPITAL LIGATURE OE\r\npdfDocEncodingToUnicode[0x97] = toCharCode('\\u0160'); // LATIN CAPITAL LETTER S WITH CARON\r\npdfDocEncodingToUnicode[0x98] = toCharCode('\\u0178'); // LATIN CAPITAL LETTER Y WITH DIAERESIS\r\npdfDocEncodingToUnicode[0x99] = toCharCode('\\u017D'); // LATIN CAPITAL LETTER Z WITH CARON\r\npdfDocEncodingToUnicode[0x9a] = toCharCode('\\u0131'); // LATIN SMALL LETTER DOTLESS I\r\npdfDocEncodingToUnicode[0x9b] = toCharCode('\\u0142'); // LATIN SMALL LETTER L WITH STROKE\r\npdfDocEncodingToUnicode[0x9c] = toCharCode('\\u0153'); // LATIN SMALL LIGATURE OE\r\npdfDocEncodingToUnicode[0x9d] = toCharCode('\\u0161'); // LATIN SMALL LETTER S WITH CARON\r\npdfDocEncodingToUnicode[0x9e] = toCharCode('\\u017E'); // LATIN SMALL LETTER Z WITH CARON\r\npdfDocEncodingToUnicode[0x9f] = toCharCode('\\uFFFD'); // REPLACEMENT CHARACTER (box with questionmark)\r\npdfDocEncodingToUnicode[0xa0] = toCharCode('\\u20AC'); // EURO SIGN\r\npdfDocEncodingToUnicode[0xad] = toCharCode('\\uFFFD'); // REPLACEMENT CHARACTER (box with questionmark)\r\n/**\r\n * Decode a byte array into a string using PDFDocEncoding.\r\n *\r\n * @param bytes a byte array (decimal representation) containing a string\r\n *              encoded with PDFDocEncoding.\r\n */\r\nexport var pdfDocEncodingDecode = function (bytes) {\r\n    var codePoints = new Array(bytes.length);\r\n    for (var idx = 0, len = bytes.length; idx < len; idx++) {\r\n        codePoints[idx] = pdfDocEncodingToUnicode[bytes[idx]];\r\n    }\r\n    return String.fromCodePoint.apply(String, codePoints);\r\n};\r\n//# sourceMappingURL=pdfDocEncoding.js.map"]},"metadata":{},"sourceType":"module"}