{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFField from \"./PDFField\";\nimport { PDFAcroSignature } from \"../../core\";\nimport { assertIs } from \"../../utils\";\n/**\n * Represents a signature field of a [[PDFForm]].\n *\n * [[PDFSignature]] fields are digital signatures. `pdf-lib` does not\n * currently provide any specialized APIs for creating digital signatures or\n * reading the contents of existing digital signatures.\n */\n\nvar PDFSignature =\n/** @class */\nfunction (_super) {\n  __extends(PDFSignature, _super);\n\n  function PDFSignature(acroSignature, ref, doc) {\n    var _this = _super.call(this, acroSignature, ref, doc) || this;\n\n    assertIs(acroSignature, 'acroSignature', [[PDFAcroSignature, 'PDFAcroSignature']]);\n    _this.acroField = acroSignature;\n    return _this;\n  }\n\n  PDFSignature.prototype.needsAppearancesUpdate = function () {\n    return false;\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFForm.getSignature]] method, which will create an\n   * > instance of [[PDFSignature]] for you.\n   *\n   * Create an instance of [[PDFSignature]] from an existing acroSignature and\n   * ref\n   *\n   * @param acroSignature The underlying `PDFAcroSignature` for this signature.\n   * @param ref The unique reference for this signature.\n   * @param doc The document to which this signature will belong.\n   */\n\n\n  PDFSignature.of = function (acroSignature, ref, doc) {\n    return new PDFSignature(acroSignature, ref, doc);\n  };\n\n  return PDFSignature;\n}(PDFField);\n\nexport default PDFSignature;","map":{"version":3,"sources":["../../../src/api/form/PDFSignature.ts"],"names":[],"mappings":";AACA,OAAO,QAAP,MAAe,YAAf;AAEA,SAAiB,gBAAjB,QAAmC,YAAnC;AACA,SAAS,QAAT,QAAmB,aAAnB;AAEA;;;;;;AAMG;;AACH,IAAA,YAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA0C,EAAA,SAAA,CAAA,YAAA,EAAA,MAAA,CAAA;;AAsBxC,WAAA,YAAA,CACE,aADF,EAEE,GAFF,EAGE,GAHF,EAGkB;AAHlB,QAAA,KAAA,GAKE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,aAAN,EAAqB,GAArB,EAA0B,GAA1B,KAA8B,IALhC;;AAOE,IAAA,QAAQ,CAAC,aAAD,EAAgB,eAAhB,EAAiC,CACvC,CAAC,gBAAD,EAAmB,kBAAnB,CADuC,CAAjC,CAAR;AAIA,IAAA,KAAI,CAAC,SAAL,GAAiB,aAAjB;;AACD;;AAED,EAAA,YAAA,CAAA,SAAA,CAAA,sBAAA,GAAA,YAAA;AACE,WAAO,KAAP;AACD,GAFD;AAnCA;;;;;;;;;;;AAWG;;;AACI,EAAA,YAAA,CAAA,EAAA,GAAK,UACV,aADU,EAEV,GAFU,EAGV,GAHU,EAGM;AACb,WAAA,IAAI,YAAJ,CAAiB,aAAjB,EAAgC,GAAhC,EAAA,GAAA,CAAA;AAAyC,GAJvC;;AA0BT,SAAA,YAAA;AAAC,CAvCD,CAA0C,QAA1C,CAAA;;eAAqB,Y","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport PDFField from \"./PDFField\";\nimport { PDFAcroSignature } from \"../../core\";\nimport { assertIs } from \"../../utils\";\n/**\n * Represents a signature field of a [[PDFForm]].\n *\n * [[PDFSignature]] fields are digital signatures. `pdf-lib` does not\n * currently provide any specialized APIs for creating digital signatures or\n * reading the contents of existing digital signatures.\n */\nvar PDFSignature = /** @class */ (function (_super) {\n    __extends(PDFSignature, _super);\n    function PDFSignature(acroSignature, ref, doc) {\n        var _this = _super.call(this, acroSignature, ref, doc) || this;\n        assertIs(acroSignature, 'acroSignature', [\n            [PDFAcroSignature, 'PDFAcroSignature'],\n        ]);\n        _this.acroField = acroSignature;\n        return _this;\n    }\n    PDFSignature.prototype.needsAppearancesUpdate = function () {\n        return false;\n    };\n    /**\n     * > **NOTE:** You probably don't want to call this method directly. Instead,\n     * > consider using the [[PDFForm.getSignature]] method, which will create an\n     * > instance of [[PDFSignature]] for you.\n     *\n     * Create an instance of [[PDFSignature]] from an existing acroSignature and\n     * ref\n     *\n     * @param acroSignature The underlying `PDFAcroSignature` for this signature.\n     * @param ref The unique reference for this signature.\n     * @param doc The document to which this signature will belong.\n     */\n    PDFSignature.of = function (acroSignature, ref, doc) { return new PDFSignature(acroSignature, ref, doc); };\n    return PDFSignature;\n}(PDFField));\nexport default PDFSignature;\n//# sourceMappingURL=PDFSignature.js.map"]},"metadata":{},"sourceType":"module"}