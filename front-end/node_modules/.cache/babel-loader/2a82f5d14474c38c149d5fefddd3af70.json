{"ast":null,"code":"import { __read } from 'tslib';\nimport { mix } from 'popmotion';\n/**\r\n * Reset an axis to the provided origin box.\r\n *\r\n * This is a mutative operation.\r\n */\n\nfunction resetAxis(axis, originAxis) {\n  axis.min = originAxis.min;\n  axis.max = originAxis.max;\n}\n/**\r\n * Reset a box to the provided origin box.\r\n *\r\n * This is a mutative operation.\r\n */\n\n\nfunction resetBox(box, originBox) {\n  resetAxis(box.x, originBox.x);\n  resetAxis(box.y, originBox.y);\n}\n/**\r\n * Scales a point based on a factor and an originPoint\r\n */\n\n\nfunction scalePoint(point, scale, originPoint) {\n  var distanceFromOrigin = point - originPoint;\n  var scaled = scale * distanceFromOrigin;\n  return originPoint + scaled;\n}\n/**\r\n * Applies a translate/scale delta to a point\r\n */\n\n\nfunction applyPointDelta(point, translate, scale, originPoint, boxScale) {\n  if (boxScale !== undefined) {\n    point = scalePoint(point, boxScale, originPoint);\n  }\n\n  return scalePoint(point, scale, originPoint) + translate;\n}\n/**\r\n * Applies a translate/scale delta to an axis\r\n */\n\n\nfunction applyAxisDelta(axis, translate, scale, originPoint, boxScale) {\n  if (translate === void 0) {\n    translate = 0;\n  }\n\n  if (scale === void 0) {\n    scale = 1;\n  }\n\n  axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);\n  axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\r\n * Applies a translate/scale delta to a box\r\n */\n\n\nfunction applyBoxDelta(box, _a) {\n  var x = _a.x,\n      y = _a.y;\n  applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);\n  applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);\n}\n/**\r\n * Apply a transform to an axis from the latest resolved motion values.\r\n * This function basically acts as a bridge between a flat motion value map\r\n * and applyAxisDelta\r\n */\n\n\nfunction applyAxisTransforms(final, axis, transforms, _a) {\n  var _b = __read(_a, 3),\n      key = _b[0],\n      scaleKey = _b[1],\n      originKey = _b[2]; // Copy the current axis to the final axis before mutation\n\n\n  final.min = axis.min;\n  final.max = axis.max;\n  var axisOrigin = transforms[originKey] !== undefined ? transforms[originKey] : 0.5;\n  var originPoint = mix(axis.min, axis.max, axisOrigin); // Apply the axis delta to the final axis\n\n  applyAxisDelta(final, transforms[key], transforms[scaleKey], originPoint, transforms.scale);\n}\n/**\r\n * The names of the motion values we want to apply as translation, scale and origin.\r\n */\n\n\nvar xKeys = [\"x\", \"scaleX\", \"originX\"];\nvar yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\r\n * Apply a transform to a box from the latest resolved motion values.\r\n */\n\nfunction applyBoxTransforms(finalBox, box, transforms) {\n  applyAxisTransforms(finalBox.x, box.x, transforms, xKeys);\n  applyAxisTransforms(finalBox.y, box.y, transforms, yKeys);\n}\n/**\r\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\r\n */\n\n\nfunction removePointDelta(point, translate, scale, originPoint, boxScale) {\n  point -= translate;\n  point = scalePoint(point, 1 / scale, originPoint);\n\n  if (boxScale !== undefined) {\n    point = scalePoint(point, 1 / boxScale, originPoint);\n  }\n\n  return point;\n}\n/**\r\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\r\n */\n\n\nfunction removeAxisDelta(axis, translate, scale, origin, boxScale) {\n  if (translate === void 0) {\n    translate = 0;\n  }\n\n  if (scale === void 0) {\n    scale = 1;\n  }\n\n  if (origin === void 0) {\n    origin = 0.5;\n  }\n\n  var originPoint = mix(axis.min, axis.max, origin) - translate;\n  axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n  axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\r\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\r\n * and acts as a bridge between motion values and removeAxisDelta\r\n */\n\n\nfunction removeAxisTransforms(axis, transforms, _a) {\n  var _b = __read(_a, 3),\n      key = _b[0],\n      scaleKey = _b[1],\n      originKey = _b[2];\n\n  removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale);\n}\n/**\r\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\r\n * and acts as a bridge between motion values and removeAxisDelta\r\n */\n\n\nfunction removeBoxTransforms(box, transforms) {\n  removeAxisTransforms(box.x, transforms, xKeys);\n  removeAxisTransforms(box.y, transforms, yKeys);\n}\n/**\r\n * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms\r\n * in a tree upon our box before then calculating how to project it into our desired viewport-relative box\r\n *\r\n * This is the final nested loop within updateLayoutDelta for future refactoring\r\n */\n\n\nfunction applyTreeDeltas(box, treeScale, treePath) {\n  var treeLength = treePath.length;\n  if (!treeLength) return; // Reset the treeScale\n\n  treeScale.x = treeScale.y = 1;\n\n  for (var i = 0; i < treeLength; i++) {\n    var delta = treePath[i].getLayoutState().delta; // Incoporate each ancestor's scale into a culmulative treeScale for this component\n\n    treeScale.x *= delta.x.scale;\n    treeScale.y *= delta.y.scale; // Apply each ancestor's calculated delta into this component's recorded layout box\n\n    applyBoxDelta(box, delta);\n  }\n}\n\nexport { applyAxisDelta, applyAxisTransforms, applyBoxDelta, applyBoxTransforms, applyPointDelta, applyTreeDeltas, removeAxisDelta, removeAxisTransforms, removeBoxTransforms, removePointDelta, resetAxis, resetBox, scalePoint };","map":{"version":3,"sources":["E:/PROJECTS/instafill_local/instafill/front-end/node_modules/framer-motion/dist/es/utils/geometry/delta-apply.js"],"names":["__read","mix","resetAxis","axis","originAxis","min","max","resetBox","box","originBox","x","y","scalePoint","point","scale","originPoint","distanceFromOrigin","scaled","applyPointDelta","translate","boxScale","undefined","applyAxisDelta","applyBoxDelta","_a","applyAxisTransforms","final","transforms","_b","key","scaleKey","originKey","axisOrigin","xKeys","yKeys","applyBoxTransforms","finalBox","removePointDelta","removeAxisDelta","origin","removeAxisTransforms","removeBoxTransforms","applyTreeDeltas","treeScale","treePath","treeLength","length","i","delta","getLayoutState"],"mappings":"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","sourcesContent":["import { __read } from 'tslib';\r\nimport { mix } from 'popmotion';\r\n\r\n/**\r\n * Reset an axis to the provided origin box.\r\n *\r\n * This is a mutative operation.\r\n */\r\nfunction resetAxis(axis, originAxis) {\r\n    axis.min = originAxis.min;\r\n    axis.max = originAxis.max;\r\n}\r\n/**\r\n * Reset a box to the provided origin box.\r\n *\r\n * This is a mutative operation.\r\n */\r\nfunction resetBox(box, originBox) {\r\n    resetAxis(box.x, originBox.x);\r\n    resetAxis(box.y, originBox.y);\r\n}\r\n/**\r\n * Scales a point based on a factor and an originPoint\r\n */\r\nfunction scalePoint(point, scale, originPoint) {\r\n    var distanceFromOrigin = point - originPoint;\r\n    var scaled = scale * distanceFromOrigin;\r\n    return originPoint + scaled;\r\n}\r\n/**\r\n * Applies a translate/scale delta to a point\r\n */\r\nfunction applyPointDelta(point, translate, scale, originPoint, boxScale) {\r\n    if (boxScale !== undefined) {\r\n        point = scalePoint(point, boxScale, originPoint);\r\n    }\r\n    return scalePoint(point, scale, originPoint) + translate;\r\n}\r\n/**\r\n * Applies a translate/scale delta to an axis\r\n */\r\nfunction applyAxisDelta(axis, translate, scale, originPoint, boxScale) {\r\n    if (translate === void 0) { translate = 0; }\r\n    if (scale === void 0) { scale = 1; }\r\n    axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);\r\n    axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);\r\n}\r\n/**\r\n * Applies a translate/scale delta to a box\r\n */\r\nfunction applyBoxDelta(box, _a) {\r\n    var x = _a.x, y = _a.y;\r\n    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);\r\n    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);\r\n}\r\n/**\r\n * Apply a transform to an axis from the latest resolved motion values.\r\n * This function basically acts as a bridge between a flat motion value map\r\n * and applyAxisDelta\r\n */\r\nfunction applyAxisTransforms(final, axis, transforms, _a) {\r\n    var _b = __read(_a, 3), key = _b[0], scaleKey = _b[1], originKey = _b[2];\r\n    // Copy the current axis to the final axis before mutation\r\n    final.min = axis.min;\r\n    final.max = axis.max;\r\n    var axisOrigin = transforms[originKey] !== undefined ? transforms[originKey] : 0.5;\r\n    var originPoint = mix(axis.min, axis.max, axisOrigin);\r\n    // Apply the axis delta to the final axis\r\n    applyAxisDelta(final, transforms[key], transforms[scaleKey], originPoint, transforms.scale);\r\n}\r\n/**\r\n * The names of the motion values we want to apply as translation, scale and origin.\r\n */\r\nvar xKeys = [\"x\", \"scaleX\", \"originX\"];\r\nvar yKeys = [\"y\", \"scaleY\", \"originY\"];\r\n/**\r\n * Apply a transform to a box from the latest resolved motion values.\r\n */\r\nfunction applyBoxTransforms(finalBox, box, transforms) {\r\n    applyAxisTransforms(finalBox.x, box.x, transforms, xKeys);\r\n    applyAxisTransforms(finalBox.y, box.y, transforms, yKeys);\r\n}\r\n/**\r\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\r\n */\r\nfunction removePointDelta(point, translate, scale, originPoint, boxScale) {\r\n    point -= translate;\r\n    point = scalePoint(point, 1 / scale, originPoint);\r\n    if (boxScale !== undefined) {\r\n        point = scalePoint(point, 1 / boxScale, originPoint);\r\n    }\r\n    return point;\r\n}\r\n/**\r\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\r\n */\r\nfunction removeAxisDelta(axis, translate, scale, origin, boxScale) {\r\n    if (translate === void 0) { translate = 0; }\r\n    if (scale === void 0) { scale = 1; }\r\n    if (origin === void 0) { origin = 0.5; }\r\n    var originPoint = mix(axis.min, axis.max, origin) - translate;\r\n    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\r\n    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\r\n}\r\n/**\r\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\r\n * and acts as a bridge between motion values and removeAxisDelta\r\n */\r\nfunction removeAxisTransforms(axis, transforms, _a) {\r\n    var _b = __read(_a, 3), key = _b[0], scaleKey = _b[1], originKey = _b[2];\r\n    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale);\r\n}\r\n/**\r\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\r\n * and acts as a bridge between motion values and removeAxisDelta\r\n */\r\nfunction removeBoxTransforms(box, transforms) {\r\n    removeAxisTransforms(box.x, transforms, xKeys);\r\n    removeAxisTransforms(box.y, transforms, yKeys);\r\n}\r\n/**\r\n * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms\r\n * in a tree upon our box before then calculating how to project it into our desired viewport-relative box\r\n *\r\n * This is the final nested loop within updateLayoutDelta for future refactoring\r\n */\r\nfunction applyTreeDeltas(box, treeScale, treePath) {\r\n    var treeLength = treePath.length;\r\n    if (!treeLength)\r\n        return;\r\n    // Reset the treeScale\r\n    treeScale.x = treeScale.y = 1;\r\n    for (var i = 0; i < treeLength; i++) {\r\n        var delta = treePath[i].getLayoutState().delta;\r\n        // Incoporate each ancestor's scale into a culmulative treeScale for this component\r\n        treeScale.x *= delta.x.scale;\r\n        treeScale.y *= delta.y.scale;\r\n        // Apply each ancestor's calculated delta into this component's recorded layout box\r\n        applyBoxDelta(box, delta);\r\n    }\r\n}\r\n\r\nexport { applyAxisDelta, applyAxisTransforms, applyBoxDelta, applyBoxTransforms, applyPointDelta, applyTreeDeltas, removeAxisDelta, removeAxisTransforms, removeBoxTransforms, removePointDelta, resetAxis, resetBox, scalePoint };\r\n"]},"metadata":{},"sourceType":"module"}