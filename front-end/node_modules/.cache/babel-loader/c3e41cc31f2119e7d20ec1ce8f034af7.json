{"ast":null,"code":"import { getValueAsType, getDefaultValueType } from '../../dom/utils/value-types.js';\nimport { valueScaleCorrection } from '../../dom/projection/scale-correction.js';\nimport { isTransformProp, isTransformOriginProp } from './transform.js';\nimport { buildLayoutProjectionTransform, buildLayoutProjectionTransformOrigin, buildTransform, buildTransformOrigin } from './build-transform.js';\nimport { isCSSVariable } from '../../dom/utils/is-css-variable.js';\n\nfunction buildHTMLStyles(state, latestValues, projection, layoutState, options, transformTemplate) {\n  var _a;\n\n  var style = state.style,\n      vars = state.vars,\n      transform = state.transform,\n      transformKeys = state.transformKeys,\n      transformOrigin = state.transformOrigin; // Empty the transformKeys array. As we're throwing out refs to its items\n  // this might not be as cheap as suspected. Maybe using the array as a buffer\n  // with a manual incrementation would be better.\n\n  transformKeys.length = 0; // Track whether we encounter any transform or transformOrigin values.\n\n  var hasTransform = false;\n  var hasTransformOrigin = false; // Does the calculated transform essentially equal \"none\"?\n\n  var transformIsNone = true;\n  /**\r\n   * Loop over all our latest animated values and decide whether to handle them\r\n   * as a style or CSS variable.\r\n   *\r\n   * Transforms and transform origins are kept seperately for further processing.\r\n   */\n\n  for (var key in latestValues) {\n    var value = latestValues[key];\n    /**\r\n     * If this is a CSS variable we don't do any further processing.\r\n     */\n\n    if (isCSSVariable(key)) {\n      vars[key] = value;\n      continue;\n    } // Convert the value to its default value type, ie 0 -> \"0px\"\n\n\n    var valueType = getDefaultValueType(key);\n    var valueAsType = getValueAsType(value, valueType);\n\n    if (isTransformProp(key)) {\n      // If this is a transform, flag to enable further transform processing\n      hasTransform = true;\n      transform[key] = valueAsType;\n      transformKeys.push(key); // If we already know we have a non-default transform, early return\n\n      if (!transformIsNone) continue; // Otherwise check to see if this is a default transform\n\n      if (value !== ((_a = valueType.default) !== null && _a !== void 0 ? _a : 0)) transformIsNone = false;\n    } else if (isTransformOriginProp(key)) {\n      transformOrigin[key] = valueAsType; // If this is a transform origin, flag and enable further transform-origin processing\n\n      hasTransformOrigin = true;\n    } else {\n      /**\r\n       * If layout projection is on, and we need to perform scale correction for this\r\n       * value type, perform it.\r\n       */\n      if (layoutState && projection && layoutState.isHydrated && valueScaleCorrection[key]) {\n        var correctedValue = valueScaleCorrection[key].process(value, layoutState, projection);\n        /**\r\n         * Scale-correctable values can define a number of other values to break\r\n         * down into. For instance borderRadius needs applying to borderBottomLeftRadius etc\r\n         */\n\n        var applyTo = valueScaleCorrection[key].applyTo;\n\n        if (applyTo) {\n          var num = applyTo.length;\n\n          for (var i = 0; i < num; i++) {\n            style[applyTo[i]] = correctedValue;\n          }\n        } else {\n          style[key] = correctedValue;\n        }\n      } else {\n        style[key] = valueAsType;\n      }\n    }\n  }\n\n  if (layoutState && projection && projection.isEnabled && layoutState.isHydrated) {\n    style.transform = buildLayoutProjectionTransform(layoutState.deltaFinal, layoutState.treeScale, hasTransform ? transform : undefined);\n\n    if (transformTemplate) {\n      style.transform = transformTemplate(transform, style.transform);\n    }\n\n    style.transformOrigin = buildLayoutProjectionTransformOrigin(layoutState);\n  } else {\n    if (hasTransform) {\n      style.transform = buildTransform(state, options, transformIsNone, transformTemplate);\n    }\n\n    if (hasTransformOrigin) {\n      style.transformOrigin = buildTransformOrigin(transformOrigin);\n    }\n  }\n}\n\nexport { buildHTMLStyles };","map":{"version":3,"sources":["C:/Users/GAMER/OneDrive/Desktop/programming stuff/github_repos/instafill/front-end/node_modules/framer-motion/dist/es/render/html/utils/build-styles.js"],"names":["getValueAsType","getDefaultValueType","valueScaleCorrection","isTransformProp","isTransformOriginProp","buildLayoutProjectionTransform","buildLayoutProjectionTransformOrigin","buildTransform","buildTransformOrigin","isCSSVariable","buildHTMLStyles","state","latestValues","projection","layoutState","options","transformTemplate","_a","style","vars","transform","transformKeys","transformOrigin","length","hasTransform","hasTransformOrigin","transformIsNone","key","value","valueType","valueAsType","push","default","isHydrated","correctedValue","process","applyTo","num","i","isEnabled","deltaFinal","treeScale","undefined"],"mappings":"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","sourcesContent":["import { getValueAsType, getDefaultValueType } from '../../dom/utils/value-types.js';\r\nimport { valueScaleCorrection } from '../../dom/projection/scale-correction.js';\r\nimport { isTransformProp, isTransformOriginProp } from './transform.js';\r\nimport { buildLayoutProjectionTransform, buildLayoutProjectionTransformOrigin, buildTransform, buildTransformOrigin } from './build-transform.js';\r\nimport { isCSSVariable } from '../../dom/utils/is-css-variable.js';\r\n\r\nfunction buildHTMLStyles(state, latestValues, projection, layoutState, options, transformTemplate) {\r\n    var _a;\r\n    var style = state.style, vars = state.vars, transform = state.transform, transformKeys = state.transformKeys, transformOrigin = state.transformOrigin;\r\n    // Empty the transformKeys array. As we're throwing out refs to its items\r\n    // this might not be as cheap as suspected. Maybe using the array as a buffer\r\n    // with a manual incrementation would be better.\r\n    transformKeys.length = 0;\r\n    // Track whether we encounter any transform or transformOrigin values.\r\n    var hasTransform = false;\r\n    var hasTransformOrigin = false;\r\n    // Does the calculated transform essentially equal \"none\"?\r\n    var transformIsNone = true;\r\n    /**\r\n     * Loop over all our latest animated values and decide whether to handle them\r\n     * as a style or CSS variable.\r\n     *\r\n     * Transforms and transform origins are kept seperately for further processing.\r\n     */\r\n    for (var key in latestValues) {\r\n        var value = latestValues[key];\r\n        /**\r\n         * If this is a CSS variable we don't do any further processing.\r\n         */\r\n        if (isCSSVariable(key)) {\r\n            vars[key] = value;\r\n            continue;\r\n        }\r\n        // Convert the value to its default value type, ie 0 -> \"0px\"\r\n        var valueType = getDefaultValueType(key);\r\n        var valueAsType = getValueAsType(value, valueType);\r\n        if (isTransformProp(key)) {\r\n            // If this is a transform, flag to enable further transform processing\r\n            hasTransform = true;\r\n            transform[key] = valueAsType;\r\n            transformKeys.push(key);\r\n            // If we already know we have a non-default transform, early return\r\n            if (!transformIsNone)\r\n                continue;\r\n            // Otherwise check to see if this is a default transform\r\n            if (value !== ((_a = valueType.default) !== null && _a !== void 0 ? _a : 0))\r\n                transformIsNone = false;\r\n        }\r\n        else if (isTransformOriginProp(key)) {\r\n            transformOrigin[key] = valueAsType;\r\n            // If this is a transform origin, flag and enable further transform-origin processing\r\n            hasTransformOrigin = true;\r\n        }\r\n        else {\r\n            /**\r\n             * If layout projection is on, and we need to perform scale correction for this\r\n             * value type, perform it.\r\n             */\r\n            if (layoutState &&\r\n                projection &&\r\n                layoutState.isHydrated &&\r\n                valueScaleCorrection[key]) {\r\n                var correctedValue = valueScaleCorrection[key].process(value, layoutState, projection);\r\n                /**\r\n                 * Scale-correctable values can define a number of other values to break\r\n                 * down into. For instance borderRadius needs applying to borderBottomLeftRadius etc\r\n                 */\r\n                var applyTo = valueScaleCorrection[key].applyTo;\r\n                if (applyTo) {\r\n                    var num = applyTo.length;\r\n                    for (var i = 0; i < num; i++) {\r\n                        style[applyTo[i]] = correctedValue;\r\n                    }\r\n                }\r\n                else {\r\n                    style[key] = correctedValue;\r\n                }\r\n            }\r\n            else {\r\n                style[key] = valueAsType;\r\n            }\r\n        }\r\n    }\r\n    if (layoutState &&\r\n        projection &&\r\n        projection.isEnabled &&\r\n        layoutState.isHydrated) {\r\n        style.transform = buildLayoutProjectionTransform(layoutState.deltaFinal, layoutState.treeScale, hasTransform ? transform : undefined);\r\n        if (transformTemplate) {\r\n            style.transform = transformTemplate(transform, style.transform);\r\n        }\r\n        style.transformOrigin = buildLayoutProjectionTransformOrigin(layoutState);\r\n    }\r\n    else {\r\n        if (hasTransform) {\r\n            style.transform = buildTransform(state, options, transformIsNone, transformTemplate);\r\n        }\r\n        if (hasTransformOrigin) {\r\n            style.transformOrigin = buildTransformOrigin(transformOrigin);\r\n        }\r\n    }\r\n}\r\n\r\nexport { buildHTMLStyles };\r\n"]},"metadata":{},"sourceType":"module"}