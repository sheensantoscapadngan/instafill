{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport { drawCheckBox, rotateInPlace, drawRadioButton, drawButton, drawTextField, drawOptionList } from \"../operations\";\nimport { rgb, componentsToColor, setFillingColor, grayscale, cmyk } from \"../colors\";\nimport { reduceRotation, adjustDimsForRotation } from \"../rotations\";\nimport { layoutMultilineText, layoutCombedText, layoutSinglelineText } from \"../text/layout\";\nimport { TextAlignment } from \"../text/alignment\";\nimport { setFontAndSize } from \"../operators\";\nimport { findLastMatch } from \"../../utils\";\n/********************* Appearance Provider Functions **************************/\n\nexport var normalizeAppearance = function (appearance) {\n  if ('normal' in appearance) return appearance;\n  return {\n    normal: appearance\n  };\n}; // Examples:\n//   `/Helv 12 Tf` -> ['/Helv 12 Tf', 'Helv', '12']\n//   `/HeBo 8.00 Tf` -> ['/HeBo 8 Tf', 'HeBo', '8.00']\n\nvar tfRegex = /\\/([^\\0\\t\\n\\f\\r\\ ]+)[\\0\\t\\n\\f\\r\\ ]+(\\d*\\.\\d+|\\d+)[\\0\\t\\n\\f\\r\\ ]+Tf/;\n\nvar getDefaultFontSize = function (field) {\n  var _a, _b;\n\n  var da = (_a = field.getDefaultAppearance()) !== null && _a !== void 0 ? _a : '';\n  var daMatch = (_b = findLastMatch(da, tfRegex).match) !== null && _b !== void 0 ? _b : [];\n  var defaultFontSize = Number(daMatch[2]);\n  return isFinite(defaultFontSize) ? defaultFontSize : undefined;\n}; // Examples:\n//   `0.3 g` -> ['0.3', 'g']\n//   `0.3 1 .3 rg` -> ['0.3', '1', '.3', 'rg']\n//   `0.3 1 .3 0 k` -> ['0.3', '1', '.3', '0', 'k']\n\n\nvar colorRegex = /(\\d*\\.\\d+|\\d+)[\\0\\t\\n\\f\\r\\ ]*(\\d*\\.\\d+|\\d+)?[\\0\\t\\n\\f\\r\\ ]*(\\d*\\.\\d+|\\d+)?[\\0\\t\\n\\f\\r\\ ]*(\\d*\\.\\d+|\\d+)?[\\0\\t\\n\\f\\r\\ ]+(g|rg|k)/;\n\nvar getDefaultColor = function (field) {\n  var _a;\n\n  var da = (_a = field.getDefaultAppearance()) !== null && _a !== void 0 ? _a : '';\n  var daMatch = findLastMatch(da, colorRegex).match;\n\n  var _b = daMatch !== null && daMatch !== void 0 ? daMatch : [],\n      c1 = _b[1],\n      c2 = _b[2],\n      c3 = _b[3],\n      c4 = _b[4],\n      colorSpace = _b[5];\n\n  if (colorSpace === 'g' && c1) {\n    return grayscale(Number(c1));\n  }\n\n  if (colorSpace === 'rg' && c1 && c2 && c3) {\n    return rgb(Number(c1), Number(c2), Number(c3));\n  }\n\n  if (colorSpace === 'k' && c1 && c2 && c3 && c4) {\n    return cmyk(Number(c1), Number(c2), Number(c3), Number(c4));\n  }\n\n  return undefined;\n};\n\nvar updateDefaultAppearance = function (field, color, font, fontSize) {\n  var _a;\n\n  if (fontSize === void 0) {\n    fontSize = 0;\n  }\n\n  var da = [setFillingColor(color).toString(), setFontAndSize((_a = font === null || font === void 0 ? void 0 : font.name) !== null && _a !== void 0 ? _a : 'dummy__noop', fontSize).toString()].join('\\n');\n  field.setDefaultAppearance(da);\n};\n\nexport var defaultCheckBoxAppearanceProvider = function (checkBox, widget) {\n  var _a, _b, _c; // The `/DA` entry can be at the widget or field level - so we handle both\n\n\n  var widgetColor = getDefaultColor(widget);\n  var fieldColor = getDefaultColor(checkBox.acroField);\n  var rectangle = widget.getRectangle();\n  var ap = widget.getAppearanceCharacteristics();\n  var bs = widget.getBorderStyle();\n  var borderWidth = (_a = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _a !== void 0 ? _a : 0;\n  var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n\n  var _d = adjustDimsForRotation(rectangle, rotation),\n      width = _d.width,\n      height = _d.height;\n\n  var rotate = rotateInPlace(__assign(__assign({}, rectangle), {\n    rotation: rotation\n  }));\n  var black = rgb(0, 0, 0);\n  var borderColor = (_b = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBorderColor())) !== null && _b !== void 0 ? _b : black;\n  var normalBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor());\n  var downBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor(), 0.8); // Update color\n\n  var textColor = (_c = widgetColor !== null && widgetColor !== void 0 ? widgetColor : fieldColor) !== null && _c !== void 0 ? _c : black;\n\n  if (widgetColor) {\n    updateDefaultAppearance(widget, textColor);\n  } else {\n    updateDefaultAppearance(checkBox.acroField, textColor);\n  }\n\n  var options = {\n    x: 0 + borderWidth / 2,\n    y: 0 + borderWidth / 2,\n    width: width - borderWidth,\n    height: height - borderWidth,\n    thickness: 1.5,\n    borderWidth: borderWidth,\n    borderColor: borderColor,\n    markColor: textColor\n  };\n  return {\n    normal: {\n      on: __spreadArrays(rotate, drawCheckBox(__assign(__assign({}, options), {\n        color: normalBackgroundColor,\n        filled: true\n      }))),\n      off: __spreadArrays(rotate, drawCheckBox(__assign(__assign({}, options), {\n        color: normalBackgroundColor,\n        filled: false\n      })))\n    },\n    down: {\n      on: __spreadArrays(rotate, drawCheckBox(__assign(__assign({}, options), {\n        color: downBackgroundColor,\n        filled: true\n      }))),\n      off: __spreadArrays(rotate, drawCheckBox(__assign(__assign({}, options), {\n        color: downBackgroundColor,\n        filled: false\n      })))\n    }\n  };\n};\nexport var defaultRadioGroupAppearanceProvider = function (radioGroup, widget) {\n  var _a, _b, _c; // The `/DA` entry can be at the widget or field level - so we handle both\n\n\n  var widgetColor = getDefaultColor(widget);\n  var fieldColor = getDefaultColor(radioGroup.acroField);\n  var rectangle = widget.getRectangle();\n  var ap = widget.getAppearanceCharacteristics();\n  var bs = widget.getBorderStyle();\n  var borderWidth = (_a = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _a !== void 0 ? _a : 0;\n  var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n\n  var _d = adjustDimsForRotation(rectangle, rotation),\n      width = _d.width,\n      height = _d.height;\n\n  var rotate = rotateInPlace(__assign(__assign({}, rectangle), {\n    rotation: rotation\n  }));\n  var black = rgb(0, 0, 0);\n  var borderColor = (_b = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBorderColor())) !== null && _b !== void 0 ? _b : black;\n  var normalBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor());\n  var downBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor(), 0.8); // Update color\n\n  var textColor = (_c = widgetColor !== null && widgetColor !== void 0 ? widgetColor : fieldColor) !== null && _c !== void 0 ? _c : black;\n\n  if (widgetColor) {\n    updateDefaultAppearance(widget, textColor);\n  } else {\n    updateDefaultAppearance(radioGroup.acroField, textColor);\n  }\n\n  var options = {\n    x: width / 2,\n    y: height / 2,\n    width: width - borderWidth,\n    height: height - borderWidth,\n    borderWidth: borderWidth,\n    borderColor: borderColor,\n    dotColor: textColor\n  };\n  return {\n    normal: {\n      on: __spreadArrays(rotate, drawRadioButton(__assign(__assign({}, options), {\n        color: normalBackgroundColor,\n        filled: true\n      }))),\n      off: __spreadArrays(rotate, drawRadioButton(__assign(__assign({}, options), {\n        color: normalBackgroundColor,\n        filled: false\n      })))\n    },\n    down: {\n      on: __spreadArrays(rotate, drawRadioButton(__assign(__assign({}, options), {\n        color: downBackgroundColor,\n        filled: true\n      }))),\n      off: __spreadArrays(rotate, drawRadioButton(__assign(__assign({}, options), {\n        color: downBackgroundColor,\n        filled: false\n      })))\n    }\n  };\n};\nexport var defaultButtonAppearanceProvider = function (button, widget, font) {\n  var _a, _b, _c, _d, _e; // The `/DA` entry can be at the widget or field level - so we handle both\n\n\n  var widgetColor = getDefaultColor(widget);\n  var fieldColor = getDefaultColor(button.acroField);\n  var widgetFontSize = getDefaultFontSize(widget);\n  var fieldFontSize = getDefaultFontSize(button.acroField);\n  var rectangle = widget.getRectangle();\n  var ap = widget.getAppearanceCharacteristics();\n  var bs = widget.getBorderStyle();\n  var captions = ap === null || ap === void 0 ? void 0 : ap.getCaptions();\n  var normalText = (_a = captions === null || captions === void 0 ? void 0 : captions.normal) !== null && _a !== void 0 ? _a : '';\n  var downText = (_c = (_b = captions === null || captions === void 0 ? void 0 : captions.down) !== null && _b !== void 0 ? _b : normalText) !== null && _c !== void 0 ? _c : '';\n  var borderWidth = (_d = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _d !== void 0 ? _d : 0;\n  var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n\n  var _f = adjustDimsForRotation(rectangle, rotation),\n      width = _f.width,\n      height = _f.height;\n\n  var rotate = rotateInPlace(__assign(__assign({}, rectangle), {\n    rotation: rotation\n  }));\n  var black = rgb(0, 0, 0);\n  var borderColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBorderColor());\n  var normalBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor());\n  var downBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor(), 0.8);\n  var bounds = {\n    x: borderWidth,\n    y: borderWidth,\n    width: width - borderWidth * 2,\n    height: height - borderWidth * 2\n  };\n  var normalLayout = layoutSinglelineText(normalText, {\n    alignment: TextAlignment.Center,\n    fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n    font: font,\n    bounds: bounds\n  });\n  var downLayout = layoutSinglelineText(downText, {\n    alignment: TextAlignment.Center,\n    fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n    font: font,\n    bounds: bounds\n  }); // Update font size and color\n\n  var fontSize = Math.min(normalLayout.fontSize, downLayout.fontSize);\n  var textColor = (_e = widgetColor !== null && widgetColor !== void 0 ? widgetColor : fieldColor) !== null && _e !== void 0 ? _e : black;\n\n  if (widgetColor || widgetFontSize !== undefined) {\n    updateDefaultAppearance(widget, textColor, font, fontSize);\n  } else {\n    updateDefaultAppearance(button.acroField, textColor, font, fontSize);\n  }\n\n  var options = {\n    x: 0 + borderWidth / 2,\n    y: 0 + borderWidth / 2,\n    width: width - borderWidth,\n    height: height - borderWidth,\n    borderWidth: borderWidth,\n    borderColor: borderColor,\n    textColor: textColor,\n    font: font.name,\n    fontSize: fontSize\n  };\n  return {\n    normal: __spreadArrays(rotate, drawButton(__assign(__assign({}, options), {\n      color: normalBackgroundColor,\n      textLines: [normalLayout.line]\n    }))),\n    down: __spreadArrays(rotate, drawButton(__assign(__assign({}, options), {\n      color: downBackgroundColor,\n      textLines: [downLayout.line]\n    })))\n  };\n};\nexport var defaultTextFieldAppearanceProvider = function (textField, widget, font) {\n  var _a, _b, _c, _d; // The `/DA` entry can be at the widget or field level - so we handle both\n\n\n  var widgetColor = getDefaultColor(widget);\n  var fieldColor = getDefaultColor(textField.acroField);\n  var widgetFontSize = getDefaultFontSize(widget);\n  var fieldFontSize = getDefaultFontSize(textField.acroField);\n  var rectangle = widget.getRectangle();\n  var ap = widget.getAppearanceCharacteristics();\n  var bs = widget.getBorderStyle();\n  var text = (_a = textField.getText()) !== null && _a !== void 0 ? _a : '';\n  var borderWidth = (_b = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _b !== void 0 ? _b : 0;\n  var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n\n  var _e = adjustDimsForRotation(rectangle, rotation),\n      width = _e.width,\n      height = _e.height;\n\n  var rotate = rotateInPlace(__assign(__assign({}, rectangle), {\n    rotation: rotation\n  }));\n  var black = rgb(0, 0, 0);\n  var borderColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBorderColor());\n  var normalBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor());\n  var textLines;\n  var fontSize;\n  var padding = textField.isCombed() ? 0 : 1;\n  var bounds = {\n    x: borderWidth + padding,\n    y: borderWidth + padding,\n    width: width - (borderWidth + padding) * 2,\n    height: height - (borderWidth + padding) * 2\n  };\n\n  if (textField.isMultiline()) {\n    var layout = layoutMultilineText(text, {\n      alignment: textField.getAlignment(),\n      fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n      font: font,\n      bounds: bounds\n    });\n    textLines = layout.lines;\n    fontSize = layout.fontSize;\n  } else if (textField.isCombed()) {\n    var layout = layoutCombedText(text, {\n      fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n      font: font,\n      bounds: bounds,\n      cellCount: (_c = textField.getMaxLength()) !== null && _c !== void 0 ? _c : 0\n    });\n    textLines = layout.cells;\n    fontSize = layout.fontSize;\n  } else {\n    var layout = layoutSinglelineText(text, {\n      alignment: textField.getAlignment(),\n      fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n      font: font,\n      bounds: bounds\n    });\n    textLines = [layout.line];\n    fontSize = layout.fontSize;\n  } // Update font size and color\n\n\n  var textColor = (_d = widgetColor !== null && widgetColor !== void 0 ? widgetColor : fieldColor) !== null && _d !== void 0 ? _d : black;\n\n  if (widgetColor || widgetFontSize !== undefined) {\n    updateDefaultAppearance(widget, textColor, font, fontSize);\n  } else {\n    updateDefaultAppearance(textField.acroField, textColor, font, fontSize);\n  }\n\n  var options = {\n    x: 0 + borderWidth / 2,\n    y: 0 + borderWidth / 2,\n    width: width - borderWidth,\n    height: height - borderWidth,\n    borderWidth: borderWidth !== null && borderWidth !== void 0 ? borderWidth : 0,\n    borderColor: borderColor,\n    textColor: textColor,\n    font: font.name,\n    fontSize: fontSize,\n    color: normalBackgroundColor,\n    textLines: textLines,\n    padding: padding\n  };\n  return __spreadArrays(rotate, drawTextField(options));\n};\nexport var defaultDropdownAppearanceProvider = function (dropdown, widget, font) {\n  var _a, _b, _c; // The `/DA` entry can be at the widget or field level - so we handle both\n\n\n  var widgetColor = getDefaultColor(widget);\n  var fieldColor = getDefaultColor(dropdown.acroField);\n  var widgetFontSize = getDefaultFontSize(widget);\n  var fieldFontSize = getDefaultFontSize(dropdown.acroField);\n  var rectangle = widget.getRectangle();\n  var ap = widget.getAppearanceCharacteristics();\n  var bs = widget.getBorderStyle();\n  var text = (_a = dropdown.getSelected()[0]) !== null && _a !== void 0 ? _a : '';\n  var borderWidth = (_b = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _b !== void 0 ? _b : 0;\n  var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n\n  var _d = adjustDimsForRotation(rectangle, rotation),\n      width = _d.width,\n      height = _d.height;\n\n  var rotate = rotateInPlace(__assign(__assign({}, rectangle), {\n    rotation: rotation\n  }));\n  var black = rgb(0, 0, 0);\n  var borderColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBorderColor());\n  var normalBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor());\n  var padding = 1;\n  var bounds = {\n    x: borderWidth + padding,\n    y: borderWidth + padding,\n    width: width - (borderWidth + padding) * 2,\n    height: height - (borderWidth + padding) * 2\n  };\n\n  var _e = layoutSinglelineText(text, {\n    alignment: TextAlignment.Left,\n    fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n    font: font,\n    bounds: bounds\n  }),\n      line = _e.line,\n      fontSize = _e.fontSize; // Update font size and color\n\n\n  var textColor = (_c = widgetColor !== null && widgetColor !== void 0 ? widgetColor : fieldColor) !== null && _c !== void 0 ? _c : black;\n\n  if (widgetColor || widgetFontSize !== undefined) {\n    updateDefaultAppearance(widget, textColor, font, fontSize);\n  } else {\n    updateDefaultAppearance(dropdown.acroField, textColor, font, fontSize);\n  }\n\n  var options = {\n    x: 0 + borderWidth / 2,\n    y: 0 + borderWidth / 2,\n    width: width - borderWidth,\n    height: height - borderWidth,\n    borderWidth: borderWidth !== null && borderWidth !== void 0 ? borderWidth : 0,\n    borderColor: borderColor,\n    textColor: textColor,\n    font: font.name,\n    fontSize: fontSize,\n    color: normalBackgroundColor,\n    textLines: [line],\n    padding: padding\n  };\n  return __spreadArrays(rotate, drawTextField(options));\n};\nexport var defaultOptionListAppearanceProvider = function (optionList, widget, font) {\n  var _a, _b; // The `/DA` entry can be at the widget or field level - so we handle both\n\n\n  var widgetColor = getDefaultColor(widget);\n  var fieldColor = getDefaultColor(optionList.acroField);\n  var widgetFontSize = getDefaultFontSize(widget);\n  var fieldFontSize = getDefaultFontSize(optionList.acroField);\n  var rectangle = widget.getRectangle();\n  var ap = widget.getAppearanceCharacteristics();\n  var bs = widget.getBorderStyle();\n  var borderWidth = (_a = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _a !== void 0 ? _a : 0;\n  var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n\n  var _c = adjustDimsForRotation(rectangle, rotation),\n      width = _c.width,\n      height = _c.height;\n\n  var rotate = rotateInPlace(__assign(__assign({}, rectangle), {\n    rotation: rotation\n  }));\n  var black = rgb(0, 0, 0);\n  var borderColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBorderColor());\n  var normalBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor());\n  var options = optionList.getOptions();\n  var selected = optionList.getSelected();\n  if (optionList.isSorted()) options.sort();\n  var text = '';\n\n  for (var idx = 0, len = options.length; idx < len; idx++) {\n    text += options[idx];\n    if (idx < len - 1) text += '\\n';\n  }\n\n  var padding = 1;\n  var bounds = {\n    x: borderWidth + padding,\n    y: borderWidth + padding,\n    width: width - (borderWidth + padding) * 2,\n    height: height - (borderWidth + padding) * 2\n  };\n\n  var _d = layoutMultilineText(text, {\n    alignment: TextAlignment.Left,\n    fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n    font: font,\n    bounds: bounds\n  }),\n      lines = _d.lines,\n      fontSize = _d.fontSize,\n      lineHeight = _d.lineHeight;\n\n  var selectedLines = [];\n\n  for (var idx = 0, len = lines.length; idx < len; idx++) {\n    var line = lines[idx];\n    if (selected.includes(line.text)) selectedLines.push(idx);\n  }\n\n  var blue = rgb(153 / 255, 193 / 255, 218 / 255); // Update font size and color\n\n  var textColor = (_b = widgetColor !== null && widgetColor !== void 0 ? widgetColor : fieldColor) !== null && _b !== void 0 ? _b : black;\n\n  if (widgetColor || widgetFontSize !== undefined) {\n    updateDefaultAppearance(widget, textColor, font, fontSize);\n  } else {\n    updateDefaultAppearance(optionList.acroField, textColor, font, fontSize);\n  }\n\n  return __spreadArrays(rotate, drawOptionList({\n    x: 0 + borderWidth / 2,\n    y: 0 + borderWidth / 2,\n    width: width - borderWidth,\n    height: height - borderWidth,\n    borderWidth: borderWidth !== null && borderWidth !== void 0 ? borderWidth : 0,\n    borderColor: borderColor,\n    textColor: textColor,\n    font: font.name,\n    fontSize: fontSize,\n    color: normalBackgroundColor,\n    textLines: lines,\n    lineHeight: lineHeight,\n    selectedColor: blue,\n    selectedLines: selectedLines,\n    padding: padding\n  }));\n};","map":{"version":3,"sources":["../../../src/api/form/appearances.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign, __spreadArrays } from \"tslib\";\nimport { drawCheckBox, rotateInPlace, drawRadioButton, drawButton, drawTextField, drawOptionList, } from \"../operations\";\nimport { rgb, componentsToColor, setFillingColor, grayscale, cmyk, } from \"../colors\";\nimport { reduceRotation, adjustDimsForRotation } from \"../rotations\";\nimport { layoutMultilineText, layoutCombedText, layoutSinglelineText, } from \"../text/layout\";\nimport { TextAlignment } from \"../text/alignment\";\nimport { setFontAndSize } from \"../operators\";\nimport { findLastMatch } from \"../../utils\";\n/********************* Appearance Provider Functions **************************/\nexport var normalizeAppearance = function (appearance) {\n    if ('normal' in appearance)\n        return appearance;\n    return { normal: appearance };\n};\n// Examples:\n//   `/Helv 12 Tf` -> ['/Helv 12 Tf', 'Helv', '12']\n//   `/HeBo 8.00 Tf` -> ['/HeBo 8 Tf', 'HeBo', '8.00']\nvar tfRegex = /\\/([^\\0\\t\\n\\f\\r\\ ]+)[\\0\\t\\n\\f\\r\\ ]+(\\d*\\.\\d+|\\d+)[\\0\\t\\n\\f\\r\\ ]+Tf/;\nvar getDefaultFontSize = function (field) {\n    var _a, _b;\n    var da = (_a = field.getDefaultAppearance()) !== null && _a !== void 0 ? _a : '';\n    var daMatch = (_b = findLastMatch(da, tfRegex).match) !== null && _b !== void 0 ? _b : [];\n    var defaultFontSize = Number(daMatch[2]);\n    return isFinite(defaultFontSize) ? defaultFontSize : undefined;\n};\n// Examples:\n//   `0.3 g` -> ['0.3', 'g']\n//   `0.3 1 .3 rg` -> ['0.3', '1', '.3', 'rg']\n//   `0.3 1 .3 0 k` -> ['0.3', '1', '.3', '0', 'k']\nvar colorRegex = /(\\d*\\.\\d+|\\d+)[\\0\\t\\n\\f\\r\\ ]*(\\d*\\.\\d+|\\d+)?[\\0\\t\\n\\f\\r\\ ]*(\\d*\\.\\d+|\\d+)?[\\0\\t\\n\\f\\r\\ ]*(\\d*\\.\\d+|\\d+)?[\\0\\t\\n\\f\\r\\ ]+(g|rg|k)/;\nvar getDefaultColor = function (field) {\n    var _a;\n    var da = (_a = field.getDefaultAppearance()) !== null && _a !== void 0 ? _a : '';\n    var daMatch = findLastMatch(da, colorRegex).match;\n    var _b = daMatch !== null && daMatch !== void 0 ? daMatch : [], c1 = _b[1], c2 = _b[2], c3 = _b[3], c4 = _b[4], colorSpace = _b[5];\n    if (colorSpace === 'g' && c1) {\n        return grayscale(Number(c1));\n    }\n    if (colorSpace === 'rg' && c1 && c2 && c3) {\n        return rgb(Number(c1), Number(c2), Number(c3));\n    }\n    if (colorSpace === 'k' && c1 && c2 && c3 && c4) {\n        return cmyk(Number(c1), Number(c2), Number(c3), Number(c4));\n    }\n    return undefined;\n};\nvar updateDefaultAppearance = function (field, color, font, fontSize) {\n    var _a;\n    if (fontSize === void 0) { fontSize = 0; }\n    var da = [\n        setFillingColor(color).toString(),\n        setFontAndSize((_a = font === null || font === void 0 ? void 0 : font.name) !== null && _a !== void 0 ? _a : 'dummy__noop', fontSize).toString(),\n    ].join('\\n');\n    field.setDefaultAppearance(da);\n};\nexport var defaultCheckBoxAppearanceProvider = function (checkBox, widget) {\n    var _a, _b, _c;\n    // The `/DA` entry can be at the widget or field level - so we handle both\n    var widgetColor = getDefaultColor(widget);\n    var fieldColor = getDefaultColor(checkBox.acroField);\n    var rectangle = widget.getRectangle();\n    var ap = widget.getAppearanceCharacteristics();\n    var bs = widget.getBorderStyle();\n    var borderWidth = (_a = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _a !== void 0 ? _a : 0;\n    var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n    var _d = adjustDimsForRotation(rectangle, rotation), width = _d.width, height = _d.height;\n    var rotate = rotateInPlace(__assign(__assign({}, rectangle), { rotation: rotation }));\n    var black = rgb(0, 0, 0);\n    var borderColor = (_b = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBorderColor())) !== null && _b !== void 0 ? _b : black;\n    var normalBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor());\n    var downBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor(), 0.8);\n    // Update color\n    var textColor = (_c = widgetColor !== null && widgetColor !== void 0 ? widgetColor : fieldColor) !== null && _c !== void 0 ? _c : black;\n    if (widgetColor) {\n        updateDefaultAppearance(widget, textColor);\n    }\n    else {\n        updateDefaultAppearance(checkBox.acroField, textColor);\n    }\n    var options = {\n        x: 0 + borderWidth / 2,\n        y: 0 + borderWidth / 2,\n        width: width - borderWidth,\n        height: height - borderWidth,\n        thickness: 1.5,\n        borderWidth: borderWidth,\n        borderColor: borderColor,\n        markColor: textColor,\n    };\n    return {\n        normal: {\n            on: __spreadArrays(rotate, drawCheckBox(__assign(__assign({}, options), { color: normalBackgroundColor, filled: true }))),\n            off: __spreadArrays(rotate, drawCheckBox(__assign(__assign({}, options), { color: normalBackgroundColor, filled: false }))),\n        },\n        down: {\n            on: __spreadArrays(rotate, drawCheckBox(__assign(__assign({}, options), { color: downBackgroundColor, filled: true }))),\n            off: __spreadArrays(rotate, drawCheckBox(__assign(__assign({}, options), { color: downBackgroundColor, filled: false }))),\n        },\n    };\n};\nexport var defaultRadioGroupAppearanceProvider = function (radioGroup, widget) {\n    var _a, _b, _c;\n    // The `/DA` entry can be at the widget or field level - so we handle both\n    var widgetColor = getDefaultColor(widget);\n    var fieldColor = getDefaultColor(radioGroup.acroField);\n    var rectangle = widget.getRectangle();\n    var ap = widget.getAppearanceCharacteristics();\n    var bs = widget.getBorderStyle();\n    var borderWidth = (_a = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _a !== void 0 ? _a : 0;\n    var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n    var _d = adjustDimsForRotation(rectangle, rotation), width = _d.width, height = _d.height;\n    var rotate = rotateInPlace(__assign(__assign({}, rectangle), { rotation: rotation }));\n    var black = rgb(0, 0, 0);\n    var borderColor = (_b = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBorderColor())) !== null && _b !== void 0 ? _b : black;\n    var normalBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor());\n    var downBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor(), 0.8);\n    // Update color\n    var textColor = (_c = widgetColor !== null && widgetColor !== void 0 ? widgetColor : fieldColor) !== null && _c !== void 0 ? _c : black;\n    if (widgetColor) {\n        updateDefaultAppearance(widget, textColor);\n    }\n    else {\n        updateDefaultAppearance(radioGroup.acroField, textColor);\n    }\n    var options = {\n        x: width / 2,\n        y: height / 2,\n        width: width - borderWidth,\n        height: height - borderWidth,\n        borderWidth: borderWidth,\n        borderColor: borderColor,\n        dotColor: textColor,\n    };\n    return {\n        normal: {\n            on: __spreadArrays(rotate, drawRadioButton(__assign(__assign({}, options), { color: normalBackgroundColor, filled: true }))),\n            off: __spreadArrays(rotate, drawRadioButton(__assign(__assign({}, options), { color: normalBackgroundColor, filled: false }))),\n        },\n        down: {\n            on: __spreadArrays(rotate, drawRadioButton(__assign(__assign({}, options), { color: downBackgroundColor, filled: true }))),\n            off: __spreadArrays(rotate, drawRadioButton(__assign(__assign({}, options), { color: downBackgroundColor, filled: false }))),\n        },\n    };\n};\nexport var defaultButtonAppearanceProvider = function (button, widget, font) {\n    var _a, _b, _c, _d, _e;\n    // The `/DA` entry can be at the widget or field level - so we handle both\n    var widgetColor = getDefaultColor(widget);\n    var fieldColor = getDefaultColor(button.acroField);\n    var widgetFontSize = getDefaultFontSize(widget);\n    var fieldFontSize = getDefaultFontSize(button.acroField);\n    var rectangle = widget.getRectangle();\n    var ap = widget.getAppearanceCharacteristics();\n    var bs = widget.getBorderStyle();\n    var captions = ap === null || ap === void 0 ? void 0 : ap.getCaptions();\n    var normalText = (_a = captions === null || captions === void 0 ? void 0 : captions.normal) !== null && _a !== void 0 ? _a : '';\n    var downText = (_c = (_b = captions === null || captions === void 0 ? void 0 : captions.down) !== null && _b !== void 0 ? _b : normalText) !== null && _c !== void 0 ? _c : '';\n    var borderWidth = (_d = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _d !== void 0 ? _d : 0;\n    var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n    var _f = adjustDimsForRotation(rectangle, rotation), width = _f.width, height = _f.height;\n    var rotate = rotateInPlace(__assign(__assign({}, rectangle), { rotation: rotation }));\n    var black = rgb(0, 0, 0);\n    var borderColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBorderColor());\n    var normalBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor());\n    var downBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor(), 0.8);\n    var bounds = {\n        x: borderWidth,\n        y: borderWidth,\n        width: width - borderWidth * 2,\n        height: height - borderWidth * 2,\n    };\n    var normalLayout = layoutSinglelineText(normalText, {\n        alignment: TextAlignment.Center,\n        fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n        font: font,\n        bounds: bounds,\n    });\n    var downLayout = layoutSinglelineText(downText, {\n        alignment: TextAlignment.Center,\n        fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n        font: font,\n        bounds: bounds,\n    });\n    // Update font size and color\n    var fontSize = Math.min(normalLayout.fontSize, downLayout.fontSize);\n    var textColor = (_e = widgetColor !== null && widgetColor !== void 0 ? widgetColor : fieldColor) !== null && _e !== void 0 ? _e : black;\n    if (widgetColor || widgetFontSize !== undefined) {\n        updateDefaultAppearance(widget, textColor, font, fontSize);\n    }\n    else {\n        updateDefaultAppearance(button.acroField, textColor, font, fontSize);\n    }\n    var options = {\n        x: 0 + borderWidth / 2,\n        y: 0 + borderWidth / 2,\n        width: width - borderWidth,\n        height: height - borderWidth,\n        borderWidth: borderWidth,\n        borderColor: borderColor,\n        textColor: textColor,\n        font: font.name,\n        fontSize: fontSize,\n    };\n    return {\n        normal: __spreadArrays(rotate, drawButton(__assign(__assign({}, options), { color: normalBackgroundColor, textLines: [normalLayout.line] }))),\n        down: __spreadArrays(rotate, drawButton(__assign(__assign({}, options), { color: downBackgroundColor, textLines: [downLayout.line] }))),\n    };\n};\nexport var defaultTextFieldAppearanceProvider = function (textField, widget, font) {\n    var _a, _b, _c, _d;\n    // The `/DA` entry can be at the widget or field level - so we handle both\n    var widgetColor = getDefaultColor(widget);\n    var fieldColor = getDefaultColor(textField.acroField);\n    var widgetFontSize = getDefaultFontSize(widget);\n    var fieldFontSize = getDefaultFontSize(textField.acroField);\n    var rectangle = widget.getRectangle();\n    var ap = widget.getAppearanceCharacteristics();\n    var bs = widget.getBorderStyle();\n    var text = (_a = textField.getText()) !== null && _a !== void 0 ? _a : '';\n    var borderWidth = (_b = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _b !== void 0 ? _b : 0;\n    var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n    var _e = adjustDimsForRotation(rectangle, rotation), width = _e.width, height = _e.height;\n    var rotate = rotateInPlace(__assign(__assign({}, rectangle), { rotation: rotation }));\n    var black = rgb(0, 0, 0);\n    var borderColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBorderColor());\n    var normalBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor());\n    var textLines;\n    var fontSize;\n    var padding = textField.isCombed() ? 0 : 1;\n    var bounds = {\n        x: borderWidth + padding,\n        y: borderWidth + padding,\n        width: width - (borderWidth + padding) * 2,\n        height: height - (borderWidth + padding) * 2,\n    };\n    if (textField.isMultiline()) {\n        var layout = layoutMultilineText(text, {\n            alignment: textField.getAlignment(),\n            fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n            font: font,\n            bounds: bounds,\n        });\n        textLines = layout.lines;\n        fontSize = layout.fontSize;\n    }\n    else if (textField.isCombed()) {\n        var layout = layoutCombedText(text, {\n            fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n            font: font,\n            bounds: bounds,\n            cellCount: (_c = textField.getMaxLength()) !== null && _c !== void 0 ? _c : 0,\n        });\n        textLines = layout.cells;\n        fontSize = layout.fontSize;\n    }\n    else {\n        var layout = layoutSinglelineText(text, {\n            alignment: textField.getAlignment(),\n            fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n            font: font,\n            bounds: bounds,\n        });\n        textLines = [layout.line];\n        fontSize = layout.fontSize;\n    }\n    // Update font size and color\n    var textColor = (_d = widgetColor !== null && widgetColor !== void 0 ? widgetColor : fieldColor) !== null && _d !== void 0 ? _d : black;\n    if (widgetColor || widgetFontSize !== undefined) {\n        updateDefaultAppearance(widget, textColor, font, fontSize);\n    }\n    else {\n        updateDefaultAppearance(textField.acroField, textColor, font, fontSize);\n    }\n    var options = {\n        x: 0 + borderWidth / 2,\n        y: 0 + borderWidth / 2,\n        width: width - borderWidth,\n        height: height - borderWidth,\n        borderWidth: borderWidth !== null && borderWidth !== void 0 ? borderWidth : 0,\n        borderColor: borderColor,\n        textColor: textColor,\n        font: font.name,\n        fontSize: fontSize,\n        color: normalBackgroundColor,\n        textLines: textLines,\n        padding: padding,\n    };\n    return __spreadArrays(rotate, drawTextField(options));\n};\nexport var defaultDropdownAppearanceProvider = function (dropdown, widget, font) {\n    var _a, _b, _c;\n    // The `/DA` entry can be at the widget or field level - so we handle both\n    var widgetColor = getDefaultColor(widget);\n    var fieldColor = getDefaultColor(dropdown.acroField);\n    var widgetFontSize = getDefaultFontSize(widget);\n    var fieldFontSize = getDefaultFontSize(dropdown.acroField);\n    var rectangle = widget.getRectangle();\n    var ap = widget.getAppearanceCharacteristics();\n    var bs = widget.getBorderStyle();\n    var text = (_a = dropdown.getSelected()[0]) !== null && _a !== void 0 ? _a : '';\n    var borderWidth = (_b = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _b !== void 0 ? _b : 0;\n    var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n    var _d = adjustDimsForRotation(rectangle, rotation), width = _d.width, height = _d.height;\n    var rotate = rotateInPlace(__assign(__assign({}, rectangle), { rotation: rotation }));\n    var black = rgb(0, 0, 0);\n    var borderColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBorderColor());\n    var normalBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor());\n    var padding = 1;\n    var bounds = {\n        x: borderWidth + padding,\n        y: borderWidth + padding,\n        width: width - (borderWidth + padding) * 2,\n        height: height - (borderWidth + padding) * 2,\n    };\n    var _e = layoutSinglelineText(text, {\n        alignment: TextAlignment.Left,\n        fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n        font: font,\n        bounds: bounds,\n    }), line = _e.line, fontSize = _e.fontSize;\n    // Update font size and color\n    var textColor = (_c = widgetColor !== null && widgetColor !== void 0 ? widgetColor : fieldColor) !== null && _c !== void 0 ? _c : black;\n    if (widgetColor || widgetFontSize !== undefined) {\n        updateDefaultAppearance(widget, textColor, font, fontSize);\n    }\n    else {\n        updateDefaultAppearance(dropdown.acroField, textColor, font, fontSize);\n    }\n    var options = {\n        x: 0 + borderWidth / 2,\n        y: 0 + borderWidth / 2,\n        width: width - borderWidth,\n        height: height - borderWidth,\n        borderWidth: borderWidth !== null && borderWidth !== void 0 ? borderWidth : 0,\n        borderColor: borderColor,\n        textColor: textColor,\n        font: font.name,\n        fontSize: fontSize,\n        color: normalBackgroundColor,\n        textLines: [line],\n        padding: padding,\n    };\n    return __spreadArrays(rotate, drawTextField(options));\n};\nexport var defaultOptionListAppearanceProvider = function (optionList, widget, font) {\n    var _a, _b;\n    // The `/DA` entry can be at the widget or field level - so we handle both\n    var widgetColor = getDefaultColor(widget);\n    var fieldColor = getDefaultColor(optionList.acroField);\n    var widgetFontSize = getDefaultFontSize(widget);\n    var fieldFontSize = getDefaultFontSize(optionList.acroField);\n    var rectangle = widget.getRectangle();\n    var ap = widget.getAppearanceCharacteristics();\n    var bs = widget.getBorderStyle();\n    var borderWidth = (_a = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _a !== void 0 ? _a : 0;\n    var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n    var _c = adjustDimsForRotation(rectangle, rotation), width = _c.width, height = _c.height;\n    var rotate = rotateInPlace(__assign(__assign({}, rectangle), { rotation: rotation }));\n    var black = rgb(0, 0, 0);\n    var borderColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBorderColor());\n    var normalBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor());\n    var options = optionList.getOptions();\n    var selected = optionList.getSelected();\n    if (optionList.isSorted())\n        options.sort();\n    var text = '';\n    for (var idx = 0, len = options.length; idx < len; idx++) {\n        text += options[idx];\n        if (idx < len - 1)\n            text += '\\n';\n    }\n    var padding = 1;\n    var bounds = {\n        x: borderWidth + padding,\n        y: borderWidth + padding,\n        width: width - (borderWidth + padding) * 2,\n        height: height - (borderWidth + padding) * 2,\n    };\n    var _d = layoutMultilineText(text, {\n        alignment: TextAlignment.Left,\n        fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n        font: font,\n        bounds: bounds,\n    }), lines = _d.lines, fontSize = _d.fontSize, lineHeight = _d.lineHeight;\n    var selectedLines = [];\n    for (var idx = 0, len = lines.length; idx < len; idx++) {\n        var line = lines[idx];\n        if (selected.includes(line.text))\n            selectedLines.push(idx);\n    }\n    var blue = rgb(153 / 255, 193 / 255, 218 / 255);\n    // Update font size and color\n    var textColor = (_b = widgetColor !== null && widgetColor !== void 0 ? widgetColor : fieldColor) !== null && _b !== void 0 ? _b : black;\n    if (widgetColor || widgetFontSize !== undefined) {\n        updateDefaultAppearance(widget, textColor, font, fontSize);\n    }\n    else {\n        updateDefaultAppearance(optionList.acroField, textColor, font, fontSize);\n    }\n    return __spreadArrays(rotate, drawOptionList({\n        x: 0 + borderWidth / 2,\n        y: 0 + borderWidth / 2,\n        width: width - borderWidth,\n        height: height - borderWidth,\n        borderWidth: borderWidth !== null && borderWidth !== void 0 ? borderWidth : 0,\n        borderColor: borderColor,\n        textColor: textColor,\n        font: font.name,\n        fontSize: fontSize,\n        color: normalBackgroundColor,\n        textLines: lines,\n        lineHeight: lineHeight,\n        selectedColor: blue,\n        selectedLines: selectedLines,\n        padding: padding,\n    }));\n};\n//# sourceMappingURL=appearances.js.map"]},"metadata":{},"sourceType":"module"}