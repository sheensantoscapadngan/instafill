{"ast":null,"code":"import { __extends, __spreadArrays } from \"tslib\";\nimport PDFNull from \"./PDFNull\";\nimport PDFObject from \"./PDFObject\";\nimport CharCodes from \"../syntax/CharCodes\";\n\nvar PDFDict =\n/** @class */\nfunction (_super) {\n  __extends(PDFDict, _super);\n\n  function PDFDict(map, context) {\n    var _this = _super.call(this) || this;\n\n    _this.dict = map;\n    _this.context = context;\n    return _this;\n  }\n\n  PDFDict.prototype.keys = function () {\n    return Array.from(this.dict.keys());\n  };\n\n  PDFDict.prototype.values = function () {\n    return Array.from(this.dict.values());\n  };\n\n  PDFDict.prototype.entries = function () {\n    return Array.from(this.dict.entries());\n  };\n\n  PDFDict.prototype.set = function (key, value) {\n    this.dict.set(key, value);\n  };\n\n  PDFDict.prototype.get = function (key, // TODO: `preservePDFNull` is for backwards compatibility. Should be\n  // removed in next breaking API change.\n  preservePDFNull) {\n    if (preservePDFNull === void 0) {\n      preservePDFNull = false;\n    }\n\n    var value = this.dict.get(key);\n    if (value === PDFNull && !preservePDFNull) return undefined;\n    return value;\n  };\n\n  PDFDict.prototype.has = function (key) {\n    var value = this.dict.get(key);\n    return value !== undefined && value !== PDFNull;\n  };\n\n  PDFDict.prototype.lookupMaybe = function (key) {\n    var _a;\n\n    var types = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      types[_i - 1] = arguments[_i];\n    } // TODO: `preservePDFNull` is for backwards compatibility. Should be\n    // removed in next breaking API change.\n\n\n    var preservePDFNull = types.includes(PDFNull);\n\n    var value = (_a = this.context).lookupMaybe.apply(_a, __spreadArrays([this.get(key, preservePDFNull)], types));\n\n    if (value === PDFNull && !preservePDFNull) return undefined;\n    return value;\n  };\n\n  PDFDict.prototype.lookup = function (key) {\n    var _a;\n\n    var types = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      types[_i - 1] = arguments[_i];\n    } // TODO: `preservePDFNull` is for backwards compatibility. Should be\n    // removed in next breaking API change.\n\n\n    var preservePDFNull = types.includes(PDFNull);\n\n    var value = (_a = this.context).lookup.apply(_a, __spreadArrays([this.get(key, preservePDFNull)], types));\n\n    if (value === PDFNull && !preservePDFNull) return undefined;\n    return value;\n  };\n\n  PDFDict.prototype.delete = function (key) {\n    return this.dict.delete(key);\n  };\n\n  PDFDict.prototype.asMap = function () {\n    return new Map(this.dict);\n  };\n\n  PDFDict.prototype.clone = function (context) {\n    var clone = PDFDict.withContext(context || this.context);\n    var entries = this.entries();\n\n    for (var idx = 0, len = entries.length; idx < len; idx++) {\n      var _a = entries[idx],\n          key = _a[0],\n          value = _a[1];\n      clone.set(key, value);\n    }\n\n    return clone;\n  };\n\n  PDFDict.prototype.toString = function () {\n    var dictString = '<<\\n';\n    var entries = this.entries();\n\n    for (var idx = 0, len = entries.length; idx < len; idx++) {\n      var _a = entries[idx],\n          key = _a[0],\n          value = _a[1];\n      dictString += key.toString() + ' ' + value.toString() + '\\n';\n    }\n\n    dictString += '>>';\n    return dictString;\n  };\n\n  PDFDict.prototype.sizeInBytes = function () {\n    var size = 5;\n    var entries = this.entries();\n\n    for (var idx = 0, len = entries.length; idx < len; idx++) {\n      var _a = entries[idx],\n          key = _a[0],\n          value = _a[1];\n      size += key.sizeInBytes() + value.sizeInBytes() + 2;\n    }\n\n    return size;\n  };\n\n  PDFDict.prototype.copyBytesInto = function (buffer, offset) {\n    var initialOffset = offset;\n    buffer[offset++] = CharCodes.LessThan;\n    buffer[offset++] = CharCodes.LessThan;\n    buffer[offset++] = CharCodes.Newline;\n    var entries = this.entries();\n\n    for (var idx = 0, len = entries.length; idx < len; idx++) {\n      var _a = entries[idx],\n          key = _a[0],\n          value = _a[1];\n      offset += key.copyBytesInto(buffer, offset);\n      buffer[offset++] = CharCodes.Space;\n      offset += value.copyBytesInto(buffer, offset);\n      buffer[offset++] = CharCodes.Newline;\n    }\n\n    buffer[offset++] = CharCodes.GreaterThan;\n    buffer[offset++] = CharCodes.GreaterThan;\n    return offset - initialOffset;\n  };\n\n  PDFDict.withContext = function (context) {\n    return new PDFDict(new Map(), context);\n  };\n\n  PDFDict.fromMapWithContext = function (map, context) {\n    return new PDFDict(map, context);\n  };\n\n  return PDFDict;\n}(PDFObject);\n\nexport default PDFDict;","map":{"version":3,"sources":["../../../src/core/objects/PDFDict.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends, __spreadArrays } from \"tslib\";\nimport PDFNull from \"./PDFNull\";\nimport PDFObject from \"./PDFObject\";\nimport CharCodes from \"../syntax/CharCodes\";\nvar PDFDict = /** @class */ (function (_super) {\n    __extends(PDFDict, _super);\n    function PDFDict(map, context) {\n        var _this = _super.call(this) || this;\n        _this.dict = map;\n        _this.context = context;\n        return _this;\n    }\n    PDFDict.prototype.keys = function () {\n        return Array.from(this.dict.keys());\n    };\n    PDFDict.prototype.values = function () {\n        return Array.from(this.dict.values());\n    };\n    PDFDict.prototype.entries = function () {\n        return Array.from(this.dict.entries());\n    };\n    PDFDict.prototype.set = function (key, value) {\n        this.dict.set(key, value);\n    };\n    PDFDict.prototype.get = function (key, \n    // TODO: `preservePDFNull` is for backwards compatibility. Should be\n    // removed in next breaking API change.\n    preservePDFNull) {\n        if (preservePDFNull === void 0) { preservePDFNull = false; }\n        var value = this.dict.get(key);\n        if (value === PDFNull && !preservePDFNull)\n            return undefined;\n        return value;\n    };\n    PDFDict.prototype.has = function (key) {\n        var value = this.dict.get(key);\n        return value !== undefined && value !== PDFNull;\n    };\n    PDFDict.prototype.lookupMaybe = function (key) {\n        var _a;\n        var types = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            types[_i - 1] = arguments[_i];\n        }\n        // TODO: `preservePDFNull` is for backwards compatibility. Should be\n        // removed in next breaking API change.\n        var preservePDFNull = types.includes(PDFNull);\n        var value = (_a = this.context).lookupMaybe.apply(_a, __spreadArrays([this.get(key, preservePDFNull)], types));\n        if (value === PDFNull && !preservePDFNull)\n            return undefined;\n        return value;\n    };\n    PDFDict.prototype.lookup = function (key) {\n        var _a;\n        var types = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            types[_i - 1] = arguments[_i];\n        }\n        // TODO: `preservePDFNull` is for backwards compatibility. Should be\n        // removed in next breaking API change.\n        var preservePDFNull = types.includes(PDFNull);\n        var value = (_a = this.context).lookup.apply(_a, __spreadArrays([this.get(key, preservePDFNull)], types));\n        if (value === PDFNull && !preservePDFNull)\n            return undefined;\n        return value;\n    };\n    PDFDict.prototype.delete = function (key) {\n        return this.dict.delete(key);\n    };\n    PDFDict.prototype.asMap = function () {\n        return new Map(this.dict);\n    };\n    PDFDict.prototype.clone = function (context) {\n        var clone = PDFDict.withContext(context || this.context);\n        var entries = this.entries();\n        for (var idx = 0, len = entries.length; idx < len; idx++) {\n            var _a = entries[idx], key = _a[0], value = _a[1];\n            clone.set(key, value);\n        }\n        return clone;\n    };\n    PDFDict.prototype.toString = function () {\n        var dictString = '<<\\n';\n        var entries = this.entries();\n        for (var idx = 0, len = entries.length; idx < len; idx++) {\n            var _a = entries[idx], key = _a[0], value = _a[1];\n            dictString += key.toString() + ' ' + value.toString() + '\\n';\n        }\n        dictString += '>>';\n        return dictString;\n    };\n    PDFDict.prototype.sizeInBytes = function () {\n        var size = 5;\n        var entries = this.entries();\n        for (var idx = 0, len = entries.length; idx < len; idx++) {\n            var _a = entries[idx], key = _a[0], value = _a[1];\n            size += key.sizeInBytes() + value.sizeInBytes() + 2;\n        }\n        return size;\n    };\n    PDFDict.prototype.copyBytesInto = function (buffer, offset) {\n        var initialOffset = offset;\n        buffer[offset++] = CharCodes.LessThan;\n        buffer[offset++] = CharCodes.LessThan;\n        buffer[offset++] = CharCodes.Newline;\n        var entries = this.entries();\n        for (var idx = 0, len = entries.length; idx < len; idx++) {\n            var _a = entries[idx], key = _a[0], value = _a[1];\n            offset += key.copyBytesInto(buffer, offset);\n            buffer[offset++] = CharCodes.Space;\n            offset += value.copyBytesInto(buffer, offset);\n            buffer[offset++] = CharCodes.Newline;\n        }\n        buffer[offset++] = CharCodes.GreaterThan;\n        buffer[offset++] = CharCodes.GreaterThan;\n        return offset - initialOffset;\n    };\n    PDFDict.withContext = function (context) { return new PDFDict(new Map(), context); };\n    PDFDict.fromMapWithContext = function (map, context) {\n        return new PDFDict(map, context);\n    };\n    return PDFDict;\n}(PDFObject));\nexport default PDFDict;\n//# sourceMappingURL=PDFDict.js.map"]},"metadata":{},"sourceType":"module"}