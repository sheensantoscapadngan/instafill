{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFPage from \"../PDFPage\";\nimport PDFField, { assertFieldAppearanceOptions } from \"./PDFField\";\nimport { normalizeAppearance, defaultRadioGroupAppearanceProvider } from \"./appearances\";\nimport { rgb } from \"../colors\";\nimport { degrees } from \"../rotations\";\nimport { PDFName, PDFHexString, PDFDict, PDFAcroRadioButton, AcroButtonFlags } from \"../../core\";\nimport { assertIs, assertOrUndefined, assertIsOneOf } from \"../../utils\";\n/**\r\n * Represents a radio group field of a [[PDFForm]].\r\n *\r\n * [[PDFRadioGroup]] fields are collections of radio buttons. The purpose of a\r\n * radio group is to enable users to select one option from a set of mutually\r\n * exclusive choices. Each choice in a radio group is represented by a radio\r\n * button. Radio buttons each have two states: `on` and `off`. At most one\r\n * radio button in a group may be in the `on` state at any time. Users can\r\n * click on a radio button to select it (and thereby automatically deselect any\r\n * other radio button that might have already been selected). Some radio\r\n * groups allow users to toggle a selected radio button `off` by clicking on\r\n * it (see [[PDFRadioGroup.isOffToggleable]]).\r\n *\r\n * Note that some radio groups allow multiple radio buttons to be in the `on`\r\n * state at the same type **if** they represent the same underlying value (see\r\n * [[PDFRadioGroup.isMutuallyExclusive]]).\r\n */\n\nvar PDFRadioGroup =\n/** @class */\nfunction (_super) {\n  __extends(PDFRadioGroup, _super);\n\n  function PDFRadioGroup(acroRadioButton, ref, doc) {\n    var _this = _super.call(this, acroRadioButton, ref, doc) || this;\n\n    assertIs(acroRadioButton, 'acroRadioButton', [[PDFAcroRadioButton, 'PDFAcroRadioButton']]);\n    _this.acroField = acroRadioButton;\n    return _this;\n  }\n  /**\r\n   * Get the list of available options for this radio group. Each option is\r\n   * represented by a radio button. These radio buttons are displayed at\r\n   * various locations in the document, potentially on different pages (though\r\n   * typically they are stacked horizontally or vertically on the same page).\r\n   * For example:\r\n   * ```js\r\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n   * const options = radioGroup.getOptions()\r\n   * console.log('Radio Group options:', options)\r\n   * ```\r\n   * @returns The options for this radio group.\r\n   */\n\n\n  PDFRadioGroup.prototype.getOptions = function () {\n    var exportValues = this.acroField.getExportValues();\n\n    if (exportValues) {\n      var exportOptions = new Array(exportValues.length);\n\n      for (var idx = 0, len = exportValues.length; idx < len; idx++) {\n        exportOptions[idx] = exportValues[idx].decodeText();\n      }\n\n      return exportOptions;\n    }\n\n    var onValues = this.acroField.getOnValues();\n    var onOptions = new Array(onValues.length);\n\n    for (var idx = 0, len = onOptions.length; idx < len; idx++) {\n      onOptions[idx] = onValues[idx].decodeText();\n    }\n\n    return onOptions;\n  };\n  /**\r\n   * Get the selected option for this radio group. The selected option is\r\n   * represented by the radio button in this group that is turned on. At most\r\n   * one radio button in a group can be selected. If no buttons in this group\r\n   * are selected, `undefined` is returned.\r\n   * For example:\r\n   * ```js\r\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n   * const selected = radioGroup.getSelected()\r\n   * console.log('Selected radio button:', selected)\r\n   * ```\r\n   * @returns The selected option for this radio group.\r\n   */\n\n\n  PDFRadioGroup.prototype.getSelected = function () {\n    var value = this.acroField.getValue();\n    if (value === PDFName.of('Off')) return undefined;\n    var exportValues = this.acroField.getExportValues();\n\n    if (exportValues) {\n      var onValues = this.acroField.getOnValues();\n\n      for (var idx = 0, len = onValues.length; idx < len; idx++) {\n        if (onValues[idx] === value) return exportValues[idx].decodeText();\n      }\n    }\n\n    return value.decodeText();\n  }; // // TODO: Figure out why this seems to crash Acrobat. Maybe it's because we\n  // //       aren't removing the widget reference from the page's Annots?\n  // removeOption(option: string) {\n  //   assertIs(option, 'option', ['string']);\n  //   // TODO: Assert is valid `option`!\n  //   const onValues = this.acroField.getOnValues();\n  //   const exportValues = this.acroField.getExportValues();\n  //   if (exportValues) {\n  //     for (let idx = 0, len = exportValues.length; idx < len; idx++) {\n  //       if (exportValues[idx].decodeText() === option) {\n  //         this.acroField.removeWidget(idx);\n  //         this.acroField.removeExportValue(idx);\n  //       }\n  //     }\n  //   } else {\n  //     for (let idx = 0, len = onValues.length; idx < len; idx++) {\n  //       const value = onValues[idx];\n  //       if (value.decodeText() === option) {\n  //         this.acroField.removeWidget(idx);\n  //         this.acroField.removeExportValue(idx);\n  //       }\n  //     }\n  //   }\n  // }\n\n  /**\r\n   * Select an option for this radio group. This operation is analogous to a\r\n   * human user clicking one of the radio buttons in this group via a PDF\r\n   * reader to toggle it on. This method will update the underlying state of\r\n   * the radio group to indicate which option has been selected. PDF libraries\r\n   * and readers will be able to extract this value from the saved document and\r\n   * determine which option was selected.\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * const radioGroup = form.getRadioGroup('best.superhero.radioGroup')\r\n   * radioGroup.select('One Punch Man')\r\n   * ```\r\n   *\r\n   * This method will mark this radio group as dirty, causing its appearance\r\n   * streams to be updated when either [[PDFDocument.save]] or\r\n   * [[PDFForm.updateFieldAppearances]] is called. The updated appearance\r\n   * streams will display a dot inside the widget of this check box field\r\n   * that represents the selected option.\r\n   *\r\n   * @param option The option to be selected.\r\n   */\n\n\n  PDFRadioGroup.prototype.select = function (option) {\n    assertIs(option, 'option', ['string']);\n    var validOptions = this.getOptions();\n    assertIsOneOf(option, 'option', validOptions);\n    this.markAsDirty();\n    var onValues = this.acroField.getOnValues();\n    var exportValues = this.acroField.getExportValues();\n\n    if (exportValues) {\n      for (var idx = 0, len = exportValues.length; idx < len; idx++) {\n        if (exportValues[idx].decodeText() === option) {\n          this.acroField.setValue(onValues[idx]);\n        }\n      }\n    } else {\n      for (var idx = 0, len = onValues.length; idx < len; idx++) {\n        var value = onValues[idx];\n        if (value.decodeText() === option) this.acroField.setValue(value);\n      }\n    }\n  };\n  /**\r\n   * Clear any selected option for this dropdown. This will result in all\r\n   * radio buttons in this group being toggled off. This method will update\r\n   * the underlying state of the dropdown to indicate that no radio buttons\r\n   * have been selected.\r\n   * For example:\r\n   * ```js\r\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n   * radioGroup.clear()\r\n   * ```\r\n   * This method will mark this radio group as dirty. See\r\n   * [[PDFRadioGroup.select]] for more details about what this means.\r\n   */\n\n\n  PDFRadioGroup.prototype.clear = function () {\n    this.markAsDirty();\n    this.acroField.setValue(PDFName.of('Off'));\n  };\n  /**\r\n   * Returns `true` if users can click on radio buttons in this group to toggle\r\n   * them off. The alternative is that once a user clicks on a radio button\r\n   * to select it, the only way to deselect it is by selecting on another radio\r\n   * button in the group. See [[PDFRadioGroup.enableOffToggling]] and\r\n   * [[PDFRadioGroup.disableOffToggling]]. For example:\r\n   * ```js\r\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n   * if (radioGroup.isOffToggleable()) console.log('Off toggling is enabled')\r\n   * ```\r\n   */\n\n\n  PDFRadioGroup.prototype.isOffToggleable = function () {\n    return !this.acroField.hasFlag(AcroButtonFlags.NoToggleToOff);\n  };\n  /**\r\n   * Allow users to click on selected radio buttons in this group to toggle\r\n   * them off. For example:\r\n   * ```js\r\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n   * radioGroup.enableOffToggling()\r\n   * ```\r\n   * > **NOTE:** This feature is documented in the PDF specification\r\n   * > (Table 226). However, most PDF readers do not respect this option and\r\n   * > prevent users from toggling radio buttons off even when it is enabled.\r\n   * > At the time of this writing (9/6/2020) Mac's Preview software did\r\n   * > respect the option. Adobe Acrobat, Foxit Reader, and Google Chrome did\r\n   * > not.\r\n   */\n\n\n  PDFRadioGroup.prototype.enableOffToggling = function () {\n    this.acroField.setFlagTo(AcroButtonFlags.NoToggleToOff, false);\n  };\n  /**\r\n   * Prevent users from clicking on selected radio buttons in this group to\r\n   * toggle them off. Clicking on a selected radio button will have no effect.\r\n   * The only way to deselect a selected radio button is to click on a\r\n   * different radio button in the group. For example:\r\n   * ```js\r\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n   * radioGroup.disableOffToggling()\r\n   * ```\r\n   */\n\n\n  PDFRadioGroup.prototype.disableOffToggling = function () {\n    this.acroField.setFlagTo(AcroButtonFlags.NoToggleToOff, true);\n  };\n  /**\r\n   * Returns `true` if the radio buttons in this group are mutually exclusive.\r\n   * This means that when the user selects a radio button, only that specific\r\n   * button will be turned on. Even if other radio buttons in the group\r\n   * represent the same value, they will not be enabled. The alternative to\r\n   * this is that clicking a radio button will select that button along with\r\n   * any other radio buttons in the group that share the same value. See\r\n   * [[PDFRadioGroup.enableMutualExclusion]] and\r\n   * [[PDFRadioGroup.disableMutualExclusion]].\r\n   * For example:\r\n   * ```js\r\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n   * if (radioGroup.isMutuallyExclusive()) console.log('Mutual exclusion is enabled')\r\n   * ```\r\n   */\n\n\n  PDFRadioGroup.prototype.isMutuallyExclusive = function () {\n    return !this.acroField.hasFlag(AcroButtonFlags.RadiosInUnison);\n  };\n  /**\r\n   * When the user clicks a radio button in this group it will be selected. In\r\n   * addition, any other radio buttons in this group that share the same\r\n   * underlying value will also be selected. For example:\r\n   * ```js\r\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n   * radioGroup.enableMutualExclusion()\r\n   * ```\r\n   * Note that this option must be enabled prior to adding options to the\r\n   * radio group. It does not currently apply retroactively to existing\r\n   * radio buttons in the group.\r\n   */\n\n\n  PDFRadioGroup.prototype.enableMutualExclusion = function () {\n    this.acroField.setFlagTo(AcroButtonFlags.RadiosInUnison, false);\n  };\n  /**\r\n   * When the user clicks a radio button in this group only it will be selected.\r\n   * No other radio buttons in the group will be selected, even if they share\r\n   * the same underlying value. For example:\r\n   * ```js\r\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n   * radioGroup.disableMutualExclusion()\r\n   * ```\r\n   * Note that this option must be disabled prior to adding options to the\r\n   * radio group. It does not currently apply retroactively to existing\r\n   * radio buttons in the group.\r\n   */\n\n\n  PDFRadioGroup.prototype.disableMutualExclusion = function () {\n    this.acroField.setFlagTo(AcroButtonFlags.RadiosInUnison, true);\n  };\n  /**\r\n   * Add a new radio button to this group on the specified page. For example:\r\n   * ```js\r\n   * const page = pdfDoc.addPage()\r\n   *\r\n   * const form = pdfDoc.getForm()\r\n   * const radioGroup = form.createRadioGroup('best.gundam')\r\n   *\r\n   * const options = {\r\n   *   x: 50,\r\n   *   width: 25,\r\n   *   height: 25,\r\n   *   textColor: rgb(1, 0, 0),\r\n   *   backgroundColor: rgb(0, 1, 0),\r\n   *   borderColor: rgb(0, 0, 1),\r\n   *   borderWidth: 2,\r\n   *   rotate: degrees(90),\r\n   * }\r\n   *\r\n   * radioGroup.addOptionToPage('Exia', page, { ...options, y: 50 })\r\n   * radioGroup.addOptionToPage('Dynames', page, { ...options, y: 110 })\r\n   * ```\r\n   * This will create a new radio button widget for this radio group field.\r\n   * @param option The option that the radio button widget represents.\r\n   * @param page The page to which the radio button widget should be added.\r\n   * @param options The options to be used when adding the radio button widget.\r\n   */\n\n\n  PDFRadioGroup.prototype.addOptionToPage = function (option, page, options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n\n    assertIs(option, 'option', ['string']);\n    assertIs(page, 'page', [[PDFPage, 'PDFPage']]);\n    assertFieldAppearanceOptions(options); // Create a widget for this radio button\n\n    var widget = this.createWidget({\n      x: (_a = options === null || options === void 0 ? void 0 : options.x) !== null && _a !== void 0 ? _a : 0,\n      y: (_b = options === null || options === void 0 ? void 0 : options.y) !== null && _b !== void 0 ? _b : 0,\n      width: (_c = options === null || options === void 0 ? void 0 : options.width) !== null && _c !== void 0 ? _c : 50,\n      height: (_d = options === null || options === void 0 ? void 0 : options.height) !== null && _d !== void 0 ? _d : 50,\n      textColor: (_e = options === null || options === void 0 ? void 0 : options.textColor) !== null && _e !== void 0 ? _e : rgb(0, 0, 0),\n      backgroundColor: (_f = options === null || options === void 0 ? void 0 : options.backgroundColor) !== null && _f !== void 0 ? _f : rgb(1, 1, 1),\n      borderColor: (_g = options === null || options === void 0 ? void 0 : options.borderColor) !== null && _g !== void 0 ? _g : rgb(0, 0, 0),\n      borderWidth: (_h = options === null || options === void 0 ? void 0 : options.borderWidth) !== null && _h !== void 0 ? _h : 1,\n      rotate: (_j = options === null || options === void 0 ? void 0 : options.rotate) !== null && _j !== void 0 ? _j : degrees(0),\n      hidden: options === null || options === void 0 ? void 0 : options.hidden\n    });\n    var widgetRef = this.doc.context.register(widget.dict); // Add widget to this field\n\n    var apStateValue = this.acroField.addWidgetWithOpt(widgetRef, PDFHexString.fromText(option), !this.isMutuallyExclusive()); // Set appearance streams for widget\n\n    widget.setAppearanceState(PDFName.of('Off'));\n    this.updateWidgetAppearance(widget, apStateValue); // Add widget to the given page\n\n    page.node.addAnnot(widgetRef);\n  };\n  /**\r\n   * Returns `true` if any of this group's radio button widgets do not have an\r\n   * appearance stream for their current state. For example:\r\n   * ```js\r\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n   * if (radioGroup.needsAppearancesUpdate()) console.log('Needs update')\r\n   * ```\r\n   * @returns Whether or not this radio group needs an appearance update.\r\n   */\n\n\n  PDFRadioGroup.prototype.needsAppearancesUpdate = function () {\n    var _a;\n\n    var widgets = this.acroField.getWidgets();\n\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var state = widget.getAppearanceState();\n      var normal = (_a = widget.getAppearances()) === null || _a === void 0 ? void 0 : _a.normal;\n      if (!(normal instanceof PDFDict)) return true;\n      if (state && !normal.has(state)) return true;\n    }\n\n    return false;\n  };\n  /**\r\n   * Update the appearance streams for each of this group's radio button widgets\r\n   * using the default appearance provider for radio groups. For example:\r\n   * ```js\r\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n   * radioGroup.defaultUpdateAppearances()\r\n   * ```\r\n   */\n\n\n  PDFRadioGroup.prototype.defaultUpdateAppearances = function () {\n    this.updateAppearances();\n  }; // rg.updateAppearances((field: any, widget: any) => {\n  //   assert(field === rg);\n  //   assert(widget instanceof PDFWidgetAnnotation);\n  //   return { on: [...rectangle, ...circle], off: [...rectangle, ...circle] };\n  // });\n\n  /**\r\n   * Update the appearance streams for each of this group's radio button widgets\r\n   * using the given appearance provider. If no `provider` is passed, the\r\n   * default appearance provider for radio groups will be used. For example:\r\n   * ```js\r\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n   * radioGroup.updateAppearances((field, widget) => {\r\n   *   ...\r\n   *   return {\r\n   *     normal: { on: drawRadioButton(...), off: drawRadioButton(...) },\r\n   *     down: { on: drawRadioButton(...), off: drawRadioButton(...) },\r\n   *   }\r\n   * })\r\n   * ```\r\n   * @param provider Optionally, the appearance provider to be used for\r\n   *                 generating the contents of the appearance streams.\r\n   */\n\n\n  PDFRadioGroup.prototype.updateAppearances = function (provider) {\n    assertOrUndefined(provider, 'provider', [Function]);\n    var widgets = this.acroField.getWidgets();\n\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var onValue = widget.getOnValue();\n      if (!onValue) continue;\n      this.updateWidgetAppearance(widget, onValue, provider);\n    }\n  };\n\n  PDFRadioGroup.prototype.updateWidgetAppearance = function (widget, onValue, provider) {\n    var apProvider = provider !== null && provider !== void 0 ? provider : defaultRadioGroupAppearanceProvider;\n    var appearances = normalizeAppearance(apProvider(this, widget));\n    this.updateOnOffWidgetAppearance(widget, onValue, appearances);\n  };\n  /**\r\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\r\n   * > consider using the [[PDFForm.getOptionList]] method, which will create an\r\n   * > instance of [[PDFOptionList]] for you.\r\n   *\r\n   * Create an instance of [[PDFOptionList]] from an existing acroRadioButton\r\n   * and ref\r\n   *\r\n   * @param acroRadioButton The underlying `PDFAcroRadioButton` for this\r\n   *                        radio group.\r\n   * @param ref The unique reference for this radio group.\r\n   * @param doc The document to which this radio group will belong.\r\n   */\n\n\n  PDFRadioGroup.of = function (acroRadioButton, ref, doc) {\n    return new PDFRadioGroup(acroRadioButton, ref, doc);\n  };\n\n  return PDFRadioGroup;\n}(PDFField);\n\nexport default PDFRadioGroup;","map":{"version":3,"sources":["../../../src/api/form/PDFRadioGroup.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\r\nimport PDFPage from \"../PDFPage\";\r\nimport PDFField, { assertFieldAppearanceOptions, } from \"./PDFField\";\r\nimport { normalizeAppearance, defaultRadioGroupAppearanceProvider, } from \"./appearances\";\r\nimport { rgb } from \"../colors\";\r\nimport { degrees } from \"../rotations\";\r\nimport { PDFName, PDFHexString, PDFDict, PDFAcroRadioButton, AcroButtonFlags, } from \"../../core\";\r\nimport { assertIs, assertOrUndefined, assertIsOneOf } from \"../../utils\";\r\n/**\r\n * Represents a radio group field of a [[PDFForm]].\r\n *\r\n * [[PDFRadioGroup]] fields are collections of radio buttons. The purpose of a\r\n * radio group is to enable users to select one option from a set of mutually\r\n * exclusive choices. Each choice in a radio group is represented by a radio\r\n * button. Radio buttons each have two states: `on` and `off`. At most one\r\n * radio button in a group may be in the `on` state at any time. Users can\r\n * click on a radio button to select it (and thereby automatically deselect any\r\n * other radio button that might have already been selected). Some radio\r\n * groups allow users to toggle a selected radio button `off` by clicking on\r\n * it (see [[PDFRadioGroup.isOffToggleable]]).\r\n *\r\n * Note that some radio groups allow multiple radio buttons to be in the `on`\r\n * state at the same type **if** they represent the same underlying value (see\r\n * [[PDFRadioGroup.isMutuallyExclusive]]).\r\n */\r\nvar PDFRadioGroup = /** @class */ (function (_super) {\r\n    __extends(PDFRadioGroup, _super);\r\n    function PDFRadioGroup(acroRadioButton, ref, doc) {\r\n        var _this = _super.call(this, acroRadioButton, ref, doc) || this;\r\n        assertIs(acroRadioButton, 'acroRadioButton', [\r\n            [PDFAcroRadioButton, 'PDFAcroRadioButton'],\r\n        ]);\r\n        _this.acroField = acroRadioButton;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Get the list of available options for this radio group. Each option is\r\n     * represented by a radio button. These radio buttons are displayed at\r\n     * various locations in the document, potentially on different pages (though\r\n     * typically they are stacked horizontally or vertically on the same page).\r\n     * For example:\r\n     * ```js\r\n     * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n     * const options = radioGroup.getOptions()\r\n     * console.log('Radio Group options:', options)\r\n     * ```\r\n     * @returns The options for this radio group.\r\n     */\r\n    PDFRadioGroup.prototype.getOptions = function () {\r\n        var exportValues = this.acroField.getExportValues();\r\n        if (exportValues) {\r\n            var exportOptions = new Array(exportValues.length);\r\n            for (var idx = 0, len = exportValues.length; idx < len; idx++) {\r\n                exportOptions[idx] = exportValues[idx].decodeText();\r\n            }\r\n            return exportOptions;\r\n        }\r\n        var onValues = this.acroField.getOnValues();\r\n        var onOptions = new Array(onValues.length);\r\n        for (var idx = 0, len = onOptions.length; idx < len; idx++) {\r\n            onOptions[idx] = onValues[idx].decodeText();\r\n        }\r\n        return onOptions;\r\n    };\r\n    /**\r\n     * Get the selected option for this radio group. The selected option is\r\n     * represented by the radio button in this group that is turned on. At most\r\n     * one radio button in a group can be selected. If no buttons in this group\r\n     * are selected, `undefined` is returned.\r\n     * For example:\r\n     * ```js\r\n     * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n     * const selected = radioGroup.getSelected()\r\n     * console.log('Selected radio button:', selected)\r\n     * ```\r\n     * @returns The selected option for this radio group.\r\n     */\r\n    PDFRadioGroup.prototype.getSelected = function () {\r\n        var value = this.acroField.getValue();\r\n        if (value === PDFName.of('Off'))\r\n            return undefined;\r\n        var exportValues = this.acroField.getExportValues();\r\n        if (exportValues) {\r\n            var onValues = this.acroField.getOnValues();\r\n            for (var idx = 0, len = onValues.length; idx < len; idx++) {\r\n                if (onValues[idx] === value)\r\n                    return exportValues[idx].decodeText();\r\n            }\r\n        }\r\n        return value.decodeText();\r\n    };\r\n    // // TODO: Figure out why this seems to crash Acrobat. Maybe it's because we\r\n    // //       aren't removing the widget reference from the page's Annots?\r\n    // removeOption(option: string) {\r\n    //   assertIs(option, 'option', ['string']);\r\n    //   // TODO: Assert is valid `option`!\r\n    //   const onValues = this.acroField.getOnValues();\r\n    //   const exportValues = this.acroField.getExportValues();\r\n    //   if (exportValues) {\r\n    //     for (let idx = 0, len = exportValues.length; idx < len; idx++) {\r\n    //       if (exportValues[idx].decodeText() === option) {\r\n    //         this.acroField.removeWidget(idx);\r\n    //         this.acroField.removeExportValue(idx);\r\n    //       }\r\n    //     }\r\n    //   } else {\r\n    //     for (let idx = 0, len = onValues.length; idx < len; idx++) {\r\n    //       const value = onValues[idx];\r\n    //       if (value.decodeText() === option) {\r\n    //         this.acroField.removeWidget(idx);\r\n    //         this.acroField.removeExportValue(idx);\r\n    //       }\r\n    //     }\r\n    //   }\r\n    // }\r\n    /**\r\n     * Select an option for this radio group. This operation is analogous to a\r\n     * human user clicking one of the radio buttons in this group via a PDF\r\n     * reader to toggle it on. This method will update the underlying state of\r\n     * the radio group to indicate which option has been selected. PDF libraries\r\n     * and readers will be able to extract this value from the saved document and\r\n     * determine which option was selected.\r\n     *\r\n     * For example:\r\n     * ```js\r\n     * const radioGroup = form.getRadioGroup('best.superhero.radioGroup')\r\n     * radioGroup.select('One Punch Man')\r\n     * ```\r\n     *\r\n     * This method will mark this radio group as dirty, causing its appearance\r\n     * streams to be updated when either [[PDFDocument.save]] or\r\n     * [[PDFForm.updateFieldAppearances]] is called. The updated appearance\r\n     * streams will display a dot inside the widget of this check box field\r\n     * that represents the selected option.\r\n     *\r\n     * @param option The option to be selected.\r\n     */\r\n    PDFRadioGroup.prototype.select = function (option) {\r\n        assertIs(option, 'option', ['string']);\r\n        var validOptions = this.getOptions();\r\n        assertIsOneOf(option, 'option', validOptions);\r\n        this.markAsDirty();\r\n        var onValues = this.acroField.getOnValues();\r\n        var exportValues = this.acroField.getExportValues();\r\n        if (exportValues) {\r\n            for (var idx = 0, len = exportValues.length; idx < len; idx++) {\r\n                if (exportValues[idx].decodeText() === option) {\r\n                    this.acroField.setValue(onValues[idx]);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            for (var idx = 0, len = onValues.length; idx < len; idx++) {\r\n                var value = onValues[idx];\r\n                if (value.decodeText() === option)\r\n                    this.acroField.setValue(value);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Clear any selected option for this dropdown. This will result in all\r\n     * radio buttons in this group being toggled off. This method will update\r\n     * the underlying state of the dropdown to indicate that no radio buttons\r\n     * have been selected.\r\n     * For example:\r\n     * ```js\r\n     * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n     * radioGroup.clear()\r\n     * ```\r\n     * This method will mark this radio group as dirty. See\r\n     * [[PDFRadioGroup.select]] for more details about what this means.\r\n     */\r\n    PDFRadioGroup.prototype.clear = function () {\r\n        this.markAsDirty();\r\n        this.acroField.setValue(PDFName.of('Off'));\r\n    };\r\n    /**\r\n     * Returns `true` if users can click on radio buttons in this group to toggle\r\n     * them off. The alternative is that once a user clicks on a radio button\r\n     * to select it, the only way to deselect it is by selecting on another radio\r\n     * button in the group. See [[PDFRadioGroup.enableOffToggling]] and\r\n     * [[PDFRadioGroup.disableOffToggling]]. For example:\r\n     * ```js\r\n     * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n     * if (radioGroup.isOffToggleable()) console.log('Off toggling is enabled')\r\n     * ```\r\n     */\r\n    PDFRadioGroup.prototype.isOffToggleable = function () {\r\n        return !this.acroField.hasFlag(AcroButtonFlags.NoToggleToOff);\r\n    };\r\n    /**\r\n     * Allow users to click on selected radio buttons in this group to toggle\r\n     * them off. For example:\r\n     * ```js\r\n     * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n     * radioGroup.enableOffToggling()\r\n     * ```\r\n     * > **NOTE:** This feature is documented in the PDF specification\r\n     * > (Table 226). However, most PDF readers do not respect this option and\r\n     * > prevent users from toggling radio buttons off even when it is enabled.\r\n     * > At the time of this writing (9/6/2020) Mac's Preview software did\r\n     * > respect the option. Adobe Acrobat, Foxit Reader, and Google Chrome did\r\n     * > not.\r\n     */\r\n    PDFRadioGroup.prototype.enableOffToggling = function () {\r\n        this.acroField.setFlagTo(AcroButtonFlags.NoToggleToOff, false);\r\n    };\r\n    /**\r\n     * Prevent users from clicking on selected radio buttons in this group to\r\n     * toggle them off. Clicking on a selected radio button will have no effect.\r\n     * The only way to deselect a selected radio button is to click on a\r\n     * different radio button in the group. For example:\r\n     * ```js\r\n     * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n     * radioGroup.disableOffToggling()\r\n     * ```\r\n     */\r\n    PDFRadioGroup.prototype.disableOffToggling = function () {\r\n        this.acroField.setFlagTo(AcroButtonFlags.NoToggleToOff, true);\r\n    };\r\n    /**\r\n     * Returns `true` if the radio buttons in this group are mutually exclusive.\r\n     * This means that when the user selects a radio button, only that specific\r\n     * button will be turned on. Even if other radio buttons in the group\r\n     * represent the same value, they will not be enabled. The alternative to\r\n     * this is that clicking a radio button will select that button along with\r\n     * any other radio buttons in the group that share the same value. See\r\n     * [[PDFRadioGroup.enableMutualExclusion]] and\r\n     * [[PDFRadioGroup.disableMutualExclusion]].\r\n     * For example:\r\n     * ```js\r\n     * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n     * if (radioGroup.isMutuallyExclusive()) console.log('Mutual exclusion is enabled')\r\n     * ```\r\n     */\r\n    PDFRadioGroup.prototype.isMutuallyExclusive = function () {\r\n        return !this.acroField.hasFlag(AcroButtonFlags.RadiosInUnison);\r\n    };\r\n    /**\r\n     * When the user clicks a radio button in this group it will be selected. In\r\n     * addition, any other radio buttons in this group that share the same\r\n     * underlying value will also be selected. For example:\r\n     * ```js\r\n     * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n     * radioGroup.enableMutualExclusion()\r\n     * ```\r\n     * Note that this option must be enabled prior to adding options to the\r\n     * radio group. It does not currently apply retroactively to existing\r\n     * radio buttons in the group.\r\n     */\r\n    PDFRadioGroup.prototype.enableMutualExclusion = function () {\r\n        this.acroField.setFlagTo(AcroButtonFlags.RadiosInUnison, false);\r\n    };\r\n    /**\r\n     * When the user clicks a radio button in this group only it will be selected.\r\n     * No other radio buttons in the group will be selected, even if they share\r\n     * the same underlying value. For example:\r\n     * ```js\r\n     * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n     * radioGroup.disableMutualExclusion()\r\n     * ```\r\n     * Note that this option must be disabled prior to adding options to the\r\n     * radio group. It does not currently apply retroactively to existing\r\n     * radio buttons in the group.\r\n     */\r\n    PDFRadioGroup.prototype.disableMutualExclusion = function () {\r\n        this.acroField.setFlagTo(AcroButtonFlags.RadiosInUnison, true);\r\n    };\r\n    /**\r\n     * Add a new radio button to this group on the specified page. For example:\r\n     * ```js\r\n     * const page = pdfDoc.addPage()\r\n     *\r\n     * const form = pdfDoc.getForm()\r\n     * const radioGroup = form.createRadioGroup('best.gundam')\r\n     *\r\n     * const options = {\r\n     *   x: 50,\r\n     *   width: 25,\r\n     *   height: 25,\r\n     *   textColor: rgb(1, 0, 0),\r\n     *   backgroundColor: rgb(0, 1, 0),\r\n     *   borderColor: rgb(0, 0, 1),\r\n     *   borderWidth: 2,\r\n     *   rotate: degrees(90),\r\n     * }\r\n     *\r\n     * radioGroup.addOptionToPage('Exia', page, { ...options, y: 50 })\r\n     * radioGroup.addOptionToPage('Dynames', page, { ...options, y: 110 })\r\n     * ```\r\n     * This will create a new radio button widget for this radio group field.\r\n     * @param option The option that the radio button widget represents.\r\n     * @param page The page to which the radio button widget should be added.\r\n     * @param options The options to be used when adding the radio button widget.\r\n     */\r\n    PDFRadioGroup.prototype.addOptionToPage = function (option, page, options) {\r\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\r\n        assertIs(option, 'option', ['string']);\r\n        assertIs(page, 'page', [[PDFPage, 'PDFPage']]);\r\n        assertFieldAppearanceOptions(options);\r\n        // Create a widget for this radio button\r\n        var widget = this.createWidget({\r\n            x: (_a = options === null || options === void 0 ? void 0 : options.x) !== null && _a !== void 0 ? _a : 0,\r\n            y: (_b = options === null || options === void 0 ? void 0 : options.y) !== null && _b !== void 0 ? _b : 0,\r\n            width: (_c = options === null || options === void 0 ? void 0 : options.width) !== null && _c !== void 0 ? _c : 50,\r\n            height: (_d = options === null || options === void 0 ? void 0 : options.height) !== null && _d !== void 0 ? _d : 50,\r\n            textColor: (_e = options === null || options === void 0 ? void 0 : options.textColor) !== null && _e !== void 0 ? _e : rgb(0, 0, 0),\r\n            backgroundColor: (_f = options === null || options === void 0 ? void 0 : options.backgroundColor) !== null && _f !== void 0 ? _f : rgb(1, 1, 1),\r\n            borderColor: (_g = options === null || options === void 0 ? void 0 : options.borderColor) !== null && _g !== void 0 ? _g : rgb(0, 0, 0),\r\n            borderWidth: (_h = options === null || options === void 0 ? void 0 : options.borderWidth) !== null && _h !== void 0 ? _h : 1,\r\n            rotate: (_j = options === null || options === void 0 ? void 0 : options.rotate) !== null && _j !== void 0 ? _j : degrees(0),\r\n            hidden: options === null || options === void 0 ? void 0 : options.hidden,\r\n        });\r\n        var widgetRef = this.doc.context.register(widget.dict);\r\n        // Add widget to this field\r\n        var apStateValue = this.acroField.addWidgetWithOpt(widgetRef, PDFHexString.fromText(option), !this.isMutuallyExclusive());\r\n        // Set appearance streams for widget\r\n        widget.setAppearanceState(PDFName.of('Off'));\r\n        this.updateWidgetAppearance(widget, apStateValue);\r\n        // Add widget to the given page\r\n        page.node.addAnnot(widgetRef);\r\n    };\r\n    /**\r\n     * Returns `true` if any of this group's radio button widgets do not have an\r\n     * appearance stream for their current state. For example:\r\n     * ```js\r\n     * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n     * if (radioGroup.needsAppearancesUpdate()) console.log('Needs update')\r\n     * ```\r\n     * @returns Whether or not this radio group needs an appearance update.\r\n     */\r\n    PDFRadioGroup.prototype.needsAppearancesUpdate = function () {\r\n        var _a;\r\n        var widgets = this.acroField.getWidgets();\r\n        for (var idx = 0, len = widgets.length; idx < len; idx++) {\r\n            var widget = widgets[idx];\r\n            var state = widget.getAppearanceState();\r\n            var normal = (_a = widget.getAppearances()) === null || _a === void 0 ? void 0 : _a.normal;\r\n            if (!(normal instanceof PDFDict))\r\n                return true;\r\n            if (state && !normal.has(state))\r\n                return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Update the appearance streams for each of this group's radio button widgets\r\n     * using the default appearance provider for radio groups. For example:\r\n     * ```js\r\n     * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n     * radioGroup.defaultUpdateAppearances()\r\n     * ```\r\n     */\r\n    PDFRadioGroup.prototype.defaultUpdateAppearances = function () {\r\n        this.updateAppearances();\r\n    };\r\n    // rg.updateAppearances((field: any, widget: any) => {\r\n    //   assert(field === rg);\r\n    //   assert(widget instanceof PDFWidgetAnnotation);\r\n    //   return { on: [...rectangle, ...circle], off: [...rectangle, ...circle] };\r\n    // });\r\n    /**\r\n     * Update the appearance streams for each of this group's radio button widgets\r\n     * using the given appearance provider. If no `provider` is passed, the\r\n     * default appearance provider for radio groups will be used. For example:\r\n     * ```js\r\n     * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n     * radioGroup.updateAppearances((field, widget) => {\r\n     *   ...\r\n     *   return {\r\n     *     normal: { on: drawRadioButton(...), off: drawRadioButton(...) },\r\n     *     down: { on: drawRadioButton(...), off: drawRadioButton(...) },\r\n     *   }\r\n     * })\r\n     * ```\r\n     * @param provider Optionally, the appearance provider to be used for\r\n     *                 generating the contents of the appearance streams.\r\n     */\r\n    PDFRadioGroup.prototype.updateAppearances = function (provider) {\r\n        assertOrUndefined(provider, 'provider', [Function]);\r\n        var widgets = this.acroField.getWidgets();\r\n        for (var idx = 0, len = widgets.length; idx < len; idx++) {\r\n            var widget = widgets[idx];\r\n            var onValue = widget.getOnValue();\r\n            if (!onValue)\r\n                continue;\r\n            this.updateWidgetAppearance(widget, onValue, provider);\r\n        }\r\n    };\r\n    PDFRadioGroup.prototype.updateWidgetAppearance = function (widget, onValue, provider) {\r\n        var apProvider = provider !== null && provider !== void 0 ? provider : defaultRadioGroupAppearanceProvider;\r\n        var appearances = normalizeAppearance(apProvider(this, widget));\r\n        this.updateOnOffWidgetAppearance(widget, onValue, appearances);\r\n    };\r\n    /**\r\n     * > **NOTE:** You probably don't want to call this method directly. Instead,\r\n     * > consider using the [[PDFForm.getOptionList]] method, which will create an\r\n     * > instance of [[PDFOptionList]] for you.\r\n     *\r\n     * Create an instance of [[PDFOptionList]] from an existing acroRadioButton\r\n     * and ref\r\n     *\r\n     * @param acroRadioButton The underlying `PDFAcroRadioButton` for this\r\n     *                        radio group.\r\n     * @param ref The unique reference for this radio group.\r\n     * @param doc The document to which this radio group will belong.\r\n     */\r\n    PDFRadioGroup.of = function (acroRadioButton, ref, doc) { return new PDFRadioGroup(acroRadioButton, ref, doc); };\r\n    return PDFRadioGroup;\r\n}(PDFField));\r\nexport default PDFRadioGroup;\r\n//# sourceMappingURL=PDFRadioGroup.js.map"]},"metadata":{},"sourceType":"module"}