{"ast":null,"code":"import { decompressJson } from './utils';\nimport CourierBoldCompressed from './Courier-Bold.compressed.json';\nimport CourierBoldObliqueCompressed from './Courier-BoldOblique.compressed.json';\nimport CourierObliqueCompressed from './Courier-Oblique.compressed.json';\nimport CourierCompressed from './Courier.compressed.json';\nimport HelveticaBoldCompressed from './Helvetica-Bold.compressed.json';\nimport HelveticaBoldObliqueCompressed from './Helvetica-BoldOblique.compressed.json';\nimport HelveticaObliqueCompressed from './Helvetica-Oblique.compressed.json';\nimport HelveticaCompressed from './Helvetica.compressed.json';\nimport TimesBoldCompressed from './Times-Bold.compressed.json';\nimport TimesBoldItalicCompressed from './Times-BoldItalic.compressed.json';\nimport TimesItalicCompressed from './Times-Italic.compressed.json';\nimport TimesRomanCompressed from './Times-Roman.compressed.json';\nimport SymbolCompressed from './Symbol.compressed.json';\nimport ZapfDingbatsCompressed from './ZapfDingbats.compressed.json'; // prettier-ignore\n\nvar compressedJsonForFontName = {\n  'Courier': CourierCompressed,\n  'Courier-Bold': CourierBoldCompressed,\n  'Courier-Oblique': CourierObliqueCompressed,\n  'Courier-BoldOblique': CourierBoldObliqueCompressed,\n  'Helvetica': HelveticaCompressed,\n  'Helvetica-Bold': HelveticaBoldCompressed,\n  'Helvetica-Oblique': HelveticaObliqueCompressed,\n  'Helvetica-BoldOblique': HelveticaBoldObliqueCompressed,\n  'Times-Roman': TimesRomanCompressed,\n  'Times-Bold': TimesBoldCompressed,\n  'Times-Italic': TimesItalicCompressed,\n  'Times-BoldItalic': TimesBoldItalicCompressed,\n  'Symbol': SymbolCompressed,\n  'ZapfDingbats': ZapfDingbatsCompressed\n};\nexport var FontNames;\n\n(function (FontNames) {\n  FontNames[\"Courier\"] = \"Courier\";\n  FontNames[\"CourierBold\"] = \"Courier-Bold\";\n  FontNames[\"CourierOblique\"] = \"Courier-Oblique\";\n  FontNames[\"CourierBoldOblique\"] = \"Courier-BoldOblique\";\n  FontNames[\"Helvetica\"] = \"Helvetica\";\n  FontNames[\"HelveticaBold\"] = \"Helvetica-Bold\";\n  FontNames[\"HelveticaOblique\"] = \"Helvetica-Oblique\";\n  FontNames[\"HelveticaBoldOblique\"] = \"Helvetica-BoldOblique\";\n  FontNames[\"TimesRoman\"] = \"Times-Roman\";\n  FontNames[\"TimesRomanBold\"] = \"Times-Bold\";\n  FontNames[\"TimesRomanItalic\"] = \"Times-Italic\";\n  FontNames[\"TimesRomanBoldItalic\"] = \"Times-BoldItalic\";\n  FontNames[\"Symbol\"] = \"Symbol\";\n  FontNames[\"ZapfDingbats\"] = \"ZapfDingbats\";\n})(FontNames || (FontNames = {}));\n\nvar fontCache = {};\n\nvar Font =\n/** @class */\nfunction () {\n  function Font() {\n    var _this = this;\n\n    this.getWidthOfGlyph = function (glyphName) {\n      return _this.CharWidths[glyphName];\n    };\n\n    this.getXAxisKerningForPair = function (leftGlyphName, rightGlyphName) {\n      return (_this.KernPairXAmounts[leftGlyphName] || {})[rightGlyphName];\n    };\n  }\n\n  Font.load = function (fontName) {\n    var cachedFont = fontCache[fontName];\n    if (cachedFont) return cachedFont;\n    var json = decompressJson(compressedJsonForFontName[fontName]);\n    var font = Object.assign(new Font(), JSON.parse(json));\n    font.CharWidths = font.CharMetrics.reduce(function (acc, metric) {\n      acc[metric.N] = metric.WX;\n      return acc;\n    }, {});\n    font.KernPairXAmounts = font.KernPairs.reduce(function (acc, _a) {\n      var name1 = _a[0],\n          name2 = _a[1],\n          width = _a[2];\n      if (!acc[name1]) acc[name1] = {};\n      acc[name1][name2] = width;\n      return acc;\n    }, {});\n    fontCache[fontName] = font;\n    return font;\n  };\n\n  return Font;\n}();\n\nexport { Font };","map":{"version":3,"sources":["C:/Users/GAMER/OneDrive/Desktop/programming stuff/github_repos/instafill/front-end/node_modules/@pdf-lib/standard-fonts/es/Font.js"],"names":["decompressJson","CourierBoldCompressed","CourierBoldObliqueCompressed","CourierObliqueCompressed","CourierCompressed","HelveticaBoldCompressed","HelveticaBoldObliqueCompressed","HelveticaObliqueCompressed","HelveticaCompressed","TimesBoldCompressed","TimesBoldItalicCompressed","TimesItalicCompressed","TimesRomanCompressed","SymbolCompressed","ZapfDingbatsCompressed","compressedJsonForFontName","FontNames","fontCache","Font","_this","getWidthOfGlyph","glyphName","CharWidths","getXAxisKerningForPair","leftGlyphName","rightGlyphName","KernPairXAmounts","load","fontName","cachedFont","json","font","Object","assign","JSON","parse","CharMetrics","reduce","acc","metric","N","WX","KernPairs","_a","name1","name2","width"],"mappings":"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","sourcesContent":["import { decompressJson } from './utils';\r\nimport CourierBoldCompressed from './Courier-Bold.compressed.json';\r\nimport CourierBoldObliqueCompressed from './Courier-BoldOblique.compressed.json';\r\nimport CourierObliqueCompressed from './Courier-Oblique.compressed.json';\r\nimport CourierCompressed from './Courier.compressed.json';\r\nimport HelveticaBoldCompressed from './Helvetica-Bold.compressed.json';\r\nimport HelveticaBoldObliqueCompressed from './Helvetica-BoldOblique.compressed.json';\r\nimport HelveticaObliqueCompressed from './Helvetica-Oblique.compressed.json';\r\nimport HelveticaCompressed from './Helvetica.compressed.json';\r\nimport TimesBoldCompressed from './Times-Bold.compressed.json';\r\nimport TimesBoldItalicCompressed from './Times-BoldItalic.compressed.json';\r\nimport TimesItalicCompressed from './Times-Italic.compressed.json';\r\nimport TimesRomanCompressed from './Times-Roman.compressed.json';\r\nimport SymbolCompressed from './Symbol.compressed.json';\r\nimport ZapfDingbatsCompressed from './ZapfDingbats.compressed.json';\r\n// prettier-ignore\r\nvar compressedJsonForFontName = {\r\n    'Courier': CourierCompressed,\r\n    'Courier-Bold': CourierBoldCompressed,\r\n    'Courier-Oblique': CourierObliqueCompressed,\r\n    'Courier-BoldOblique': CourierBoldObliqueCompressed,\r\n    'Helvetica': HelveticaCompressed,\r\n    'Helvetica-Bold': HelveticaBoldCompressed,\r\n    'Helvetica-Oblique': HelveticaObliqueCompressed,\r\n    'Helvetica-BoldOblique': HelveticaBoldObliqueCompressed,\r\n    'Times-Roman': TimesRomanCompressed,\r\n    'Times-Bold': TimesBoldCompressed,\r\n    'Times-Italic': TimesItalicCompressed,\r\n    'Times-BoldItalic': TimesBoldItalicCompressed,\r\n    'Symbol': SymbolCompressed,\r\n    'ZapfDingbats': ZapfDingbatsCompressed,\r\n};\r\nexport var FontNames;\r\n(function (FontNames) {\r\n    FontNames[\"Courier\"] = \"Courier\";\r\n    FontNames[\"CourierBold\"] = \"Courier-Bold\";\r\n    FontNames[\"CourierOblique\"] = \"Courier-Oblique\";\r\n    FontNames[\"CourierBoldOblique\"] = \"Courier-BoldOblique\";\r\n    FontNames[\"Helvetica\"] = \"Helvetica\";\r\n    FontNames[\"HelveticaBold\"] = \"Helvetica-Bold\";\r\n    FontNames[\"HelveticaOblique\"] = \"Helvetica-Oblique\";\r\n    FontNames[\"HelveticaBoldOblique\"] = \"Helvetica-BoldOblique\";\r\n    FontNames[\"TimesRoman\"] = \"Times-Roman\";\r\n    FontNames[\"TimesRomanBold\"] = \"Times-Bold\";\r\n    FontNames[\"TimesRomanItalic\"] = \"Times-Italic\";\r\n    FontNames[\"TimesRomanBoldItalic\"] = \"Times-BoldItalic\";\r\n    FontNames[\"Symbol\"] = \"Symbol\";\r\n    FontNames[\"ZapfDingbats\"] = \"ZapfDingbats\";\r\n})(FontNames || (FontNames = {}));\r\nvar fontCache = {};\r\nvar Font = /** @class */ (function () {\r\n    function Font() {\r\n        var _this = this;\r\n        this.getWidthOfGlyph = function (glyphName) {\r\n            return _this.CharWidths[glyphName];\r\n        };\r\n        this.getXAxisKerningForPair = function (leftGlyphName, rightGlyphName) {\r\n            return (_this.KernPairXAmounts[leftGlyphName] || {})[rightGlyphName];\r\n        };\r\n    }\r\n    Font.load = function (fontName) {\r\n        var cachedFont = fontCache[fontName];\r\n        if (cachedFont)\r\n            return cachedFont;\r\n        var json = decompressJson(compressedJsonForFontName[fontName]);\r\n        var font = Object.assign(new Font(), JSON.parse(json));\r\n        font.CharWidths = font.CharMetrics.reduce(function (acc, metric) {\r\n            acc[metric.N] = metric.WX;\r\n            return acc;\r\n        }, {});\r\n        font.KernPairXAmounts = font.KernPairs.reduce(function (acc, _a) {\r\n            var name1 = _a[0], name2 = _a[1], width = _a[2];\r\n            if (!acc[name1])\r\n                acc[name1] = {};\r\n            acc[name1][name2] = width;\r\n            return acc;\r\n        }, {});\r\n        fontCache[fontName] = font;\r\n        return font;\r\n    };\r\n    return Font;\r\n}());\r\nexport { Font };\r\n"]},"metadata":{},"sourceType":"module"}