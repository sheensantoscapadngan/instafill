{"ast":null,"code":"/*\r\n * Copyright 2012 Mozilla Foundation\r\n *\r\n * The AsciiHexStream class contained in this file is a TypeScript port of the\r\n * JavaScript AsciiHexStream class in Mozilla's pdf.js project, made available\r\n * under the Apache 2.0 open source license.\r\n */\nimport { __extends } from \"tslib\";\nimport DecodeStream from \"./DecodeStream\";\n\nvar AsciiHexStream =\n/** @class */\nfunction (_super) {\n  __extends(AsciiHexStream, _super);\n\n  function AsciiHexStream(stream, maybeLength) {\n    var _this = _super.call(this, maybeLength) || this;\n\n    _this.stream = stream;\n    _this.firstDigit = -1; // Most streams increase in size when decoded, but AsciiHex streams shrink\n    // by 50%.\n\n    if (maybeLength) {\n      maybeLength = 0.5 * maybeLength;\n    }\n\n    return _this;\n  }\n\n  AsciiHexStream.prototype.readBlock = function () {\n    var UPSTREAM_BLOCK_SIZE = 8000;\n    var bytes = this.stream.getBytes(UPSTREAM_BLOCK_SIZE);\n\n    if (!bytes.length) {\n      this.eof = true;\n      return;\n    }\n\n    var maxDecodeLength = bytes.length + 1 >> 1;\n    var buffer = this.ensureBuffer(this.bufferLength + maxDecodeLength);\n    var bufferLength = this.bufferLength;\n    var firstDigit = this.firstDigit;\n\n    for (var i = 0, ii = bytes.length; i < ii; i++) {\n      var ch = bytes[i];\n      var digit = void 0;\n\n      if (ch >= 0x30 && ch <= 0x39) {\n        // '0'-'9'\n        digit = ch & 0x0f;\n      } else if (ch >= 0x41 && ch <= 0x46 || ch >= 0x61 && ch <= 0x66) {\n        // 'A'-'Z', 'a'-'z'\n        digit = (ch & 0x0f) + 9;\n      } else if (ch === 0x3e) {\n        // '>'\n        this.eof = true;\n        break;\n      } else {\n        // probably whitespace\n        continue; // ignoring\n      }\n\n      if (firstDigit < 0) {\n        firstDigit = digit;\n      } else {\n        buffer[bufferLength++] = firstDigit << 4 | digit;\n        firstDigit = -1;\n      }\n    }\n\n    if (firstDigit >= 0 && this.eof) {\n      // incomplete byte\n      buffer[bufferLength++] = firstDigit << 4;\n      firstDigit = -1;\n    }\n\n    this.firstDigit = firstDigit;\n    this.bufferLength = bufferLength;\n  };\n\n  return AsciiHexStream;\n}(DecodeStream);\n\nexport default AsciiHexStream;","map":{"version":3,"sources":["../../../src/core/streams/AsciiHexStream.ts"],"names":[],"mappings":"AAAA;;;;;;AAMG;;AAEH,OAAO,YAAP,MAAmB,gBAAnB;;AAGA,IAAA,cAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA6B,EAAA,SAAA,CAAA,cAAA,EAAA,MAAA,CAAA;;AAI3B,WAAA,cAAA,CAAY,MAAZ,EAAgC,WAAhC,EAAoD;AAApD,QAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,WAAN,KAAkB,IADpB;;AAGE,IAAA,KAAI,CAAC,MAAL,GAAc,MAAd;AAEA,IAAA,KAAI,CAAC,UAAL,GAAkB,CAAC,CAAnB,CALkD,CAOlD;AACA;;AACA,QAAI,WAAJ,EAAiB;AACf,MAAA,WAAW,GAAG,MAAM,WAApB;AACD;;;AACF;;AAES,EAAA,cAAA,CAAA,SAAA,CAAA,SAAA,GAAV,YAAA;AACE,QAAM,mBAAmB,GAAG,IAA5B;AACA,QAAM,KAAK,GAAG,KAAK,MAAL,CAAY,QAAZ,CAAqB,mBAArB,CAAd;;AACA,QAAI,CAAC,KAAK,CAAC,MAAX,EAAmB;AACjB,WAAK,GAAL,GAAW,IAAX;AACA;AACD;;AAED,QAAM,eAAe,GAAI,KAAK,CAAC,MAAN,GAAe,CAAhB,IAAsB,CAA9C;AACA,QAAM,MAAM,GAAG,KAAK,YAAL,CAAkB,KAAK,YAAL,GAAoB,eAAtC,CAAf;AACA,QAAI,YAAY,GAAG,KAAK,YAAxB;AAEA,QAAI,UAAU,GAAG,KAAK,UAAtB;;AACA,SAAK,IAAI,CAAC,GAAG,CAAR,EAAW,EAAE,GAAG,KAAK,CAAC,MAA3B,EAAmC,CAAC,GAAG,EAAvC,EAA2C,CAAC,EAA5C,EAAgD;AAC9C,UAAM,EAAE,GAAG,KAAK,CAAC,CAAD,CAAhB;AACA,UAAI,KAAK,GAAA,KAAA,CAAT;;AACA,UAAI,EAAE,IAAI,IAAN,IAAc,EAAE,IAAI,IAAxB,EAA8B;AAC5B;AACA,QAAA,KAAK,GAAG,EAAE,GAAG,IAAb;AACD,OAHD,MAGO,IAAK,EAAE,IAAI,IAAN,IAAc,EAAE,IAAI,IAArB,IAA+B,EAAE,IAAI,IAAN,IAAc,EAAE,IAAI,IAAvD,EAA8D;AACnE;AACA,QAAA,KAAK,GAAG,CAAC,EAAE,GAAG,IAAN,IAAc,CAAtB;AACD,OAHM,MAGA,IAAI,EAAE,KAAK,IAAX,EAAiB;AACtB;AACA,aAAK,GAAL,GAAW,IAAX;AACA;AACD,OAJM,MAIA;AACL;AACA,iBAFK,CAEK;AACX;;AACD,UAAI,UAAU,GAAG,CAAjB,EAAoB;AAClB,QAAA,UAAU,GAAG,KAAb;AACD,OAFD,MAEO;AACL,QAAA,MAAM,CAAC,YAAY,EAAb,CAAN,GAA0B,UAAU,IAAI,CAAf,GAAoB,KAA7C;AACA,QAAA,UAAU,GAAG,CAAC,CAAd;AACD;AACF;;AACD,QAAI,UAAU,IAAI,CAAd,IAAmB,KAAK,GAA5B,EAAiC;AAC/B;AACA,MAAA,MAAM,CAAC,YAAY,EAAb,CAAN,GAAyB,UAAU,IAAI,CAAvC;AACA,MAAA,UAAU,GAAG,CAAC,CAAd;AACD;;AACD,SAAK,UAAL,GAAkB,UAAlB;AACA,SAAK,YAAL,GAAoB,YAApB;AACD,GA5CS;;AA6CZ,SAAA,cAAA;AAAC,CA/DD,CAA6B,YAA7B,CAAA;;AAiEA,eAAe,cAAf","sourceRoot":"","sourcesContent":["/*\r\n * Copyright 2012 Mozilla Foundation\r\n *\r\n * The AsciiHexStream class contained in this file is a TypeScript port of the\r\n * JavaScript AsciiHexStream class in Mozilla's pdf.js project, made available\r\n * under the Apache 2.0 open source license.\r\n */\r\nimport { __extends } from \"tslib\";\r\nimport DecodeStream from \"./DecodeStream\";\r\nvar AsciiHexStream = /** @class */ (function (_super) {\r\n    __extends(AsciiHexStream, _super);\r\n    function AsciiHexStream(stream, maybeLength) {\r\n        var _this = _super.call(this, maybeLength) || this;\r\n        _this.stream = stream;\r\n        _this.firstDigit = -1;\r\n        // Most streams increase in size when decoded, but AsciiHex streams shrink\r\n        // by 50%.\r\n        if (maybeLength) {\r\n            maybeLength = 0.5 * maybeLength;\r\n        }\r\n        return _this;\r\n    }\r\n    AsciiHexStream.prototype.readBlock = function () {\r\n        var UPSTREAM_BLOCK_SIZE = 8000;\r\n        var bytes = this.stream.getBytes(UPSTREAM_BLOCK_SIZE);\r\n        if (!bytes.length) {\r\n            this.eof = true;\r\n            return;\r\n        }\r\n        var maxDecodeLength = (bytes.length + 1) >> 1;\r\n        var buffer = this.ensureBuffer(this.bufferLength + maxDecodeLength);\r\n        var bufferLength = this.bufferLength;\r\n        var firstDigit = this.firstDigit;\r\n        for (var i = 0, ii = bytes.length; i < ii; i++) {\r\n            var ch = bytes[i];\r\n            var digit = void 0;\r\n            if (ch >= 0x30 && ch <= 0x39) {\r\n                // '0'-'9'\r\n                digit = ch & 0x0f;\r\n            }\r\n            else if ((ch >= 0x41 && ch <= 0x46) || (ch >= 0x61 && ch <= 0x66)) {\r\n                // 'A'-'Z', 'a'-'z'\r\n                digit = (ch & 0x0f) + 9;\r\n            }\r\n            else if (ch === 0x3e) {\r\n                // '>'\r\n                this.eof = true;\r\n                break;\r\n            }\r\n            else {\r\n                // probably whitespace\r\n                continue; // ignoring\r\n            }\r\n            if (firstDigit < 0) {\r\n                firstDigit = digit;\r\n            }\r\n            else {\r\n                buffer[bufferLength++] = (firstDigit << 4) | digit;\r\n                firstDigit = -1;\r\n            }\r\n        }\r\n        if (firstDigit >= 0 && this.eof) {\r\n            // incomplete byte\r\n            buffer[bufferLength++] = firstDigit << 4;\r\n            firstDigit = -1;\r\n        }\r\n        this.firstDigit = firstDigit;\r\n        this.bufferLength = bufferLength;\r\n    };\r\n    return AsciiHexStream;\r\n}(DecodeStream));\r\nexport default AsciiHexStream;\r\n//# sourceMappingURL=AsciiHexStream.js.map"]},"metadata":{},"sourceType":"module"}