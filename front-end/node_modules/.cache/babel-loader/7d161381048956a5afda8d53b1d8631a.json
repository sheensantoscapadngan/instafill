{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { rgb } from \"./colors\";\nimport { drawImage, drawLine, drawLinesOfText, drawPage, drawRectangle, drawSvgPath, drawEllipse } from \"./operations\";\nimport { popGraphicsState, pushGraphicsState, translate, LineCapStyle } from \"./operators\";\nimport PDFDocument from \"./PDFDocument\";\nimport PDFEmbeddedPage from \"./PDFEmbeddedPage\";\nimport PDFFont from \"./PDFFont\";\nimport PDFImage from \"./PDFImage\";\nimport { BlendMode } from \"./PDFPageOptions\";\nimport { degrees, toDegrees } from \"./rotations\";\nimport { StandardFonts } from \"./StandardFonts\";\nimport { PDFContentStream, PDFName, PDFOperator, PDFPageLeaf, PDFRef } from \"../core\";\nimport { addRandomSuffix, assertEachIs, assertIs, assertMultiple, assertOrUndefined, breakTextIntoLines, cleanText, rectanglesAreEqual, lineSplit, assertRangeOrUndefined, assertIsOneOfOrUndefined } from \"../utils\";\n/**\n * Represents a single page of a [[PDFDocument]].\n */\n\nvar PDFPage =\n/** @class */\nfunction () {\n  function PDFPage(leafNode, ref, doc) {\n    this.fontSize = 24;\n    this.fontColor = rgb(0, 0, 0);\n    this.lineHeight = 24;\n    this.x = 0;\n    this.y = 0;\n    assertIs(leafNode, 'leafNode', [[PDFPageLeaf, 'PDFPageLeaf']]);\n    assertIs(ref, 'ref', [[PDFRef, 'PDFRef']]);\n    assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n    this.node = leafNode;\n    this.ref = ref;\n    this.doc = doc;\n  }\n  /**\n   * Rotate this page by a multiple of 90 degrees. For example:\n   * ```js\n   * import { degrees } from 'pdf-lib'\n   *\n   * page.setRotation(degrees(-90))\n   * page.setRotation(degrees(0))\n   * page.setRotation(degrees(90))\n   * page.setRotation(degrees(180))\n   * page.setRotation(degrees(270))\n   * ```\n   * @param angle The angle to rotate this page.\n   */\n\n\n  PDFPage.prototype.setRotation = function (angle) {\n    var degreesAngle = toDegrees(angle);\n    assertMultiple(degreesAngle, 'degreesAngle', 90);\n    this.node.set(PDFName.of('Rotate'), this.doc.context.obj(degreesAngle));\n  };\n  /**\n   * Get this page's rotation angle in degrees. For example:\n   * ```js\n   * const rotationAngle = page.getRotation().angle;\n   * ```\n   * @returns The rotation angle of the page in degrees (always a multiple of\n   *          90 degrees).\n   */\n\n\n  PDFPage.prototype.getRotation = function () {\n    var Rotate = this.node.Rotate();\n    return degrees(Rotate ? Rotate.asNumber() : 0);\n  };\n  /**\n   * Resize this page by increasing or decreasing its width and height. For\n   * example:\n   * ```js\n   * page.setSize(250, 500)\n   * page.setSize(page.getWidth() + 50, page.getHeight() + 100)\n   * page.setSize(page.getWidth() - 50, page.getHeight() - 100)\n   * ```\n   *\n   * Note that the PDF specification does not allow for pages to have explicit\n   * widths and heights. Instead it defines the \"size\" of a page in terms of\n   * five rectangles: the MediaBox, CropBox, BleedBox, TrimBox, and ArtBox. As a\n   * result, this method cannot directly change the width and height of a page.\n   * Instead, it works by adjusting these five boxes.\n   *\n   * This method performs the following steps:\n   *   1. Set width & height of MediaBox.\n   *   2. Set width & height of CropBox, if it has same dimensions as MediaBox.\n   *   3. Set width & height of BleedBox, if it has same dimensions as MediaBox.\n   *   4. Set width & height of TrimBox, if it has same dimensions as MediaBox.\n   *   5. Set width & height of ArtBox, if it has same dimensions as MediaBox.\n   *\n   * This approach works well for most PDF documents as all PDF pages must\n   * have a MediaBox, but relatively few have a CropBox, BleedBox, TrimBox, or\n   * ArtBox. And when they do have these additional boxes, they often have the\n   * same dimensions as the MediaBox. However, if you find this method does not\n   * work for your document, consider setting the boxes directly:\n   *   * [[PDFPage.setMediaBox]]\n   *   * [[PDFPage.setCropBox]]\n   *   * [[PDFPage.setBleedBox]]\n   *   * [[PDFPage.setTrimBox]]\n   *   * [[PDFPage.setArtBox]]\n   *\n   * @param width The new width of the page.\n   * @param height The new height of the page.\n   */\n\n\n  PDFPage.prototype.setSize = function (width, height) {\n    assertIs(width, 'width', ['number']);\n    assertIs(height, 'height', ['number']);\n    var mediaBox = this.getMediaBox();\n    this.setMediaBox(mediaBox.x, mediaBox.y, width, height);\n    var cropBox = this.getCropBox();\n    var bleedBox = this.getBleedBox();\n    var trimBox = this.getTrimBox();\n    var artBox = this.getArtBox();\n    var hasCropBox = this.node.CropBox();\n    var hasBleedBox = this.node.BleedBox();\n    var hasTrimBox = this.node.TrimBox();\n    var hasArtBox = this.node.ArtBox();\n\n    if (hasCropBox && rectanglesAreEqual(cropBox, mediaBox)) {\n      this.setCropBox(mediaBox.x, mediaBox.y, width, height);\n    }\n\n    if (hasBleedBox && rectanglesAreEqual(bleedBox, mediaBox)) {\n      this.setBleedBox(mediaBox.x, mediaBox.y, width, height);\n    }\n\n    if (hasTrimBox && rectanglesAreEqual(trimBox, mediaBox)) {\n      this.setTrimBox(mediaBox.x, mediaBox.y, width, height);\n    }\n\n    if (hasArtBox && rectanglesAreEqual(artBox, mediaBox)) {\n      this.setArtBox(mediaBox.x, mediaBox.y, width, height);\n    }\n  };\n  /**\n   * Resize this page by increasing or decreasing its width. For example:\n   * ```js\n   * page.setWidth(250)\n   * page.setWidth(page.getWidth() + 50)\n   * page.setWidth(page.getWidth() - 50)\n   * ```\n   *\n   * This method uses [[PDFPage.setSize]] to set the page's width.\n   *\n   * @param width The new width of the page.\n   */\n\n\n  PDFPage.prototype.setWidth = function (width) {\n    assertIs(width, 'width', ['number']);\n    this.setSize(width, this.getSize().height);\n  };\n  /**\n   * Resize this page by increasing or decreasing its height. For example:\n   * ```js\n   * page.setHeight(500)\n   * page.setHeight(page.getWidth() + 100)\n   * page.setHeight(page.getWidth() - 100)\n   * ```\n   *\n   * This method uses [[PDFPage.setSize]] to set the page's height.\n   *\n   * @param height The new height of the page.\n   */\n\n\n  PDFPage.prototype.setHeight = function (height) {\n    assertIs(height, 'height', ['number']);\n    this.setSize(this.getSize().width, height);\n  };\n  /**\n   * Set the MediaBox of this page. For example:\n   * ```js\n   * const mediaBox = page.getMediaBox()\n   *\n   * page.setMediaBox(0, 0, 250, 500)\n   * page.setMediaBox(mediaBox.x, mediaBox.y, 50, 100)\n   * page.setMediaBox(15, 5, mediaBox.width - 50, mediaBox.height - 100)\n   * ```\n   *\n   * See [[PDFPage.getMediaBox]] for details about what the MediaBox represents.\n   *\n   * @param x The x coordinate of the lower left corner of the new MediaBox.\n   * @param y The y coordinate of the lower left corner of the new MediaBox.\n   * @param width The width of the new MediaBox.\n   * @param height The height of the new MediaBox.\n   */\n\n\n  PDFPage.prototype.setMediaBox = function (x, y, width, height) {\n    assertIs(x, 'x', ['number']);\n    assertIs(y, 'y', ['number']);\n    assertIs(width, 'width', ['number']);\n    assertIs(height, 'height', ['number']);\n    var mediaBox = this.doc.context.obj([x, y, x + width, y + height]);\n    this.node.set(PDFName.MediaBox, mediaBox);\n  };\n  /**\n   * Set the CropBox of this page. For example:\n   * ```js\n   * const cropBox = page.getCropBox()\n   *\n   * page.setCropBox(0, 0, 250, 500)\n   * page.setCropBox(cropBox.x, cropBox.y, 50, 100)\n   * page.setCropBox(15, 5, cropBox.width - 50, cropBox.height - 100)\n   * ```\n   *\n   * See [[PDFPage.getCropBox]] for details about what the CropBox represents.\n   *\n   * @param x The x coordinate of the lower left corner of the new CropBox.\n   * @param y The y coordinate of the lower left corner of the new CropBox.\n   * @param width The width of the new CropBox.\n   * @param height The height of the new CropBox.\n   */\n\n\n  PDFPage.prototype.setCropBox = function (x, y, width, height) {\n    assertIs(x, 'x', ['number']);\n    assertIs(y, 'y', ['number']);\n    assertIs(width, 'width', ['number']);\n    assertIs(height, 'height', ['number']);\n    var cropBox = this.doc.context.obj([x, y, x + width, y + height]);\n    this.node.set(PDFName.CropBox, cropBox);\n  };\n  /**\n   * Set the BleedBox of this page. For example:\n   * ```js\n   * const bleedBox = page.getBleedBox()\n   *\n   * page.setBleedBox(0, 0, 250, 500)\n   * page.setBleedBox(bleedBox.x, bleedBox.y, 50, 100)\n   * page.setBleedBox(15, 5, bleedBox.width - 50, bleedBox.height - 100)\n   * ```\n   *\n   * See [[PDFPage.getBleedBox]] for details about what the BleedBox represents.\n   *\n   * @param x The x coordinate of the lower left corner of the new BleedBox.\n   * @param y The y coordinate of the lower left corner of the new BleedBox.\n   * @param width The width of the new BleedBox.\n   * @param height The height of the new BleedBox.\n   */\n\n\n  PDFPage.prototype.setBleedBox = function (x, y, width, height) {\n    assertIs(x, 'x', ['number']);\n    assertIs(y, 'y', ['number']);\n    assertIs(width, 'width', ['number']);\n    assertIs(height, 'height', ['number']);\n    var bleedBox = this.doc.context.obj([x, y, x + width, y + height]);\n    this.node.set(PDFName.BleedBox, bleedBox);\n  };\n  /**\n   * Set the TrimBox of this page. For example:\n   * ```js\n   * const trimBox = page.getTrimBox()\n   *\n   * page.setTrimBox(0, 0, 250, 500)\n   * page.setTrimBox(trimBox.x, trimBox.y, 50, 100)\n   * page.setTrimBox(15, 5, trimBox.width - 50, trimBox.height - 100)\n   * ```\n   *\n   * See [[PDFPage.getTrimBox]] for details about what the TrimBox represents.\n   *\n   * @param x The x coordinate of the lower left corner of the new TrimBox.\n   * @param y The y coordinate of the lower left corner of the new TrimBox.\n   * @param width The width of the new TrimBox.\n   * @param height The height of the new TrimBox.\n   */\n\n\n  PDFPage.prototype.setTrimBox = function (x, y, width, height) {\n    assertIs(x, 'x', ['number']);\n    assertIs(y, 'y', ['number']);\n    assertIs(width, 'width', ['number']);\n    assertIs(height, 'height', ['number']);\n    var trimBox = this.doc.context.obj([x, y, x + width, y + height]);\n    this.node.set(PDFName.TrimBox, trimBox);\n  };\n  /**\n   * Set the ArtBox of this page. For example:\n   * ```js\n   * const artBox = page.getArtBox()\n   *\n   * page.setArtBox(0, 0, 250, 500)\n   * page.setArtBox(artBox.x, artBox.y, 50, 100)\n   * page.setArtBox(15, 5, artBox.width - 50, artBox.height - 100)\n   * ```\n   *\n   * See [[PDFPage.getArtBox]] for details about what the ArtBox represents.\n   *\n   * @param x The x coordinate of the lower left corner of the new ArtBox.\n   * @param y The y coordinate of the lower left corner of the new ArtBox.\n   * @param width The width of the new ArtBox.\n   * @param height The height of the new ArtBox.\n   */\n\n\n  PDFPage.prototype.setArtBox = function (x, y, width, height) {\n    assertIs(x, 'x', ['number']);\n    assertIs(y, 'y', ['number']);\n    assertIs(width, 'width', ['number']);\n    assertIs(height, 'height', ['number']);\n    var artBox = this.doc.context.obj([x, y, x + width, y + height]);\n    this.node.set(PDFName.ArtBox, artBox);\n  };\n  /**\n   * Get this page's width and height. For example:\n   * ```js\n   * const { width, height } = page.getSize()\n   * ```\n   *\n   * This method uses [[PDFPage.getMediaBox]] to obtain the page's\n   * width and height.\n   *\n   * @returns The width and height of the page.\n   */\n\n\n  PDFPage.prototype.getSize = function () {\n    var _a = this.getMediaBox(),\n        width = _a.width,\n        height = _a.height;\n\n    return {\n      width: width,\n      height: height\n    };\n  };\n  /**\n   * Get this page's width. For example:\n   * ```js\n   * const width = page.getWidth()\n   * ```\n   *\n   * This method uses [[PDFPage.getSize]] to obtain the page's size.\n   *\n   * @returns The width of the page.\n   */\n\n\n  PDFPage.prototype.getWidth = function () {\n    return this.getSize().width;\n  };\n  /**\n   * Get this page's height. For example:\n   * ```js\n   * const height = page.getHeight()\n   * ```\n   *\n   * This method uses [[PDFPage.getSize]] to obtain the page's size.\n   *\n   * @returns The height of the page.\n   */\n\n\n  PDFPage.prototype.getHeight = function () {\n    return this.getSize().height;\n  };\n  /**\n   * Get the rectangle defining this page's MediaBox. For example:\n   * ```js\n   * const { x, y, width, height } = page.getMediaBox()\n   * ```\n   *\n   * The MediaBox of a page defines the boundaries of the physical medium on\n   * which the page is to be displayed/printed. It may include extended area\n   * surrounding the page content for bleed marks, printing marks, etc...\n   * It may also include areas close to the edges of the medium that cannot be\n   * marked because of physical limitations of the output device. Content\n   * falling outside this boundary may safely be discarded without affecting\n   * the meaning of the PDF file.\n   *\n   * @returns An object defining the lower left corner of the MediaBox and its\n   *          width & height.\n   */\n\n\n  PDFPage.prototype.getMediaBox = function () {\n    var mediaBox = this.node.MediaBox();\n    return mediaBox.asRectangle();\n  };\n  /**\n   * Get the rectangle defining this page's CropBox. For example:\n   * ```js\n   * const { x, y, width, height } = page.getCropBox()\n   * ```\n   *\n   * The CropBox of a page defines the region to which the contents of the page\n   * shall be clipped when displayed or printed. Unlike the other boxes, the\n   * CropBox does not necessarily represent the physical page geometry. It\n   * merely imposes clipping on the page contents.\n   *\n   * The CropBox's default value is the page's MediaBox.\n   *\n   * @returns An object defining the lower left corner of the CropBox and its\n   *          width & height.\n   */\n\n\n  PDFPage.prototype.getCropBox = function () {\n    var _a;\n\n    var cropBox = this.node.CropBox();\n    return (_a = cropBox === null || cropBox === void 0 ? void 0 : cropBox.asRectangle()) !== null && _a !== void 0 ? _a : this.getMediaBox();\n  };\n  /**\n   * Get the rectangle defining this page's BleedBox. For example:\n   * ```js\n   * const { x, y, width, height } = page.getBleedBox()\n   * ```\n   *\n   * The BleedBox of a page defines the region to which the contents of the\n   * page shall be clipped when output in a production environment. This may\n   * include any extra bleed area needed to accommodate the physical\n   * limitations of cutting, folding, and trimming equipment. The actual\n   * printed page may include printing marks that fall outside the BleedBox.\n   *\n   * The BleedBox's default value is the page's CropBox.\n   *\n   * @returns An object defining the lower left corner of the BleedBox and its\n   *          width & height.\n   */\n\n\n  PDFPage.prototype.getBleedBox = function () {\n    var _a;\n\n    var bleedBox = this.node.BleedBox();\n    return (_a = bleedBox === null || bleedBox === void 0 ? void 0 : bleedBox.asRectangle()) !== null && _a !== void 0 ? _a : this.getCropBox();\n  };\n  /**\n   * Get the rectangle defining this page's TrimBox. For example:\n   * ```js\n   * const { x, y, width, height } = page.getTrimBox()\n   * ```\n   *\n   * The TrimBox of a page defines the intended dimensions of the finished\n   * page after trimming. It may be smaller than the MediaBox to allow for\n   * production-related content, such as printing instructions, cut marks, or\n   * color bars.\n   *\n   * The TrimBox's default value is the page's CropBox.\n   *\n   * @returns An object defining the lower left corner of the TrimBox and its\n   *          width & height.\n   */\n\n\n  PDFPage.prototype.getTrimBox = function () {\n    var _a;\n\n    var trimBox = this.node.TrimBox();\n    return (_a = trimBox === null || trimBox === void 0 ? void 0 : trimBox.asRectangle()) !== null && _a !== void 0 ? _a : this.getCropBox();\n  };\n  /**\n   * Get the rectangle defining this page's ArtBox. For example:\n   * ```js\n   * const { x, y, width, height } = page.getArtBox()\n   * ```\n   *\n   * The ArtBox of a page defines the extent of the page's meaningful content\n   * (including potential white space).\n   *\n   * The ArtBox's default value is the page's CropBox.\n   *\n   * @returns An object defining the lower left corner of the ArtBox and its\n   *          width & height.\n   */\n\n\n  PDFPage.prototype.getArtBox = function () {\n    var _a;\n\n    var artBox = this.node.ArtBox();\n    return (_a = artBox === null || artBox === void 0 ? void 0 : artBox.asRectangle()) !== null && _a !== void 0 ? _a : this.getCropBox();\n  };\n  /**\n   * Translate this page's content to a new location on the page. This operation\n   * is often useful after resizing the page with [[setSize]]. For example:\n   * ```js\n   * // Add 50 units of whitespace to the top and right of the page\n   * page.setSize(page.getWidth() + 50, page.getHeight() + 50)\n   *\n   * // Move the page's content from the lower-left corner of the page\n   * // to the top-right corner.\n   * page.translateContent(50, 50)\n   *\n   * // Now there are 50 units of whitespace to the left and bottom of the page\n   * ```\n   * See also: [[resetPosition]]\n   * @param x The new position on the x-axis for this page's content.\n   * @param y The new position on the y-axis for this page's content.\n   */\n\n\n  PDFPage.prototype.translateContent = function (x, y) {\n    assertIs(x, 'x', ['number']);\n    assertIs(y, 'y', ['number']);\n    this.node.normalize();\n    this.getContentStream();\n    var start = this.createContentStream(pushGraphicsState(), translate(x, y));\n    var startRef = this.doc.context.register(start);\n    var end = this.createContentStream(popGraphicsState());\n    var endRef = this.doc.context.register(end);\n    this.node.wrapContentStreams(startRef, endRef);\n  };\n  /**\n   * Reset the x and y coordinates of this page to `(0, 0)`. This operation is\n   * often useful after calling [[translateContent]]. For example:\n   * ```js\n   * // Shift the page's contents up and to the right by 50 units\n   * page.translateContent(50, 50)\n   *\n   * // This text will shifted - it will be drawn at (50, 50)\n   * page.drawText('I am shifted')\n   *\n   * // Move back to (0, 0)\n   * page.resetPosition()\n   *\n   * // This text will not be shifted - it will be drawn at (0, 0)\n   * page.drawText('I am not shifted')\n   * ```\n   */\n\n\n  PDFPage.prototype.resetPosition = function () {\n    this.getContentStream(false);\n    this.x = 0;\n    this.y = 0;\n  };\n  /**\n   * Choose a default font for this page. The default font will be used whenever\n   * text is drawn on this page and no font is specified. For example:\n   * ```js\n   * import { StandardFonts } from 'pdf-lib'\n   *\n   * const timesRomanFont = await pdfDoc.embedFont(StandardFonts.TimesRoman)\n   * const helveticaFont = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const courierFont = await pdfDoc.embedFont(StandardFonts.Courier)\n   *\n   * const page = pdfDoc.addPage()\n   *\n   * page.setFont(helveticaFont)\n   * page.drawText('I will be drawn in Helvetica')\n   *\n   * page.setFont(timesRomanFont)\n   * page.drawText('I will be drawn in Courier', { font: courierFont })\n   * ```\n   * @param font The default font to be used when drawing text on this page.\n   */\n\n\n  PDFPage.prototype.setFont = function (font) {\n    // TODO: Reuse image Font name if we've already added this image to Resources.Fonts\n    assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n    this.font = font;\n    this.fontKey = addRandomSuffix(this.font.name);\n    this.node.setFontDictionary(PDFName.of(this.fontKey), this.font.ref);\n  };\n  /**\n   * Choose a default font size for this page. The default font size will be\n   * used whenever text is drawn on this page and no font size is specified.\n   * For example:\n   * ```js\n   * page.setFontSize(12)\n   * page.drawText('I will be drawn in size 12')\n   *\n   * page.setFontSize(36)\n   * page.drawText('I will be drawn in size 24', { fontSize: 24 })\n   * ```\n   * @param fontSize The default font size to be used when drawing text on this\n   *                 page.\n   */\n\n\n  PDFPage.prototype.setFontSize = function (fontSize) {\n    assertIs(fontSize, 'fontSize', ['number']);\n    this.fontSize = fontSize;\n  };\n  /**\n   * Choose a default font color for this page. The default font color will be\n   * used whenever text is drawn on this page and no font color is specified.\n   * For example:\n   * ```js\n   * import { rgb, cmyk, grayscale } from 'pdf-lib'\n   *\n   * page.setFontColor(rgb(0.97, 0.02, 0.97))\n   * page.drawText('I will be drawn in pink')\n   *\n   * page.setFontColor(cmyk(0.4, 0.7, 0.39, 0.15))\n   * page.drawText('I will be drawn in gray', { color: grayscale(0.5) })\n   * ```\n   * @param fontColor The default font color to be used when drawing text on\n   *                  this page.\n   */\n\n\n  PDFPage.prototype.setFontColor = function (fontColor) {\n    assertIs(fontColor, 'fontColor', [[Object, 'Color']]);\n    this.fontColor = fontColor;\n  };\n  /**\n   * Choose a default line height for this page. The default line height will be\n   * used whenever text is drawn on this page and no line height is specified.\n   * For example:\n   * ```js\n   * page.setLineHeight(12);\n   * page.drawText('These lines will be vertically \\n separated by 12 units')\n   *\n   * page.setLineHeight(36);\n   * page.drawText('These lines will be vertically \\n separated by 24 units', {\n   *   lineHeight: 24\n   * })\n   * ```\n   * @param lineHeight The default line height to be used when drawing text on\n   *                   this page.\n   */\n\n\n  PDFPage.prototype.setLineHeight = function (lineHeight) {\n    assertIs(lineHeight, 'lineHeight', ['number']);\n    this.lineHeight = lineHeight;\n  };\n  /**\n   * Get the default position of this page. For example:\n   * ```js\n   * const { x, y } = page.getPosition()\n   * ```\n   * @returns The default position of the page.\n   */\n\n\n  PDFPage.prototype.getPosition = function () {\n    return {\n      x: this.x,\n      y: this.y\n    };\n  };\n  /**\n   * Get the default x coordinate of this page. For example:\n   * ```js\n   * const x = page.getX()\n   * ```\n   * @returns The default x coordinate of the page.\n   */\n\n\n  PDFPage.prototype.getX = function () {\n    return this.x;\n  };\n  /**\n   * Get the default y coordinate of this page. For example:\n   * ```js\n   * const y = page.getY()\n   * ```\n   * @returns The default y coordinate of the page.\n   */\n\n\n  PDFPage.prototype.getY = function () {\n    return this.y;\n  };\n  /**\n   * Change the default position of this page. For example:\n   * ```js\n   * page.moveTo(0, 0)\n   * page.drawText('I will be drawn at the origin')\n   *\n   * page.moveTo(0, 25)\n   * page.drawText('I will be drawn 25 units up')\n   *\n   * page.moveTo(25, 25)\n   * page.drawText('I will be drawn 25 units up and 25 units to the right')\n   * ```\n   * @param x The new default position on the x-axis for this page.\n   * @param y The new default position on the y-axis for this page.\n   */\n\n\n  PDFPage.prototype.moveTo = function (x, y) {\n    assertIs(x, 'x', ['number']);\n    assertIs(y, 'y', ['number']);\n    this.x = x;\n    this.y = y;\n  };\n  /**\n   * Change the default position of this page to be further down the y-axis.\n   * For example:\n   * ```js\n   * page.moveTo(50, 50)\n   * page.drawText('I will be drawn at (50, 50)')\n   *\n   * page.moveDown(10)\n   * page.drawText('I will be drawn at (50, 40)')\n   * ```\n   * @param yDecrease The amount by which the page's default position along the\n   *                  y-axis should be decreased.\n   */\n\n\n  PDFPage.prototype.moveDown = function (yDecrease) {\n    assertIs(yDecrease, 'yDecrease', ['number']);\n    this.y -= yDecrease;\n  };\n  /**\n   * Change the default position of this page to be further up the y-axis.\n   * For example:\n   * ```js\n   * page.moveTo(50, 50)\n   * page.drawText('I will be drawn at (50, 50)')\n   *\n   * page.moveUp(10)\n   * page.drawText('I will be drawn at (50, 60)')\n   * ```\n   * @param yIncrease The amount by which the page's default position along the\n   *                  y-axis should be increased.\n   */\n\n\n  PDFPage.prototype.moveUp = function (yIncrease) {\n    assertIs(yIncrease, 'yIncrease', ['number']);\n    this.y += yIncrease;\n  };\n  /**\n   * Change the default position of this page to be further left on the x-axis.\n   * For example:\n   * ```js\n   * page.moveTo(50, 50)\n   * page.drawText('I will be drawn at (50, 50)')\n   *\n   * page.moveLeft(10)\n   * page.drawText('I will be drawn at (40, 50)')\n   * ```\n   * @param xDecrease The amount by which the page's default position along the\n   *                  x-axis should be decreased.\n   */\n\n\n  PDFPage.prototype.moveLeft = function (xDecrease) {\n    assertIs(xDecrease, 'xDecrease', ['number']);\n    this.x -= xDecrease;\n  };\n  /**\n   * Change the default position of this page to be further right on the y-axis.\n   * For example:\n   * ```js\n   * page.moveTo(50, 50)\n   * page.drawText('I will be drawn at (50, 50)')\n   *\n   * page.moveRight(10)\n   * page.drawText('I will be drawn at (60, 50)')\n   * ```\n   * @param xIncrease The amount by which the page's default position along the\n   *                  x-axis should be increased.\n   */\n\n\n  PDFPage.prototype.moveRight = function (xIncrease) {\n    assertIs(xIncrease, 'xIncrease', ['number']);\n    this.x += xIncrease;\n  };\n  /**\n   * Push one or more operators to the end of this page's current content\n   * stream. For example:\n   * ```js\n   * import {\n   *   pushGraphicsState,\n   *   moveTo,\n   *   lineTo,\n   *   closePath,\n   *   setFillingColor,\n   *   rgb,\n   *   fill,\n   *   popGraphicsState,\n   * } from 'pdf-lib'\n   *\n   * // Draw a green triangle in the lower-left corner of the page\n   * page.pushOperators(\n   *   pushGraphicsState(),\n   *   moveTo(0, 0),\n   *   lineTo(100, 0),\n   *   lineTo(50, 100),\n   *   closePath(),\n   *   setFillingColor(rgb(0.0, 1.0, 0.0)),\n   *   fill(),\n   *   popGraphicsState(),\n   * )\n   * ```\n   * @param operator The operators to be pushed.\n   */\n\n\n  PDFPage.prototype.pushOperators = function () {\n    var operator = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      operator[_i] = arguments[_i];\n    }\n\n    assertEachIs(operator, 'operator', [[PDFOperator, 'PDFOperator']]);\n    var contentStream = this.getContentStream();\n    contentStream.push.apply(contentStream, operator);\n  };\n  /**\n   * Draw one or more lines of text on this page. For example:\n   * ```js\n   * import { StandardFonts, rgb } from 'pdf-lib'\n   *\n   * const helveticaFont = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const timesRomanFont = await pdfDoc.embedFont(StandardFonts.TimesRoman)\n   *\n   * const page = pdfDoc.addPage()\n   *\n   * page.setFont(helveticaFont)\n   *\n   * page.moveTo(5, 200)\n   * page.drawText('The Life of an Egg', { size: 36 })\n   *\n   * page.moveDown(36)\n   * page.drawText('An Epic Tale of Woe', { size: 30 })\n   *\n   * page.drawText(\n   *   `Humpty Dumpty sat on a wall \\n` +\n   *   `Humpty Dumpty had a great fall; \\n` +\n   *   `All the king's horses and all the king's men \\n` +\n   *   `Couldn't put Humpty together again. \\n`,\n   *   {\n   *     x: 25,\n   *     y: 100,\n   *     font: timesRomanFont,\n   *     size: 24,\n   *     color: rgb(1, 0, 0),\n   *     lineHeight: 24,\n   *     opacity: 0.75,\n   *   },\n   * )\n   * ```\n   * @param text The text to be drawn.\n   * @param options The options to be used when drawing the text.\n   */\n\n\n  PDFPage.prototype.drawText = function (text, options) {\n    var _a, _b, _c, _d, _e, _f, _g;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    assertIs(text, 'text', ['string']);\n    assertOrUndefined(options.color, 'options.color', [[Object, 'Color']]);\n    assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\n    assertOrUndefined(options.font, 'options.font', [[PDFFont, 'PDFFont']]);\n    assertOrUndefined(options.size, 'options.size', ['number']);\n    assertOrUndefined(options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n    assertOrUndefined(options.xSkew, 'options.xSkew', [[Object, 'Rotation']]);\n    assertOrUndefined(options.ySkew, 'options.ySkew', [[Object, 'Rotation']]);\n    assertOrUndefined(options.x, 'options.x', ['number']);\n    assertOrUndefined(options.y, 'options.y', ['number']);\n    assertOrUndefined(options.lineHeight, 'options.lineHeight', ['number']);\n    assertOrUndefined(options.maxWidth, 'options.maxWidth', ['number']);\n    assertOrUndefined(options.wordBreaks, 'options.wordBreaks', [Array]);\n    assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', BlendMode);\n    var originalFont = this.getFont()[0];\n    if (options.font) this.setFont(options.font);\n\n    var _h = this.getFont(),\n        font = _h[0],\n        fontKey = _h[1];\n\n    var fontSize = options.size || this.fontSize;\n    var wordBreaks = options.wordBreaks || this.doc.defaultWordBreaks;\n\n    var textWidth = function (t) {\n      return font.widthOfTextAtSize(t, fontSize);\n    };\n\n    var lines = options.maxWidth === undefined ? lineSplit(cleanText(text)) : breakTextIntoLines(text, wordBreaks, options.maxWidth, textWidth);\n    var encodedLines = new Array(lines.length);\n\n    for (var idx = 0, len = lines.length; idx < len; idx++) {\n      encodedLines[idx] = font.encodeText(lines[idx]);\n    }\n\n    var graphicsStateKey = this.maybeEmbedGraphicsState({\n      opacity: options.opacity,\n      blendMode: options.blendMode\n    });\n    var contentStream = this.getContentStream();\n    contentStream.push.apply(contentStream, drawLinesOfText(encodedLines, {\n      color: (_a = options.color) !== null && _a !== void 0 ? _a : this.fontColor,\n      font: fontKey,\n      size: fontSize,\n      rotate: (_b = options.rotate) !== null && _b !== void 0 ? _b : degrees(0),\n      xSkew: (_c = options.xSkew) !== null && _c !== void 0 ? _c : degrees(0),\n      ySkew: (_d = options.ySkew) !== null && _d !== void 0 ? _d : degrees(0),\n      x: (_e = options.x) !== null && _e !== void 0 ? _e : this.x,\n      y: (_f = options.y) !== null && _f !== void 0 ? _f : this.y,\n      lineHeight: (_g = options.lineHeight) !== null && _g !== void 0 ? _g : this.lineHeight,\n      graphicsState: graphicsStateKey\n    }));\n    if (options.font) this.setFont(originalFont);\n  };\n  /**\n   * Draw an image on this page. For example:\n   * ```js\n   * import { degrees } from 'pdf-lib'\n   *\n   * const jpgUrl = 'https://pdf-lib.js.org/assets/cat_riding_unicorn.jpg'\n   * const jpgImageBytes = await fetch(jpgUrl).then((res) => res.arrayBuffer())\n   *\n   * const jpgImage = await pdfDoc.embedJpg(jpgImageBytes)\n   * const jpgDims = jpgImage.scale(0.5)\n   *\n   * const page = pdfDoc.addPage()\n   *\n   * page.drawImage(jpgImage, {\n   *   x: 25,\n   *   y: 25,\n   *   width: jpgDims.width,\n   *   height: jpgDims.height,\n   *   rotate: degrees(30),\n   *   opacity: 0.75,\n   * })\n   * ```\n   * @param image The image to be drawn.\n   * @param options The options to be used when drawing the image.\n   */\n\n\n  PDFPage.prototype.drawImage = function (image, options) {\n    var _a, _b, _c, _d, _e, _f, _g;\n\n    if (options === void 0) {\n      options = {};\n    } // TODO: Reuse image XObject name if we've already added this image to Resources.XObjects\n\n\n    assertIs(image, 'image', [[PDFImage, 'PDFImage']]);\n    assertOrUndefined(options.x, 'options.x', ['number']);\n    assertOrUndefined(options.y, 'options.y', ['number']);\n    assertOrUndefined(options.width, 'options.width', ['number']);\n    assertOrUndefined(options.height, 'options.height', ['number']);\n    assertOrUndefined(options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n    assertOrUndefined(options.xSkew, 'options.xSkew', [[Object, 'Rotation']]);\n    assertOrUndefined(options.ySkew, 'options.ySkew', [[Object, 'Rotation']]);\n    assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\n    assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', BlendMode);\n    var xObjectKey = addRandomSuffix('Image', 10);\n    this.node.setXObject(PDFName.of(xObjectKey), image.ref);\n    var graphicsStateKey = this.maybeEmbedGraphicsState({\n      opacity: options.opacity,\n      blendMode: options.blendMode\n    });\n    var contentStream = this.getContentStream();\n    contentStream.push.apply(contentStream, drawImage(xObjectKey, {\n      x: (_a = options.x) !== null && _a !== void 0 ? _a : this.x,\n      y: (_b = options.y) !== null && _b !== void 0 ? _b : this.y,\n      width: (_c = options.width) !== null && _c !== void 0 ? _c : image.size().width,\n      height: (_d = options.height) !== null && _d !== void 0 ? _d : image.size().height,\n      rotate: (_e = options.rotate) !== null && _e !== void 0 ? _e : degrees(0),\n      xSkew: (_f = options.xSkew) !== null && _f !== void 0 ? _f : degrees(0),\n      ySkew: (_g = options.ySkew) !== null && _g !== void 0 ? _g : degrees(0),\n      graphicsState: graphicsStateKey\n    }));\n  };\n  /**\n   * Draw an embedded PDF page on this page. For example:\n   * ```js\n   * import { degrees } from 'pdf-lib'\n   *\n   * const pdfDoc = await PDFDocument.create()\n   * const page = pdfDoc.addPage()\n   *\n   * const sourcePdfUrl = 'https://pdf-lib.js.org/assets/with_large_page_count.pdf'\n   * const sourcePdf = await fetch(sourcePdfUrl).then((res) => res.arrayBuffer())\n   *\n   * // Embed page 74 from the PDF\n   * const [embeddedPage] = await pdfDoc.embedPdf(sourcePdf, 73)\n   *\n   * page.drawPage(embeddedPage, {\n   *   x: 250,\n   *   y: 200,\n   *   xScale: 0.5,\n   *   yScale: 0.5,\n   *   rotate: degrees(30),\n   *   opacity: 0.75,\n   * })\n   * ```\n   *\n   * The `options` argument accepts both `width`/`height` and `xScale`/`yScale`\n   * as options. Since each of these options defines the size of the drawn page,\n   * if both options are given, `width` and `height` take precedence and the\n   * corresponding scale variants are ignored.\n   *\n   * @param embeddedPage The embedded page to be drawn.\n   * @param options The options to be used when drawing the embedded page.\n   */\n\n\n  PDFPage.prototype.drawPage = function (embeddedPage, options) {\n    var _a, _b, _c, _d, _e;\n\n    if (options === void 0) {\n      options = {};\n    } // TODO: Reuse embeddedPage XObject name if we've already added this embeddedPage to Resources.XObjects\n\n\n    assertIs(embeddedPage, 'embeddedPage', [[PDFEmbeddedPage, 'PDFEmbeddedPage']]);\n    assertOrUndefined(options.x, 'options.x', ['number']);\n    assertOrUndefined(options.y, 'options.y', ['number']);\n    assertOrUndefined(options.xScale, 'options.xScale', ['number']);\n    assertOrUndefined(options.yScale, 'options.yScale', ['number']);\n    assertOrUndefined(options.width, 'options.width', ['number']);\n    assertOrUndefined(options.height, 'options.height', ['number']);\n    assertOrUndefined(options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n    assertOrUndefined(options.xSkew, 'options.xSkew', [[Object, 'Rotation']]);\n    assertOrUndefined(options.ySkew, 'options.ySkew', [[Object, 'Rotation']]);\n    assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\n    assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', BlendMode);\n    var xObjectKey = addRandomSuffix('EmbeddedPdfPage', 10);\n    this.node.setXObject(PDFName.of(xObjectKey), embeddedPage.ref);\n    var graphicsStateKey = this.maybeEmbedGraphicsState({\n      opacity: options.opacity,\n      blendMode: options.blendMode\n    }); // prettier-ignore\n\n    var xScale = options.width !== undefined ? options.width / embeddedPage.width : options.xScale !== undefined ? options.xScale : 1; // prettier-ignore\n\n    var yScale = options.height !== undefined ? options.height / embeddedPage.height : options.yScale !== undefined ? options.yScale : 1;\n    var contentStream = this.getContentStream();\n    contentStream.push.apply(contentStream, drawPage(xObjectKey, {\n      x: (_a = options.x) !== null && _a !== void 0 ? _a : this.x,\n      y: (_b = options.y) !== null && _b !== void 0 ? _b : this.y,\n      xScale: xScale,\n      yScale: yScale,\n      rotate: (_c = options.rotate) !== null && _c !== void 0 ? _c : degrees(0),\n      xSkew: (_d = options.xSkew) !== null && _d !== void 0 ? _d : degrees(0),\n      ySkew: (_e = options.ySkew) !== null && _e !== void 0 ? _e : degrees(0),\n      graphicsState: graphicsStateKey\n    }));\n  };\n  /**\n   * Draw an SVG path on this page. For example:\n   * ```js\n   * import { rgb } from 'pdf-lib'\n   *\n   * const svgPath = 'M 0,20 L 100,160 Q 130,200 150,120 C 190,-40 200,200 300,150 L 400,90'\n   *\n   * // Draw path as black line\n   * page.drawSvgPath(svgPath, { x: 25, y: 75 })\n   *\n   * // Change border style and opacity\n   * page.drawSvgPath(svgPath, {\n   *   x: 25,\n   *   y: 275,\n   *   borderColor: rgb(0.5, 0.5, 0.5),\n   *   borderWidth: 2,\n   *   borderOpacity: 0.75,\n   * })\n   *\n   * // Set fill color and opacity\n   * page.drawSvgPath(svgPath, {\n   *   x: 25,\n   *   y: 475,\n   *   color: rgb(1.0, 0, 0),\n   *   opacity: 0.75,\n   * })\n   *\n   * // Draw 50% of original size\n   * page.drawSvgPath(svgPath, {\n   *   x: 25,\n   *   y: 675,\n   *   scale: 0.5,\n   * })\n   * ```\n   * @param path The SVG path to be drawn.\n   * @param options The options to be used when drawing the SVG path.\n   */\n\n\n  PDFPage.prototype.drawSvgPath = function (path, options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    assertIs(path, 'path', ['string']);\n    assertOrUndefined(options.x, 'options.x', ['number']);\n    assertOrUndefined(options.y, 'options.y', ['number']);\n    assertOrUndefined(options.scale, 'options.scale', ['number']);\n    assertOrUndefined(options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n    assertOrUndefined(options.borderWidth, 'options.borderWidth', ['number']);\n    assertOrUndefined(options.color, 'options.color', [[Object, 'Color']]);\n    assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\n    assertOrUndefined(options.borderColor, 'options.borderColor', [[Object, 'Color']]);\n    assertOrUndefined(options.borderDashArray, 'options.borderDashArray', [Array]);\n    assertOrUndefined(options.borderDashPhase, 'options.borderDashPhase', ['number']);\n    assertIsOneOfOrUndefined(options.borderLineCap, 'options.borderLineCap', LineCapStyle);\n    assertRangeOrUndefined(options.borderOpacity, 'options.borderOpacity', 0, 1);\n    assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', BlendMode);\n    var graphicsStateKey = this.maybeEmbedGraphicsState({\n      opacity: options.opacity,\n      borderOpacity: options.borderOpacity,\n      blendMode: options.blendMode\n    });\n\n    if (!('color' in options) && !('borderColor' in options)) {\n      options.borderColor = rgb(0, 0, 0);\n    }\n\n    var contentStream = this.getContentStream();\n    contentStream.push.apply(contentStream, drawSvgPath(path, {\n      x: (_a = options.x) !== null && _a !== void 0 ? _a : this.x,\n      y: (_b = options.y) !== null && _b !== void 0 ? _b : this.y,\n      scale: options.scale,\n      rotate: (_c = options.rotate) !== null && _c !== void 0 ? _c : degrees(0),\n      color: (_d = options.color) !== null && _d !== void 0 ? _d : undefined,\n      borderColor: (_e = options.borderColor) !== null && _e !== void 0 ? _e : undefined,\n      borderWidth: (_f = options.borderWidth) !== null && _f !== void 0 ? _f : 0,\n      borderDashArray: (_g = options.borderDashArray) !== null && _g !== void 0 ? _g : undefined,\n      borderDashPhase: (_h = options.borderDashPhase) !== null && _h !== void 0 ? _h : undefined,\n      borderLineCap: (_j = options.borderLineCap) !== null && _j !== void 0 ? _j : undefined,\n      graphicsState: graphicsStateKey\n    }));\n  };\n  /**\n   * Draw a line on this page. For example:\n   * ```js\n   * import { rgb } from 'pdf-lib'\n   *\n   * page.drawLine({\n   *   start: { x: 25, y: 75 },\n   *   end: { x: 125, y: 175 },\n   *   thickness: 2,\n   *   color: rgb(0.75, 0.2, 0.2),\n   *   opacity: 0.75,\n   * })\n   * ```\n   * @param options The options to be used when drawing the line.\n   */\n\n\n  PDFPage.prototype.drawLine = function (options) {\n    var _a, _b, _c, _d, _e;\n\n    assertIs(options.start, 'options.start', [[Object, '{ x: number, y: number }']]);\n    assertIs(options.end, 'options.end', [[Object, '{ x: number, y: number }']]);\n    assertIs(options.start.x, 'options.start.x', ['number']);\n    assertIs(options.start.y, 'options.start.y', ['number']);\n    assertIs(options.end.x, 'options.end.x', ['number']);\n    assertIs(options.end.y, 'options.end.y', ['number']);\n    assertOrUndefined(options.thickness, 'options.thickness', ['number']);\n    assertOrUndefined(options.color, 'options.color', [[Object, 'Color']]);\n    assertOrUndefined(options.dashArray, 'options.dashArray', [Array]);\n    assertOrUndefined(options.dashPhase, 'options.dashPhase', ['number']);\n    assertIsOneOfOrUndefined(options.lineCap, 'options.lineCap', LineCapStyle);\n    assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\n    assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', BlendMode);\n    var graphicsStateKey = this.maybeEmbedGraphicsState({\n      borderOpacity: options.opacity,\n      blendMode: options.blendMode\n    });\n\n    if (!('color' in options)) {\n      options.color = rgb(0, 0, 0);\n    }\n\n    var contentStream = this.getContentStream();\n    contentStream.push.apply(contentStream, drawLine({\n      start: options.start,\n      end: options.end,\n      thickness: (_a = options.thickness) !== null && _a !== void 0 ? _a : 1,\n      color: (_b = options.color) !== null && _b !== void 0 ? _b : undefined,\n      dashArray: (_c = options.dashArray) !== null && _c !== void 0 ? _c : undefined,\n      dashPhase: (_d = options.dashPhase) !== null && _d !== void 0 ? _d : undefined,\n      lineCap: (_e = options.lineCap) !== null && _e !== void 0 ? _e : undefined,\n      graphicsState: graphicsStateKey\n    }));\n  };\n  /**\n   * Draw a rectangle on this page. For example:\n   * ```js\n   * import { degrees, grayscale, rgb } from 'pdf-lib'\n   *\n   * page.drawRectangle({\n   *   x: 25,\n   *   y: 75,\n   *   width: 250,\n   *   height: 75,\n   *   rotate: degrees(-15),\n   *   borderWidth: 5,\n   *   borderColor: grayscale(0.5),\n   *   color: rgb(0.75, 0.2, 0.2),\n   *   opacity: 0.5,\n   *   borderOpacity: 0.75,\n   * })\n   * ```\n   * @param options The options to be used when drawing the rectangle.\n   */\n\n\n  PDFPage.prototype.drawRectangle = function (options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    assertOrUndefined(options.x, 'options.x', ['number']);\n    assertOrUndefined(options.y, 'options.y', ['number']);\n    assertOrUndefined(options.width, 'options.width', ['number']);\n    assertOrUndefined(options.height, 'options.height', ['number']);\n    assertOrUndefined(options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n    assertOrUndefined(options.xSkew, 'options.xSkew', [[Object, 'Rotation']]);\n    assertOrUndefined(options.ySkew, 'options.ySkew', [[Object, 'Rotation']]);\n    assertOrUndefined(options.borderWidth, 'options.borderWidth', ['number']);\n    assertOrUndefined(options.color, 'options.color', [[Object, 'Color']]);\n    assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\n    assertOrUndefined(options.borderColor, 'options.borderColor', [[Object, 'Color']]);\n    assertOrUndefined(options.borderDashArray, 'options.borderDashArray', [Array]);\n    assertOrUndefined(options.borderDashPhase, 'options.borderDashPhase', ['number']);\n    assertIsOneOfOrUndefined(options.borderLineCap, 'options.borderLineCap', LineCapStyle);\n    assertRangeOrUndefined(options.borderOpacity, 'options.borderOpacity', 0, 1);\n    assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', BlendMode);\n    var graphicsStateKey = this.maybeEmbedGraphicsState({\n      opacity: options.opacity,\n      borderOpacity: options.borderOpacity,\n      blendMode: options.blendMode\n    });\n\n    if (!('color' in options) && !('borderColor' in options)) {\n      options.color = rgb(0, 0, 0);\n    }\n\n    var contentStream = this.getContentStream();\n    contentStream.push.apply(contentStream, drawRectangle({\n      x: (_a = options.x) !== null && _a !== void 0 ? _a : this.x,\n      y: (_b = options.y) !== null && _b !== void 0 ? _b : this.y,\n      width: (_c = options.width) !== null && _c !== void 0 ? _c : 150,\n      height: (_d = options.height) !== null && _d !== void 0 ? _d : 100,\n      rotate: (_e = options.rotate) !== null && _e !== void 0 ? _e : degrees(0),\n      xSkew: (_f = options.xSkew) !== null && _f !== void 0 ? _f : degrees(0),\n      ySkew: (_g = options.ySkew) !== null && _g !== void 0 ? _g : degrees(0),\n      borderWidth: (_h = options.borderWidth) !== null && _h !== void 0 ? _h : 0,\n      color: (_j = options.color) !== null && _j !== void 0 ? _j : undefined,\n      borderColor: (_k = options.borderColor) !== null && _k !== void 0 ? _k : undefined,\n      borderDashArray: (_l = options.borderDashArray) !== null && _l !== void 0 ? _l : undefined,\n      borderDashPhase: (_m = options.borderDashPhase) !== null && _m !== void 0 ? _m : undefined,\n      graphicsState: graphicsStateKey,\n      borderLineCap: (_o = options.borderLineCap) !== null && _o !== void 0 ? _o : undefined\n    }));\n  };\n  /**\n   * Draw a square on this page. For example:\n   * ```js\n   * import { degrees, grayscale, rgb } from 'pdf-lib'\n   *\n   * page.drawSquare({\n   *   x: 25,\n   *   y: 75,\n   *   size: 100,\n   *   rotate: degrees(-15),\n   *   borderWidth: 5,\n   *   borderColor: grayscale(0.5),\n   *   color: rgb(0.75, 0.2, 0.2),\n   *   opacity: 0.5,\n   *   borderOpacity: 0.75,\n   * })\n   * ```\n   * @param options The options to be used when drawing the square.\n   */\n\n\n  PDFPage.prototype.drawSquare = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var size = options.size;\n    assertOrUndefined(size, 'size', ['number']);\n    this.drawRectangle(__assign(__assign({}, options), {\n      width: size,\n      height: size\n    }));\n  };\n  /**\n   * Draw an ellipse on this page. For example:\n   * ```js\n   * import { grayscale, rgb } from 'pdf-lib'\n   *\n   * page.drawEllipse({\n   *   x: 200,\n   *   y: 75,\n   *   xScale: 100,\n   *   yScale: 50,\n   *   borderWidth: 5,\n   *   borderColor: grayscale(0.5),\n   *   color: rgb(0.75, 0.2, 0.2),\n   *   opacity: 0.5,\n   *   borderOpacity: 0.75,\n   * })\n   * ```\n   * @param options The options to be used when drawing the ellipse.\n   */\n\n\n  PDFPage.prototype.drawEllipse = function (options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    assertOrUndefined(options.x, 'options.x', ['number']);\n    assertOrUndefined(options.y, 'options.y', ['number']);\n    assertOrUndefined(options.xScale, 'options.xScale', ['number']);\n    assertOrUndefined(options.yScale, 'options.yScale', ['number']);\n    assertOrUndefined(options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n    assertOrUndefined(options.color, 'options.color', [[Object, 'Color']]);\n    assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\n    assertOrUndefined(options.borderColor, 'options.borderColor', [[Object, 'Color']]);\n    assertRangeOrUndefined(options.borderOpacity, 'options.borderOpacity', 0, 1);\n    assertOrUndefined(options.borderWidth, 'options.borderWidth', ['number']);\n    assertOrUndefined(options.borderDashArray, 'options.borderDashArray', [Array]);\n    assertOrUndefined(options.borderDashPhase, 'options.borderDashPhase', ['number']);\n    assertIsOneOfOrUndefined(options.borderLineCap, 'options.borderLineCap', LineCapStyle);\n    assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', BlendMode);\n    var graphicsStateKey = this.maybeEmbedGraphicsState({\n      opacity: options.opacity,\n      borderOpacity: options.borderOpacity,\n      blendMode: options.blendMode\n    });\n\n    if (!('color' in options) && !('borderColor' in options)) {\n      options.color = rgb(0, 0, 0);\n    }\n\n    var contentStream = this.getContentStream();\n    contentStream.push.apply(contentStream, drawEllipse({\n      x: (_a = options.x) !== null && _a !== void 0 ? _a : this.x,\n      y: (_b = options.y) !== null && _b !== void 0 ? _b : this.y,\n      xScale: (_c = options.xScale) !== null && _c !== void 0 ? _c : 100,\n      yScale: (_d = options.yScale) !== null && _d !== void 0 ? _d : 100,\n      rotate: (_e = options.rotate) !== null && _e !== void 0 ? _e : undefined,\n      color: (_f = options.color) !== null && _f !== void 0 ? _f : undefined,\n      borderColor: (_g = options.borderColor) !== null && _g !== void 0 ? _g : undefined,\n      borderWidth: (_h = options.borderWidth) !== null && _h !== void 0 ? _h : 0,\n      borderDashArray: (_j = options.borderDashArray) !== null && _j !== void 0 ? _j : undefined,\n      borderDashPhase: (_k = options.borderDashPhase) !== null && _k !== void 0 ? _k : undefined,\n      borderLineCap: (_l = options.borderLineCap) !== null && _l !== void 0 ? _l : undefined,\n      graphicsState: graphicsStateKey\n    }));\n  };\n  /**\n   * Draw a circle on this page. For example:\n   * ```js\n   * import { grayscale, rgb } from 'pdf-lib'\n   *\n   * page.drawCircle({\n   *   x: 200,\n   *   y: 150,\n   *   size: 100,\n   *   borderWidth: 5,\n   *   borderColor: grayscale(0.5),\n   *   color: rgb(0.75, 0.2, 0.2),\n   *   opacity: 0.5,\n   *   borderOpacity: 0.75,\n   * })\n   * ```\n   * @param options The options to be used when drawing the ellipse.\n   */\n\n\n  PDFPage.prototype.drawCircle = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _a = options.size,\n        size = _a === void 0 ? 100 : _a;\n    assertOrUndefined(size, 'size', ['number']);\n    this.drawEllipse(__assign(__assign({}, options), {\n      xScale: size,\n      yScale: size\n    }));\n  };\n\n  PDFPage.prototype.getFont = function () {\n    if (!this.font || !this.fontKey) {\n      var font = this.doc.embedStandardFont(StandardFonts.Helvetica);\n      this.setFont(font);\n    }\n\n    return [this.font, this.fontKey];\n  };\n\n  PDFPage.prototype.getContentStream = function (useExisting) {\n    if (useExisting === void 0) {\n      useExisting = true;\n    }\n\n    if (useExisting && this.contentStream) return this.contentStream;\n    this.contentStream = this.createContentStream();\n    this.contentStreamRef = this.doc.context.register(this.contentStream);\n    this.node.addContentStream(this.contentStreamRef);\n    return this.contentStream;\n  };\n\n  PDFPage.prototype.createContentStream = function () {\n    var operators = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      operators[_i] = arguments[_i];\n    }\n\n    var dict = this.doc.context.obj({});\n    var contentStream = PDFContentStream.of(dict, operators);\n    return contentStream;\n  };\n\n  PDFPage.prototype.maybeEmbedGraphicsState = function (options) {\n    var opacity = options.opacity,\n        borderOpacity = options.borderOpacity,\n        blendMode = options.blendMode;\n\n    if (opacity === undefined && borderOpacity === undefined && blendMode === undefined) {\n      return undefined;\n    }\n\n    var key = addRandomSuffix('GS', 10);\n    var graphicsState = this.doc.context.obj({\n      Type: 'ExtGState',\n      ca: opacity,\n      CA: borderOpacity,\n      BM: blendMode\n    });\n    this.node.setExtGState(PDFName.of(key), graphicsState);\n    return key;\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFDocument.addPage]] and [[PDFDocument.insertPage]]\n   * > methods, which can create instances of [[PDFPage]] for you.\n   *\n   * Create an instance of [[PDFPage]] from an existing leaf node.\n   *\n   * @param leafNode The leaf node to be wrapped.\n   * @param ref The unique reference for the page.\n   * @param doc The document to which the page will belong.\n   */\n\n\n  PDFPage.of = function (leafNode, ref, doc) {\n    return new PDFPage(leafNode, ref, doc);\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFDocument.addPage]] and [[PDFDocument.insertPage]]\n   * > methods, which can create instances of [[PDFPage]] for you.\n   *\n   * Create an instance of [[PDFPage]].\n   *\n   * @param doc The document to which the page will belong.\n   */\n\n\n  PDFPage.create = function (doc) {\n    assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n    var dummyRef = PDFRef.of(-1);\n    var pageLeaf = PDFPageLeaf.withContextAndParent(doc.context, dummyRef);\n    var pageRef = doc.context.register(pageLeaf);\n    return new PDFPage(pageLeaf, pageRef, doc);\n  };\n\n  return PDFPage;\n}();\n\nexport default PDFPage;","map":{"version":3,"sources":["../../src/api/PDFPage.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign } from \"tslib\";\nimport { rgb } from \"./colors\";\nimport { drawImage, drawLine, drawLinesOfText, drawPage, drawRectangle, drawSvgPath, drawEllipse, } from \"./operations\";\nimport { popGraphicsState, pushGraphicsState, translate, LineCapStyle, } from \"./operators\";\nimport PDFDocument from \"./PDFDocument\";\nimport PDFEmbeddedPage from \"./PDFEmbeddedPage\";\nimport PDFFont from \"./PDFFont\";\nimport PDFImage from \"./PDFImage\";\nimport { BlendMode, } from \"./PDFPageOptions\";\nimport { degrees, toDegrees } from \"./rotations\";\nimport { StandardFonts } from \"./StandardFonts\";\nimport { PDFContentStream, PDFName, PDFOperator, PDFPageLeaf, PDFRef, } from \"../core\";\nimport { addRandomSuffix, assertEachIs, assertIs, assertMultiple, assertOrUndefined, breakTextIntoLines, cleanText, rectanglesAreEqual, lineSplit, assertRangeOrUndefined, assertIsOneOfOrUndefined, } from \"../utils\";\n/**\n * Represents a single page of a [[PDFDocument]].\n */\nvar PDFPage = /** @class */ (function () {\n    function PDFPage(leafNode, ref, doc) {\n        this.fontSize = 24;\n        this.fontColor = rgb(0, 0, 0);\n        this.lineHeight = 24;\n        this.x = 0;\n        this.y = 0;\n        assertIs(leafNode, 'leafNode', [[PDFPageLeaf, 'PDFPageLeaf']]);\n        assertIs(ref, 'ref', [[PDFRef, 'PDFRef']]);\n        assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n        this.node = leafNode;\n        this.ref = ref;\n        this.doc = doc;\n    }\n    /**\n     * Rotate this page by a multiple of 90 degrees. For example:\n     * ```js\n     * import { degrees } from 'pdf-lib'\n     *\n     * page.setRotation(degrees(-90))\n     * page.setRotation(degrees(0))\n     * page.setRotation(degrees(90))\n     * page.setRotation(degrees(180))\n     * page.setRotation(degrees(270))\n     * ```\n     * @param angle The angle to rotate this page.\n     */\n    PDFPage.prototype.setRotation = function (angle) {\n        var degreesAngle = toDegrees(angle);\n        assertMultiple(degreesAngle, 'degreesAngle', 90);\n        this.node.set(PDFName.of('Rotate'), this.doc.context.obj(degreesAngle));\n    };\n    /**\n     * Get this page's rotation angle in degrees. For example:\n     * ```js\n     * const rotationAngle = page.getRotation().angle;\n     * ```\n     * @returns The rotation angle of the page in degrees (always a multiple of\n     *          90 degrees).\n     */\n    PDFPage.prototype.getRotation = function () {\n        var Rotate = this.node.Rotate();\n        return degrees(Rotate ? Rotate.asNumber() : 0);\n    };\n    /**\n     * Resize this page by increasing or decreasing its width and height. For\n     * example:\n     * ```js\n     * page.setSize(250, 500)\n     * page.setSize(page.getWidth() + 50, page.getHeight() + 100)\n     * page.setSize(page.getWidth() - 50, page.getHeight() - 100)\n     * ```\n     *\n     * Note that the PDF specification does not allow for pages to have explicit\n     * widths and heights. Instead it defines the \"size\" of a page in terms of\n     * five rectangles: the MediaBox, CropBox, BleedBox, TrimBox, and ArtBox. As a\n     * result, this method cannot directly change the width and height of a page.\n     * Instead, it works by adjusting these five boxes.\n     *\n     * This method performs the following steps:\n     *   1. Set width & height of MediaBox.\n     *   2. Set width & height of CropBox, if it has same dimensions as MediaBox.\n     *   3. Set width & height of BleedBox, if it has same dimensions as MediaBox.\n     *   4. Set width & height of TrimBox, if it has same dimensions as MediaBox.\n     *   5. Set width & height of ArtBox, if it has same dimensions as MediaBox.\n     *\n     * This approach works well for most PDF documents as all PDF pages must\n     * have a MediaBox, but relatively few have a CropBox, BleedBox, TrimBox, or\n     * ArtBox. And when they do have these additional boxes, they often have the\n     * same dimensions as the MediaBox. However, if you find this method does not\n     * work for your document, consider setting the boxes directly:\n     *   * [[PDFPage.setMediaBox]]\n     *   * [[PDFPage.setCropBox]]\n     *   * [[PDFPage.setBleedBox]]\n     *   * [[PDFPage.setTrimBox]]\n     *   * [[PDFPage.setArtBox]]\n     *\n     * @param width The new width of the page.\n     * @param height The new height of the page.\n     */\n    PDFPage.prototype.setSize = function (width, height) {\n        assertIs(width, 'width', ['number']);\n        assertIs(height, 'height', ['number']);\n        var mediaBox = this.getMediaBox();\n        this.setMediaBox(mediaBox.x, mediaBox.y, width, height);\n        var cropBox = this.getCropBox();\n        var bleedBox = this.getBleedBox();\n        var trimBox = this.getTrimBox();\n        var artBox = this.getArtBox();\n        var hasCropBox = this.node.CropBox();\n        var hasBleedBox = this.node.BleedBox();\n        var hasTrimBox = this.node.TrimBox();\n        var hasArtBox = this.node.ArtBox();\n        if (hasCropBox && rectanglesAreEqual(cropBox, mediaBox)) {\n            this.setCropBox(mediaBox.x, mediaBox.y, width, height);\n        }\n        if (hasBleedBox && rectanglesAreEqual(bleedBox, mediaBox)) {\n            this.setBleedBox(mediaBox.x, mediaBox.y, width, height);\n        }\n        if (hasTrimBox && rectanglesAreEqual(trimBox, mediaBox)) {\n            this.setTrimBox(mediaBox.x, mediaBox.y, width, height);\n        }\n        if (hasArtBox && rectanglesAreEqual(artBox, mediaBox)) {\n            this.setArtBox(mediaBox.x, mediaBox.y, width, height);\n        }\n    };\n    /**\n     * Resize this page by increasing or decreasing its width. For example:\n     * ```js\n     * page.setWidth(250)\n     * page.setWidth(page.getWidth() + 50)\n     * page.setWidth(page.getWidth() - 50)\n     * ```\n     *\n     * This method uses [[PDFPage.setSize]] to set the page's width.\n     *\n     * @param width The new width of the page.\n     */\n    PDFPage.prototype.setWidth = function (width) {\n        assertIs(width, 'width', ['number']);\n        this.setSize(width, this.getSize().height);\n    };\n    /**\n     * Resize this page by increasing or decreasing its height. For example:\n     * ```js\n     * page.setHeight(500)\n     * page.setHeight(page.getWidth() + 100)\n     * page.setHeight(page.getWidth() - 100)\n     * ```\n     *\n     * This method uses [[PDFPage.setSize]] to set the page's height.\n     *\n     * @param height The new height of the page.\n     */\n    PDFPage.prototype.setHeight = function (height) {\n        assertIs(height, 'height', ['number']);\n        this.setSize(this.getSize().width, height);\n    };\n    /**\n     * Set the MediaBox of this page. For example:\n     * ```js\n     * const mediaBox = page.getMediaBox()\n     *\n     * page.setMediaBox(0, 0, 250, 500)\n     * page.setMediaBox(mediaBox.x, mediaBox.y, 50, 100)\n     * page.setMediaBox(15, 5, mediaBox.width - 50, mediaBox.height - 100)\n     * ```\n     *\n     * See [[PDFPage.getMediaBox]] for details about what the MediaBox represents.\n     *\n     * @param x The x coordinate of the lower left corner of the new MediaBox.\n     * @param y The y coordinate of the lower left corner of the new MediaBox.\n     * @param width The width of the new MediaBox.\n     * @param height The height of the new MediaBox.\n     */\n    PDFPage.prototype.setMediaBox = function (x, y, width, height) {\n        assertIs(x, 'x', ['number']);\n        assertIs(y, 'y', ['number']);\n        assertIs(width, 'width', ['number']);\n        assertIs(height, 'height', ['number']);\n        var mediaBox = this.doc.context.obj([x, y, x + width, y + height]);\n        this.node.set(PDFName.MediaBox, mediaBox);\n    };\n    /**\n     * Set the CropBox of this page. For example:\n     * ```js\n     * const cropBox = page.getCropBox()\n     *\n     * page.setCropBox(0, 0, 250, 500)\n     * page.setCropBox(cropBox.x, cropBox.y, 50, 100)\n     * page.setCropBox(15, 5, cropBox.width - 50, cropBox.height - 100)\n     * ```\n     *\n     * See [[PDFPage.getCropBox]] for details about what the CropBox represents.\n     *\n     * @param x The x coordinate of the lower left corner of the new CropBox.\n     * @param y The y coordinate of the lower left corner of the new CropBox.\n     * @param width The width of the new CropBox.\n     * @param height The height of the new CropBox.\n     */\n    PDFPage.prototype.setCropBox = function (x, y, width, height) {\n        assertIs(x, 'x', ['number']);\n        assertIs(y, 'y', ['number']);\n        assertIs(width, 'width', ['number']);\n        assertIs(height, 'height', ['number']);\n        var cropBox = this.doc.context.obj([x, y, x + width, y + height]);\n        this.node.set(PDFName.CropBox, cropBox);\n    };\n    /**\n     * Set the BleedBox of this page. For example:\n     * ```js\n     * const bleedBox = page.getBleedBox()\n     *\n     * page.setBleedBox(0, 0, 250, 500)\n     * page.setBleedBox(bleedBox.x, bleedBox.y, 50, 100)\n     * page.setBleedBox(15, 5, bleedBox.width - 50, bleedBox.height - 100)\n     * ```\n     *\n     * See [[PDFPage.getBleedBox]] for details about what the BleedBox represents.\n     *\n     * @param x The x coordinate of the lower left corner of the new BleedBox.\n     * @param y The y coordinate of the lower left corner of the new BleedBox.\n     * @param width The width of the new BleedBox.\n     * @param height The height of the new BleedBox.\n     */\n    PDFPage.prototype.setBleedBox = function (x, y, width, height) {\n        assertIs(x, 'x', ['number']);\n        assertIs(y, 'y', ['number']);\n        assertIs(width, 'width', ['number']);\n        assertIs(height, 'height', ['number']);\n        var bleedBox = this.doc.context.obj([x, y, x + width, y + height]);\n        this.node.set(PDFName.BleedBox, bleedBox);\n    };\n    /**\n     * Set the TrimBox of this page. For example:\n     * ```js\n     * const trimBox = page.getTrimBox()\n     *\n     * page.setTrimBox(0, 0, 250, 500)\n     * page.setTrimBox(trimBox.x, trimBox.y, 50, 100)\n     * page.setTrimBox(15, 5, trimBox.width - 50, trimBox.height - 100)\n     * ```\n     *\n     * See [[PDFPage.getTrimBox]] for details about what the TrimBox represents.\n     *\n     * @param x The x coordinate of the lower left corner of the new TrimBox.\n     * @param y The y coordinate of the lower left corner of the new TrimBox.\n     * @param width The width of the new TrimBox.\n     * @param height The height of the new TrimBox.\n     */\n    PDFPage.prototype.setTrimBox = function (x, y, width, height) {\n        assertIs(x, 'x', ['number']);\n        assertIs(y, 'y', ['number']);\n        assertIs(width, 'width', ['number']);\n        assertIs(height, 'height', ['number']);\n        var trimBox = this.doc.context.obj([x, y, x + width, y + height]);\n        this.node.set(PDFName.TrimBox, trimBox);\n    };\n    /**\n     * Set the ArtBox of this page. For example:\n     * ```js\n     * const artBox = page.getArtBox()\n     *\n     * page.setArtBox(0, 0, 250, 500)\n     * page.setArtBox(artBox.x, artBox.y, 50, 100)\n     * page.setArtBox(15, 5, artBox.width - 50, artBox.height - 100)\n     * ```\n     *\n     * See [[PDFPage.getArtBox]] for details about what the ArtBox represents.\n     *\n     * @param x The x coordinate of the lower left corner of the new ArtBox.\n     * @param y The y coordinate of the lower left corner of the new ArtBox.\n     * @param width The width of the new ArtBox.\n     * @param height The height of the new ArtBox.\n     */\n    PDFPage.prototype.setArtBox = function (x, y, width, height) {\n        assertIs(x, 'x', ['number']);\n        assertIs(y, 'y', ['number']);\n        assertIs(width, 'width', ['number']);\n        assertIs(height, 'height', ['number']);\n        var artBox = this.doc.context.obj([x, y, x + width, y + height]);\n        this.node.set(PDFName.ArtBox, artBox);\n    };\n    /**\n     * Get this page's width and height. For example:\n     * ```js\n     * const { width, height } = page.getSize()\n     * ```\n     *\n     * This method uses [[PDFPage.getMediaBox]] to obtain the page's\n     * width and height.\n     *\n     * @returns The width and height of the page.\n     */\n    PDFPage.prototype.getSize = function () {\n        var _a = this.getMediaBox(), width = _a.width, height = _a.height;\n        return { width: width, height: height };\n    };\n    /**\n     * Get this page's width. For example:\n     * ```js\n     * const width = page.getWidth()\n     * ```\n     *\n     * This method uses [[PDFPage.getSize]] to obtain the page's size.\n     *\n     * @returns The width of the page.\n     */\n    PDFPage.prototype.getWidth = function () {\n        return this.getSize().width;\n    };\n    /**\n     * Get this page's height. For example:\n     * ```js\n     * const height = page.getHeight()\n     * ```\n     *\n     * This method uses [[PDFPage.getSize]] to obtain the page's size.\n     *\n     * @returns The height of the page.\n     */\n    PDFPage.prototype.getHeight = function () {\n        return this.getSize().height;\n    };\n    /**\n     * Get the rectangle defining this page's MediaBox. For example:\n     * ```js\n     * const { x, y, width, height } = page.getMediaBox()\n     * ```\n     *\n     * The MediaBox of a page defines the boundaries of the physical medium on\n     * which the page is to be displayed/printed. It may include extended area\n     * surrounding the page content for bleed marks, printing marks, etc...\n     * It may also include areas close to the edges of the medium that cannot be\n     * marked because of physical limitations of the output device. Content\n     * falling outside this boundary may safely be discarded without affecting\n     * the meaning of the PDF file.\n     *\n     * @returns An object defining the lower left corner of the MediaBox and its\n     *          width & height.\n     */\n    PDFPage.prototype.getMediaBox = function () {\n        var mediaBox = this.node.MediaBox();\n        return mediaBox.asRectangle();\n    };\n    /**\n     * Get the rectangle defining this page's CropBox. For example:\n     * ```js\n     * const { x, y, width, height } = page.getCropBox()\n     * ```\n     *\n     * The CropBox of a page defines the region to which the contents of the page\n     * shall be clipped when displayed or printed. Unlike the other boxes, the\n     * CropBox does not necessarily represent the physical page geometry. It\n     * merely imposes clipping on the page contents.\n     *\n     * The CropBox's default value is the page's MediaBox.\n     *\n     * @returns An object defining the lower left corner of the CropBox and its\n     *          width & height.\n     */\n    PDFPage.prototype.getCropBox = function () {\n        var _a;\n        var cropBox = this.node.CropBox();\n        return (_a = cropBox === null || cropBox === void 0 ? void 0 : cropBox.asRectangle()) !== null && _a !== void 0 ? _a : this.getMediaBox();\n    };\n    /**\n     * Get the rectangle defining this page's BleedBox. For example:\n     * ```js\n     * const { x, y, width, height } = page.getBleedBox()\n     * ```\n     *\n     * The BleedBox of a page defines the region to which the contents of the\n     * page shall be clipped when output in a production environment. This may\n     * include any extra bleed area needed to accommodate the physical\n     * limitations of cutting, folding, and trimming equipment. The actual\n     * printed page may include printing marks that fall outside the BleedBox.\n     *\n     * The BleedBox's default value is the page's CropBox.\n     *\n     * @returns An object defining the lower left corner of the BleedBox and its\n     *          width & height.\n     */\n    PDFPage.prototype.getBleedBox = function () {\n        var _a;\n        var bleedBox = this.node.BleedBox();\n        return (_a = bleedBox === null || bleedBox === void 0 ? void 0 : bleedBox.asRectangle()) !== null && _a !== void 0 ? _a : this.getCropBox();\n    };\n    /**\n     * Get the rectangle defining this page's TrimBox. For example:\n     * ```js\n     * const { x, y, width, height } = page.getTrimBox()\n     * ```\n     *\n     * The TrimBox of a page defines the intended dimensions of the finished\n     * page after trimming. It may be smaller than the MediaBox to allow for\n     * production-related content, such as printing instructions, cut marks, or\n     * color bars.\n     *\n     * The TrimBox's default value is the page's CropBox.\n     *\n     * @returns An object defining the lower left corner of the TrimBox and its\n     *          width & height.\n     */\n    PDFPage.prototype.getTrimBox = function () {\n        var _a;\n        var trimBox = this.node.TrimBox();\n        return (_a = trimBox === null || trimBox === void 0 ? void 0 : trimBox.asRectangle()) !== null && _a !== void 0 ? _a : this.getCropBox();\n    };\n    /**\n     * Get the rectangle defining this page's ArtBox. For example:\n     * ```js\n     * const { x, y, width, height } = page.getArtBox()\n     * ```\n     *\n     * The ArtBox of a page defines the extent of the page's meaningful content\n     * (including potential white space).\n     *\n     * The ArtBox's default value is the page's CropBox.\n     *\n     * @returns An object defining the lower left corner of the ArtBox and its\n     *          width & height.\n     */\n    PDFPage.prototype.getArtBox = function () {\n        var _a;\n        var artBox = this.node.ArtBox();\n        return (_a = artBox === null || artBox === void 0 ? void 0 : artBox.asRectangle()) !== null && _a !== void 0 ? _a : this.getCropBox();\n    };\n    /**\n     * Translate this page's content to a new location on the page. This operation\n     * is often useful after resizing the page with [[setSize]]. For example:\n     * ```js\n     * // Add 50 units of whitespace to the top and right of the page\n     * page.setSize(page.getWidth() + 50, page.getHeight() + 50)\n     *\n     * // Move the page's content from the lower-left corner of the page\n     * // to the top-right corner.\n     * page.translateContent(50, 50)\n     *\n     * // Now there are 50 units of whitespace to the left and bottom of the page\n     * ```\n     * See also: [[resetPosition]]\n     * @param x The new position on the x-axis for this page's content.\n     * @param y The new position on the y-axis for this page's content.\n     */\n    PDFPage.prototype.translateContent = function (x, y) {\n        assertIs(x, 'x', ['number']);\n        assertIs(y, 'y', ['number']);\n        this.node.normalize();\n        this.getContentStream();\n        var start = this.createContentStream(pushGraphicsState(), translate(x, y));\n        var startRef = this.doc.context.register(start);\n        var end = this.createContentStream(popGraphicsState());\n        var endRef = this.doc.context.register(end);\n        this.node.wrapContentStreams(startRef, endRef);\n    };\n    /**\n     * Reset the x and y coordinates of this page to `(0, 0)`. This operation is\n     * often useful after calling [[translateContent]]. For example:\n     * ```js\n     * // Shift the page's contents up and to the right by 50 units\n     * page.translateContent(50, 50)\n     *\n     * // This text will shifted - it will be drawn at (50, 50)\n     * page.drawText('I am shifted')\n     *\n     * // Move back to (0, 0)\n     * page.resetPosition()\n     *\n     * // This text will not be shifted - it will be drawn at (0, 0)\n     * page.drawText('I am not shifted')\n     * ```\n     */\n    PDFPage.prototype.resetPosition = function () {\n        this.getContentStream(false);\n        this.x = 0;\n        this.y = 0;\n    };\n    /**\n     * Choose a default font for this page. The default font will be used whenever\n     * text is drawn on this page and no font is specified. For example:\n     * ```js\n     * import { StandardFonts } from 'pdf-lib'\n     *\n     * const timesRomanFont = await pdfDoc.embedFont(StandardFonts.TimesRoman)\n     * const helveticaFont = await pdfDoc.embedFont(StandardFonts.Helvetica)\n     * const courierFont = await pdfDoc.embedFont(StandardFonts.Courier)\n     *\n     * const page = pdfDoc.addPage()\n     *\n     * page.setFont(helveticaFont)\n     * page.drawText('I will be drawn in Helvetica')\n     *\n     * page.setFont(timesRomanFont)\n     * page.drawText('I will be drawn in Courier', { font: courierFont })\n     * ```\n     * @param font The default font to be used when drawing text on this page.\n     */\n    PDFPage.prototype.setFont = function (font) {\n        // TODO: Reuse image Font name if we've already added this image to Resources.Fonts\n        assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n        this.font = font;\n        this.fontKey = addRandomSuffix(this.font.name);\n        this.node.setFontDictionary(PDFName.of(this.fontKey), this.font.ref);\n    };\n    /**\n     * Choose a default font size for this page. The default font size will be\n     * used whenever text is drawn on this page and no font size is specified.\n     * For example:\n     * ```js\n     * page.setFontSize(12)\n     * page.drawText('I will be drawn in size 12')\n     *\n     * page.setFontSize(36)\n     * page.drawText('I will be drawn in size 24', { fontSize: 24 })\n     * ```\n     * @param fontSize The default font size to be used when drawing text on this\n     *                 page.\n     */\n    PDFPage.prototype.setFontSize = function (fontSize) {\n        assertIs(fontSize, 'fontSize', ['number']);\n        this.fontSize = fontSize;\n    };\n    /**\n     * Choose a default font color for this page. The default font color will be\n     * used whenever text is drawn on this page and no font color is specified.\n     * For example:\n     * ```js\n     * import { rgb, cmyk, grayscale } from 'pdf-lib'\n     *\n     * page.setFontColor(rgb(0.97, 0.02, 0.97))\n     * page.drawText('I will be drawn in pink')\n     *\n     * page.setFontColor(cmyk(0.4, 0.7, 0.39, 0.15))\n     * page.drawText('I will be drawn in gray', { color: grayscale(0.5) })\n     * ```\n     * @param fontColor The default font color to be used when drawing text on\n     *                  this page.\n     */\n    PDFPage.prototype.setFontColor = function (fontColor) {\n        assertIs(fontColor, 'fontColor', [[Object, 'Color']]);\n        this.fontColor = fontColor;\n    };\n    /**\n     * Choose a default line height for this page. The default line height will be\n     * used whenever text is drawn on this page and no line height is specified.\n     * For example:\n     * ```js\n     * page.setLineHeight(12);\n     * page.drawText('These lines will be vertically \\n separated by 12 units')\n     *\n     * page.setLineHeight(36);\n     * page.drawText('These lines will be vertically \\n separated by 24 units', {\n     *   lineHeight: 24\n     * })\n     * ```\n     * @param lineHeight The default line height to be used when drawing text on\n     *                   this page.\n     */\n    PDFPage.prototype.setLineHeight = function (lineHeight) {\n        assertIs(lineHeight, 'lineHeight', ['number']);\n        this.lineHeight = lineHeight;\n    };\n    /**\n     * Get the default position of this page. For example:\n     * ```js\n     * const { x, y } = page.getPosition()\n     * ```\n     * @returns The default position of the page.\n     */\n    PDFPage.prototype.getPosition = function () {\n        return { x: this.x, y: this.y };\n    };\n    /**\n     * Get the default x coordinate of this page. For example:\n     * ```js\n     * const x = page.getX()\n     * ```\n     * @returns The default x coordinate of the page.\n     */\n    PDFPage.prototype.getX = function () {\n        return this.x;\n    };\n    /**\n     * Get the default y coordinate of this page. For example:\n     * ```js\n     * const y = page.getY()\n     * ```\n     * @returns The default y coordinate of the page.\n     */\n    PDFPage.prototype.getY = function () {\n        return this.y;\n    };\n    /**\n     * Change the default position of this page. For example:\n     * ```js\n     * page.moveTo(0, 0)\n     * page.drawText('I will be drawn at the origin')\n     *\n     * page.moveTo(0, 25)\n     * page.drawText('I will be drawn 25 units up')\n     *\n     * page.moveTo(25, 25)\n     * page.drawText('I will be drawn 25 units up and 25 units to the right')\n     * ```\n     * @param x The new default position on the x-axis for this page.\n     * @param y The new default position on the y-axis for this page.\n     */\n    PDFPage.prototype.moveTo = function (x, y) {\n        assertIs(x, 'x', ['number']);\n        assertIs(y, 'y', ['number']);\n        this.x = x;\n        this.y = y;\n    };\n    /**\n     * Change the default position of this page to be further down the y-axis.\n     * For example:\n     * ```js\n     * page.moveTo(50, 50)\n     * page.drawText('I will be drawn at (50, 50)')\n     *\n     * page.moveDown(10)\n     * page.drawText('I will be drawn at (50, 40)')\n     * ```\n     * @param yDecrease The amount by which the page's default position along the\n     *                  y-axis should be decreased.\n     */\n    PDFPage.prototype.moveDown = function (yDecrease) {\n        assertIs(yDecrease, 'yDecrease', ['number']);\n        this.y -= yDecrease;\n    };\n    /**\n     * Change the default position of this page to be further up the y-axis.\n     * For example:\n     * ```js\n     * page.moveTo(50, 50)\n     * page.drawText('I will be drawn at (50, 50)')\n     *\n     * page.moveUp(10)\n     * page.drawText('I will be drawn at (50, 60)')\n     * ```\n     * @param yIncrease The amount by which the page's default position along the\n     *                  y-axis should be increased.\n     */\n    PDFPage.prototype.moveUp = function (yIncrease) {\n        assertIs(yIncrease, 'yIncrease', ['number']);\n        this.y += yIncrease;\n    };\n    /**\n     * Change the default position of this page to be further left on the x-axis.\n     * For example:\n     * ```js\n     * page.moveTo(50, 50)\n     * page.drawText('I will be drawn at (50, 50)')\n     *\n     * page.moveLeft(10)\n     * page.drawText('I will be drawn at (40, 50)')\n     * ```\n     * @param xDecrease The amount by which the page's default position along the\n     *                  x-axis should be decreased.\n     */\n    PDFPage.prototype.moveLeft = function (xDecrease) {\n        assertIs(xDecrease, 'xDecrease', ['number']);\n        this.x -= xDecrease;\n    };\n    /**\n     * Change the default position of this page to be further right on the y-axis.\n     * For example:\n     * ```js\n     * page.moveTo(50, 50)\n     * page.drawText('I will be drawn at (50, 50)')\n     *\n     * page.moveRight(10)\n     * page.drawText('I will be drawn at (60, 50)')\n     * ```\n     * @param xIncrease The amount by which the page's default position along the\n     *                  x-axis should be increased.\n     */\n    PDFPage.prototype.moveRight = function (xIncrease) {\n        assertIs(xIncrease, 'xIncrease', ['number']);\n        this.x += xIncrease;\n    };\n    /**\n     * Push one or more operators to the end of this page's current content\n     * stream. For example:\n     * ```js\n     * import {\n     *   pushGraphicsState,\n     *   moveTo,\n     *   lineTo,\n     *   closePath,\n     *   setFillingColor,\n     *   rgb,\n     *   fill,\n     *   popGraphicsState,\n     * } from 'pdf-lib'\n     *\n     * // Draw a green triangle in the lower-left corner of the page\n     * page.pushOperators(\n     *   pushGraphicsState(),\n     *   moveTo(0, 0),\n     *   lineTo(100, 0),\n     *   lineTo(50, 100),\n     *   closePath(),\n     *   setFillingColor(rgb(0.0, 1.0, 0.0)),\n     *   fill(),\n     *   popGraphicsState(),\n     * )\n     * ```\n     * @param operator The operators to be pushed.\n     */\n    PDFPage.prototype.pushOperators = function () {\n        var operator = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operator[_i] = arguments[_i];\n        }\n        assertEachIs(operator, 'operator', [[PDFOperator, 'PDFOperator']]);\n        var contentStream = this.getContentStream();\n        contentStream.push.apply(contentStream, operator);\n    };\n    /**\n     * Draw one or more lines of text on this page. For example:\n     * ```js\n     * import { StandardFonts, rgb } from 'pdf-lib'\n     *\n     * const helveticaFont = await pdfDoc.embedFont(StandardFonts.Helvetica)\n     * const timesRomanFont = await pdfDoc.embedFont(StandardFonts.TimesRoman)\n     *\n     * const page = pdfDoc.addPage()\n     *\n     * page.setFont(helveticaFont)\n     *\n     * page.moveTo(5, 200)\n     * page.drawText('The Life of an Egg', { size: 36 })\n     *\n     * page.moveDown(36)\n     * page.drawText('An Epic Tale of Woe', { size: 30 })\n     *\n     * page.drawText(\n     *   `Humpty Dumpty sat on a wall \\n` +\n     *   `Humpty Dumpty had a great fall; \\n` +\n     *   `All the king's horses and all the king's men \\n` +\n     *   `Couldn't put Humpty together again. \\n`,\n     *   {\n     *     x: 25,\n     *     y: 100,\n     *     font: timesRomanFont,\n     *     size: 24,\n     *     color: rgb(1, 0, 0),\n     *     lineHeight: 24,\n     *     opacity: 0.75,\n     *   },\n     * )\n     * ```\n     * @param text The text to be drawn.\n     * @param options The options to be used when drawing the text.\n     */\n    PDFPage.prototype.drawText = function (text, options) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        if (options === void 0) { options = {}; }\n        assertIs(text, 'text', ['string']);\n        assertOrUndefined(options.color, 'options.color', [[Object, 'Color']]);\n        assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\n        assertOrUndefined(options.font, 'options.font', [[PDFFont, 'PDFFont']]);\n        assertOrUndefined(options.size, 'options.size', ['number']);\n        assertOrUndefined(options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n        assertOrUndefined(options.xSkew, 'options.xSkew', [[Object, 'Rotation']]);\n        assertOrUndefined(options.ySkew, 'options.ySkew', [[Object, 'Rotation']]);\n        assertOrUndefined(options.x, 'options.x', ['number']);\n        assertOrUndefined(options.y, 'options.y', ['number']);\n        assertOrUndefined(options.lineHeight, 'options.lineHeight', ['number']);\n        assertOrUndefined(options.maxWidth, 'options.maxWidth', ['number']);\n        assertOrUndefined(options.wordBreaks, 'options.wordBreaks', [Array]);\n        assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', BlendMode);\n        var originalFont = this.getFont()[0];\n        if (options.font)\n            this.setFont(options.font);\n        var _h = this.getFont(), font = _h[0], fontKey = _h[1];\n        var fontSize = options.size || this.fontSize;\n        var wordBreaks = options.wordBreaks || this.doc.defaultWordBreaks;\n        var textWidth = function (t) { return font.widthOfTextAtSize(t, fontSize); };\n        var lines = options.maxWidth === undefined\n            ? lineSplit(cleanText(text))\n            : breakTextIntoLines(text, wordBreaks, options.maxWidth, textWidth);\n        var encodedLines = new Array(lines.length);\n        for (var idx = 0, len = lines.length; idx < len; idx++) {\n            encodedLines[idx] = font.encodeText(lines[idx]);\n        }\n        var graphicsStateKey = this.maybeEmbedGraphicsState({\n            opacity: options.opacity,\n            blendMode: options.blendMode,\n        });\n        var contentStream = this.getContentStream();\n        contentStream.push.apply(contentStream, drawLinesOfText(encodedLines, {\n            color: (_a = options.color) !== null && _a !== void 0 ? _a : this.fontColor,\n            font: fontKey,\n            size: fontSize,\n            rotate: (_b = options.rotate) !== null && _b !== void 0 ? _b : degrees(0),\n            xSkew: (_c = options.xSkew) !== null && _c !== void 0 ? _c : degrees(0),\n            ySkew: (_d = options.ySkew) !== null && _d !== void 0 ? _d : degrees(0),\n            x: (_e = options.x) !== null && _e !== void 0 ? _e : this.x,\n            y: (_f = options.y) !== null && _f !== void 0 ? _f : this.y,\n            lineHeight: (_g = options.lineHeight) !== null && _g !== void 0 ? _g : this.lineHeight,\n            graphicsState: graphicsStateKey,\n        }));\n        if (options.font)\n            this.setFont(originalFont);\n    };\n    /**\n     * Draw an image on this page. For example:\n     * ```js\n     * import { degrees } from 'pdf-lib'\n     *\n     * const jpgUrl = 'https://pdf-lib.js.org/assets/cat_riding_unicorn.jpg'\n     * const jpgImageBytes = await fetch(jpgUrl).then((res) => res.arrayBuffer())\n     *\n     * const jpgImage = await pdfDoc.embedJpg(jpgImageBytes)\n     * const jpgDims = jpgImage.scale(0.5)\n     *\n     * const page = pdfDoc.addPage()\n     *\n     * page.drawImage(jpgImage, {\n     *   x: 25,\n     *   y: 25,\n     *   width: jpgDims.width,\n     *   height: jpgDims.height,\n     *   rotate: degrees(30),\n     *   opacity: 0.75,\n     * })\n     * ```\n     * @param image The image to be drawn.\n     * @param options The options to be used when drawing the image.\n     */\n    PDFPage.prototype.drawImage = function (image, options) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        if (options === void 0) { options = {}; }\n        // TODO: Reuse image XObject name if we've already added this image to Resources.XObjects\n        assertIs(image, 'image', [[PDFImage, 'PDFImage']]);\n        assertOrUndefined(options.x, 'options.x', ['number']);\n        assertOrUndefined(options.y, 'options.y', ['number']);\n        assertOrUndefined(options.width, 'options.width', ['number']);\n        assertOrUndefined(options.height, 'options.height', ['number']);\n        assertOrUndefined(options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n        assertOrUndefined(options.xSkew, 'options.xSkew', [[Object, 'Rotation']]);\n        assertOrUndefined(options.ySkew, 'options.ySkew', [[Object, 'Rotation']]);\n        assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\n        assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', BlendMode);\n        var xObjectKey = addRandomSuffix('Image', 10);\n        this.node.setXObject(PDFName.of(xObjectKey), image.ref);\n        var graphicsStateKey = this.maybeEmbedGraphicsState({\n            opacity: options.opacity,\n            blendMode: options.blendMode,\n        });\n        var contentStream = this.getContentStream();\n        contentStream.push.apply(contentStream, drawImage(xObjectKey, {\n            x: (_a = options.x) !== null && _a !== void 0 ? _a : this.x,\n            y: (_b = options.y) !== null && _b !== void 0 ? _b : this.y,\n            width: (_c = options.width) !== null && _c !== void 0 ? _c : image.size().width,\n            height: (_d = options.height) !== null && _d !== void 0 ? _d : image.size().height,\n            rotate: (_e = options.rotate) !== null && _e !== void 0 ? _e : degrees(0),\n            xSkew: (_f = options.xSkew) !== null && _f !== void 0 ? _f : degrees(0),\n            ySkew: (_g = options.ySkew) !== null && _g !== void 0 ? _g : degrees(0),\n            graphicsState: graphicsStateKey,\n        }));\n    };\n    /**\n     * Draw an embedded PDF page on this page. For example:\n     * ```js\n     * import { degrees } from 'pdf-lib'\n     *\n     * const pdfDoc = await PDFDocument.create()\n     * const page = pdfDoc.addPage()\n     *\n     * const sourcePdfUrl = 'https://pdf-lib.js.org/assets/with_large_page_count.pdf'\n     * const sourcePdf = await fetch(sourcePdfUrl).then((res) => res.arrayBuffer())\n     *\n     * // Embed page 74 from the PDF\n     * const [embeddedPage] = await pdfDoc.embedPdf(sourcePdf, 73)\n     *\n     * page.drawPage(embeddedPage, {\n     *   x: 250,\n     *   y: 200,\n     *   xScale: 0.5,\n     *   yScale: 0.5,\n     *   rotate: degrees(30),\n     *   opacity: 0.75,\n     * })\n     * ```\n     *\n     * The `options` argument accepts both `width`/`height` and `xScale`/`yScale`\n     * as options. Since each of these options defines the size of the drawn page,\n     * if both options are given, `width` and `height` take precedence and the\n     * corresponding scale variants are ignored.\n     *\n     * @param embeddedPage The embedded page to be drawn.\n     * @param options The options to be used when drawing the embedded page.\n     */\n    PDFPage.prototype.drawPage = function (embeddedPage, options) {\n        var _a, _b, _c, _d, _e;\n        if (options === void 0) { options = {}; }\n        // TODO: Reuse embeddedPage XObject name if we've already added this embeddedPage to Resources.XObjects\n        assertIs(embeddedPage, 'embeddedPage', [\n            [PDFEmbeddedPage, 'PDFEmbeddedPage'],\n        ]);\n        assertOrUndefined(options.x, 'options.x', ['number']);\n        assertOrUndefined(options.y, 'options.y', ['number']);\n        assertOrUndefined(options.xScale, 'options.xScale', ['number']);\n        assertOrUndefined(options.yScale, 'options.yScale', ['number']);\n        assertOrUndefined(options.width, 'options.width', ['number']);\n        assertOrUndefined(options.height, 'options.height', ['number']);\n        assertOrUndefined(options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n        assertOrUndefined(options.xSkew, 'options.xSkew', [[Object, 'Rotation']]);\n        assertOrUndefined(options.ySkew, 'options.ySkew', [[Object, 'Rotation']]);\n        assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\n        assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', BlendMode);\n        var xObjectKey = addRandomSuffix('EmbeddedPdfPage', 10);\n        this.node.setXObject(PDFName.of(xObjectKey), embeddedPage.ref);\n        var graphicsStateKey = this.maybeEmbedGraphicsState({\n            opacity: options.opacity,\n            blendMode: options.blendMode,\n        });\n        // prettier-ignore\n        var xScale = (options.width !== undefined ? options.width / embeddedPage.width\n            : options.xScale !== undefined ? options.xScale\n                : 1);\n        // prettier-ignore\n        var yScale = (options.height !== undefined ? options.height / embeddedPage.height\n            : options.yScale !== undefined ? options.yScale\n                : 1);\n        var contentStream = this.getContentStream();\n        contentStream.push.apply(contentStream, drawPage(xObjectKey, {\n            x: (_a = options.x) !== null && _a !== void 0 ? _a : this.x,\n            y: (_b = options.y) !== null && _b !== void 0 ? _b : this.y,\n            xScale: xScale,\n            yScale: yScale,\n            rotate: (_c = options.rotate) !== null && _c !== void 0 ? _c : degrees(0),\n            xSkew: (_d = options.xSkew) !== null && _d !== void 0 ? _d : degrees(0),\n            ySkew: (_e = options.ySkew) !== null && _e !== void 0 ? _e : degrees(0),\n            graphicsState: graphicsStateKey,\n        }));\n    };\n    /**\n     * Draw an SVG path on this page. For example:\n     * ```js\n     * import { rgb } from 'pdf-lib'\n     *\n     * const svgPath = 'M 0,20 L 100,160 Q 130,200 150,120 C 190,-40 200,200 300,150 L 400,90'\n     *\n     * // Draw path as black line\n     * page.drawSvgPath(svgPath, { x: 25, y: 75 })\n     *\n     * // Change border style and opacity\n     * page.drawSvgPath(svgPath, {\n     *   x: 25,\n     *   y: 275,\n     *   borderColor: rgb(0.5, 0.5, 0.5),\n     *   borderWidth: 2,\n     *   borderOpacity: 0.75,\n     * })\n     *\n     * // Set fill color and opacity\n     * page.drawSvgPath(svgPath, {\n     *   x: 25,\n     *   y: 475,\n     *   color: rgb(1.0, 0, 0),\n     *   opacity: 0.75,\n     * })\n     *\n     * // Draw 50% of original size\n     * page.drawSvgPath(svgPath, {\n     *   x: 25,\n     *   y: 675,\n     *   scale: 0.5,\n     * })\n     * ```\n     * @param path The SVG path to be drawn.\n     * @param options The options to be used when drawing the SVG path.\n     */\n    PDFPage.prototype.drawSvgPath = function (path, options) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        if (options === void 0) { options = {}; }\n        assertIs(path, 'path', ['string']);\n        assertOrUndefined(options.x, 'options.x', ['number']);\n        assertOrUndefined(options.y, 'options.y', ['number']);\n        assertOrUndefined(options.scale, 'options.scale', ['number']);\n        assertOrUndefined(options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n        assertOrUndefined(options.borderWidth, 'options.borderWidth', ['number']);\n        assertOrUndefined(options.color, 'options.color', [[Object, 'Color']]);\n        assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\n        assertOrUndefined(options.borderColor, 'options.borderColor', [\n            [Object, 'Color'],\n        ]);\n        assertOrUndefined(options.borderDashArray, 'options.borderDashArray', [\n            Array,\n        ]);\n        assertOrUndefined(options.borderDashPhase, 'options.borderDashPhase', [\n            'number',\n        ]);\n        assertIsOneOfOrUndefined(options.borderLineCap, 'options.borderLineCap', LineCapStyle);\n        assertRangeOrUndefined(options.borderOpacity, 'options.borderOpacity', 0, 1);\n        assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', BlendMode);\n        var graphicsStateKey = this.maybeEmbedGraphicsState({\n            opacity: options.opacity,\n            borderOpacity: options.borderOpacity,\n            blendMode: options.blendMode,\n        });\n        if (!('color' in options) && !('borderColor' in options)) {\n            options.borderColor = rgb(0, 0, 0);\n        }\n        var contentStream = this.getContentStream();\n        contentStream.push.apply(contentStream, drawSvgPath(path, {\n            x: (_a = options.x) !== null && _a !== void 0 ? _a : this.x,\n            y: (_b = options.y) !== null && _b !== void 0 ? _b : this.y,\n            scale: options.scale,\n            rotate: (_c = options.rotate) !== null && _c !== void 0 ? _c : degrees(0),\n            color: (_d = options.color) !== null && _d !== void 0 ? _d : undefined,\n            borderColor: (_e = options.borderColor) !== null && _e !== void 0 ? _e : undefined,\n            borderWidth: (_f = options.borderWidth) !== null && _f !== void 0 ? _f : 0,\n            borderDashArray: (_g = options.borderDashArray) !== null && _g !== void 0 ? _g : undefined,\n            borderDashPhase: (_h = options.borderDashPhase) !== null && _h !== void 0 ? _h : undefined,\n            borderLineCap: (_j = options.borderLineCap) !== null && _j !== void 0 ? _j : undefined,\n            graphicsState: graphicsStateKey,\n        }));\n    };\n    /**\n     * Draw a line on this page. For example:\n     * ```js\n     * import { rgb } from 'pdf-lib'\n     *\n     * page.drawLine({\n     *   start: { x: 25, y: 75 },\n     *   end: { x: 125, y: 175 },\n     *   thickness: 2,\n     *   color: rgb(0.75, 0.2, 0.2),\n     *   opacity: 0.75,\n     * })\n     * ```\n     * @param options The options to be used when drawing the line.\n     */\n    PDFPage.prototype.drawLine = function (options) {\n        var _a, _b, _c, _d, _e;\n        assertIs(options.start, 'options.start', [\n            [Object, '{ x: number, y: number }'],\n        ]);\n        assertIs(options.end, 'options.end', [\n            [Object, '{ x: number, y: number }'],\n        ]);\n        assertIs(options.start.x, 'options.start.x', ['number']);\n        assertIs(options.start.y, 'options.start.y', ['number']);\n        assertIs(options.end.x, 'options.end.x', ['number']);\n        assertIs(options.end.y, 'options.end.y', ['number']);\n        assertOrUndefined(options.thickness, 'options.thickness', ['number']);\n        assertOrUndefined(options.color, 'options.color', [[Object, 'Color']]);\n        assertOrUndefined(options.dashArray, 'options.dashArray', [Array]);\n        assertOrUndefined(options.dashPhase, 'options.dashPhase', ['number']);\n        assertIsOneOfOrUndefined(options.lineCap, 'options.lineCap', LineCapStyle);\n        assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\n        assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', BlendMode);\n        var graphicsStateKey = this.maybeEmbedGraphicsState({\n            borderOpacity: options.opacity,\n            blendMode: options.blendMode,\n        });\n        if (!('color' in options)) {\n            options.color = rgb(0, 0, 0);\n        }\n        var contentStream = this.getContentStream();\n        contentStream.push.apply(contentStream, drawLine({\n            start: options.start,\n            end: options.end,\n            thickness: (_a = options.thickness) !== null && _a !== void 0 ? _a : 1,\n            color: (_b = options.color) !== null && _b !== void 0 ? _b : undefined,\n            dashArray: (_c = options.dashArray) !== null && _c !== void 0 ? _c : undefined,\n            dashPhase: (_d = options.dashPhase) !== null && _d !== void 0 ? _d : undefined,\n            lineCap: (_e = options.lineCap) !== null && _e !== void 0 ? _e : undefined,\n            graphicsState: graphicsStateKey,\n        }));\n    };\n    /**\n     * Draw a rectangle on this page. For example:\n     * ```js\n     * import { degrees, grayscale, rgb } from 'pdf-lib'\n     *\n     * page.drawRectangle({\n     *   x: 25,\n     *   y: 75,\n     *   width: 250,\n     *   height: 75,\n     *   rotate: degrees(-15),\n     *   borderWidth: 5,\n     *   borderColor: grayscale(0.5),\n     *   color: rgb(0.75, 0.2, 0.2),\n     *   opacity: 0.5,\n     *   borderOpacity: 0.75,\n     * })\n     * ```\n     * @param options The options to be used when drawing the rectangle.\n     */\n    PDFPage.prototype.drawRectangle = function (options) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;\n        if (options === void 0) { options = {}; }\n        assertOrUndefined(options.x, 'options.x', ['number']);\n        assertOrUndefined(options.y, 'options.y', ['number']);\n        assertOrUndefined(options.width, 'options.width', ['number']);\n        assertOrUndefined(options.height, 'options.height', ['number']);\n        assertOrUndefined(options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n        assertOrUndefined(options.xSkew, 'options.xSkew', [[Object, 'Rotation']]);\n        assertOrUndefined(options.ySkew, 'options.ySkew', [[Object, 'Rotation']]);\n        assertOrUndefined(options.borderWidth, 'options.borderWidth', ['number']);\n        assertOrUndefined(options.color, 'options.color', [[Object, 'Color']]);\n        assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\n        assertOrUndefined(options.borderColor, 'options.borderColor', [\n            [Object, 'Color'],\n        ]);\n        assertOrUndefined(options.borderDashArray, 'options.borderDashArray', [\n            Array,\n        ]);\n        assertOrUndefined(options.borderDashPhase, 'options.borderDashPhase', [\n            'number',\n        ]);\n        assertIsOneOfOrUndefined(options.borderLineCap, 'options.borderLineCap', LineCapStyle);\n        assertRangeOrUndefined(options.borderOpacity, 'options.borderOpacity', 0, 1);\n        assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', BlendMode);\n        var graphicsStateKey = this.maybeEmbedGraphicsState({\n            opacity: options.opacity,\n            borderOpacity: options.borderOpacity,\n            blendMode: options.blendMode,\n        });\n        if (!('color' in options) && !('borderColor' in options)) {\n            options.color = rgb(0, 0, 0);\n        }\n        var contentStream = this.getContentStream();\n        contentStream.push.apply(contentStream, drawRectangle({\n            x: (_a = options.x) !== null && _a !== void 0 ? _a : this.x,\n            y: (_b = options.y) !== null && _b !== void 0 ? _b : this.y,\n            width: (_c = options.width) !== null && _c !== void 0 ? _c : 150,\n            height: (_d = options.height) !== null && _d !== void 0 ? _d : 100,\n            rotate: (_e = options.rotate) !== null && _e !== void 0 ? _e : degrees(0),\n            xSkew: (_f = options.xSkew) !== null && _f !== void 0 ? _f : degrees(0),\n            ySkew: (_g = options.ySkew) !== null && _g !== void 0 ? _g : degrees(0),\n            borderWidth: (_h = options.borderWidth) !== null && _h !== void 0 ? _h : 0,\n            color: (_j = options.color) !== null && _j !== void 0 ? _j : undefined,\n            borderColor: (_k = options.borderColor) !== null && _k !== void 0 ? _k : undefined,\n            borderDashArray: (_l = options.borderDashArray) !== null && _l !== void 0 ? _l : undefined,\n            borderDashPhase: (_m = options.borderDashPhase) !== null && _m !== void 0 ? _m : undefined,\n            graphicsState: graphicsStateKey,\n            borderLineCap: (_o = options.borderLineCap) !== null && _o !== void 0 ? _o : undefined,\n        }));\n    };\n    /**\n     * Draw a square on this page. For example:\n     * ```js\n     * import { degrees, grayscale, rgb } from 'pdf-lib'\n     *\n     * page.drawSquare({\n     *   x: 25,\n     *   y: 75,\n     *   size: 100,\n     *   rotate: degrees(-15),\n     *   borderWidth: 5,\n     *   borderColor: grayscale(0.5),\n     *   color: rgb(0.75, 0.2, 0.2),\n     *   opacity: 0.5,\n     *   borderOpacity: 0.75,\n     * })\n     * ```\n     * @param options The options to be used when drawing the square.\n     */\n    PDFPage.prototype.drawSquare = function (options) {\n        if (options === void 0) { options = {}; }\n        var size = options.size;\n        assertOrUndefined(size, 'size', ['number']);\n        this.drawRectangle(__assign(__assign({}, options), { width: size, height: size }));\n    };\n    /**\n     * Draw an ellipse on this page. For example:\n     * ```js\n     * import { grayscale, rgb } from 'pdf-lib'\n     *\n     * page.drawEllipse({\n     *   x: 200,\n     *   y: 75,\n     *   xScale: 100,\n     *   yScale: 50,\n     *   borderWidth: 5,\n     *   borderColor: grayscale(0.5),\n     *   color: rgb(0.75, 0.2, 0.2),\n     *   opacity: 0.5,\n     *   borderOpacity: 0.75,\n     * })\n     * ```\n     * @param options The options to be used when drawing the ellipse.\n     */\n    PDFPage.prototype.drawEllipse = function (options) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n        if (options === void 0) { options = {}; }\n        assertOrUndefined(options.x, 'options.x', ['number']);\n        assertOrUndefined(options.y, 'options.y', ['number']);\n        assertOrUndefined(options.xScale, 'options.xScale', ['number']);\n        assertOrUndefined(options.yScale, 'options.yScale', ['number']);\n        assertOrUndefined(options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n        assertOrUndefined(options.color, 'options.color', [[Object, 'Color']]);\n        assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\n        assertOrUndefined(options.borderColor, 'options.borderColor', [\n            [Object, 'Color'],\n        ]);\n        assertRangeOrUndefined(options.borderOpacity, 'options.borderOpacity', 0, 1);\n        assertOrUndefined(options.borderWidth, 'options.borderWidth', ['number']);\n        assertOrUndefined(options.borderDashArray, 'options.borderDashArray', [\n            Array,\n        ]);\n        assertOrUndefined(options.borderDashPhase, 'options.borderDashPhase', [\n            'number',\n        ]);\n        assertIsOneOfOrUndefined(options.borderLineCap, 'options.borderLineCap', LineCapStyle);\n        assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', BlendMode);\n        var graphicsStateKey = this.maybeEmbedGraphicsState({\n            opacity: options.opacity,\n            borderOpacity: options.borderOpacity,\n            blendMode: options.blendMode,\n        });\n        if (!('color' in options) && !('borderColor' in options)) {\n            options.color = rgb(0, 0, 0);\n        }\n        var contentStream = this.getContentStream();\n        contentStream.push.apply(contentStream, drawEllipse({\n            x: (_a = options.x) !== null && _a !== void 0 ? _a : this.x,\n            y: (_b = options.y) !== null && _b !== void 0 ? _b : this.y,\n            xScale: (_c = options.xScale) !== null && _c !== void 0 ? _c : 100,\n            yScale: (_d = options.yScale) !== null && _d !== void 0 ? _d : 100,\n            rotate: (_e = options.rotate) !== null && _e !== void 0 ? _e : undefined,\n            color: (_f = options.color) !== null && _f !== void 0 ? _f : undefined,\n            borderColor: (_g = options.borderColor) !== null && _g !== void 0 ? _g : undefined,\n            borderWidth: (_h = options.borderWidth) !== null && _h !== void 0 ? _h : 0,\n            borderDashArray: (_j = options.borderDashArray) !== null && _j !== void 0 ? _j : undefined,\n            borderDashPhase: (_k = options.borderDashPhase) !== null && _k !== void 0 ? _k : undefined,\n            borderLineCap: (_l = options.borderLineCap) !== null && _l !== void 0 ? _l : undefined,\n            graphicsState: graphicsStateKey,\n        }));\n    };\n    /**\n     * Draw a circle on this page. For example:\n     * ```js\n     * import { grayscale, rgb } from 'pdf-lib'\n     *\n     * page.drawCircle({\n     *   x: 200,\n     *   y: 150,\n     *   size: 100,\n     *   borderWidth: 5,\n     *   borderColor: grayscale(0.5),\n     *   color: rgb(0.75, 0.2, 0.2),\n     *   opacity: 0.5,\n     *   borderOpacity: 0.75,\n     * })\n     * ```\n     * @param options The options to be used when drawing the ellipse.\n     */\n    PDFPage.prototype.drawCircle = function (options) {\n        if (options === void 0) { options = {}; }\n        var _a = options.size, size = _a === void 0 ? 100 : _a;\n        assertOrUndefined(size, 'size', ['number']);\n        this.drawEllipse(__assign(__assign({}, options), { xScale: size, yScale: size }));\n    };\n    PDFPage.prototype.getFont = function () {\n        if (!this.font || !this.fontKey) {\n            var font = this.doc.embedStandardFont(StandardFonts.Helvetica);\n            this.setFont(font);\n        }\n        return [this.font, this.fontKey];\n    };\n    PDFPage.prototype.getContentStream = function (useExisting) {\n        if (useExisting === void 0) { useExisting = true; }\n        if (useExisting && this.contentStream)\n            return this.contentStream;\n        this.contentStream = this.createContentStream();\n        this.contentStreamRef = this.doc.context.register(this.contentStream);\n        this.node.addContentStream(this.contentStreamRef);\n        return this.contentStream;\n    };\n    PDFPage.prototype.createContentStream = function () {\n        var operators = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operators[_i] = arguments[_i];\n        }\n        var dict = this.doc.context.obj({});\n        var contentStream = PDFContentStream.of(dict, operators);\n        return contentStream;\n    };\n    PDFPage.prototype.maybeEmbedGraphicsState = function (options) {\n        var opacity = options.opacity, borderOpacity = options.borderOpacity, blendMode = options.blendMode;\n        if (opacity === undefined &&\n            borderOpacity === undefined &&\n            blendMode === undefined) {\n            return undefined;\n        }\n        var key = addRandomSuffix('GS', 10);\n        var graphicsState = this.doc.context.obj({\n            Type: 'ExtGState',\n            ca: opacity,\n            CA: borderOpacity,\n            BM: blendMode,\n        });\n        this.node.setExtGState(PDFName.of(key), graphicsState);\n        return key;\n    };\n    /**\n     * > **NOTE:** You probably don't want to call this method directly. Instead,\n     * > consider using the [[PDFDocument.addPage]] and [[PDFDocument.insertPage]]\n     * > methods, which can create instances of [[PDFPage]] for you.\n     *\n     * Create an instance of [[PDFPage]] from an existing leaf node.\n     *\n     * @param leafNode The leaf node to be wrapped.\n     * @param ref The unique reference for the page.\n     * @param doc The document to which the page will belong.\n     */\n    PDFPage.of = function (leafNode, ref, doc) {\n        return new PDFPage(leafNode, ref, doc);\n    };\n    /**\n     * > **NOTE:** You probably don't want to call this method directly. Instead,\n     * > consider using the [[PDFDocument.addPage]] and [[PDFDocument.insertPage]]\n     * > methods, which can create instances of [[PDFPage]] for you.\n     *\n     * Create an instance of [[PDFPage]].\n     *\n     * @param doc The document to which the page will belong.\n     */\n    PDFPage.create = function (doc) {\n        assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n        var dummyRef = PDFRef.of(-1);\n        var pageLeaf = PDFPageLeaf.withContextAndParent(doc.context, dummyRef);\n        var pageRef = doc.context.register(pageLeaf);\n        return new PDFPage(pageLeaf, pageRef, doc);\n    };\n    return PDFPage;\n}());\nexport default PDFPage;\n//# sourceMappingURL=PDFPage.js.map"]},"metadata":{},"sourceType":"module"}