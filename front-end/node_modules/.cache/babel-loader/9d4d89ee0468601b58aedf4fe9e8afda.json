{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFString from \"../objects/PDFString\";\nimport PDFHexString from \"../objects/PDFHexString\";\nimport PDFArray from \"../objects/PDFArray\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFAcroTerminal from \"./PDFAcroTerminal\";\nimport { IndexOutOfBoundsError } from \"../errors\";\n\nvar PDFAcroButton =\n/** @class */\nfunction (_super) {\n  __extends(PDFAcroButton, _super);\n\n  function PDFAcroButton() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  PDFAcroButton.prototype.Opt = function () {\n    return this.dict.lookupMaybe(PDFName.of('Opt'), PDFString, PDFHexString, PDFArray);\n  };\n\n  PDFAcroButton.prototype.setOpt = function (opt) {\n    this.dict.set(PDFName.of('Opt'), this.dict.context.obj(opt));\n  };\n\n  PDFAcroButton.prototype.getExportValues = function () {\n    var opt = this.Opt();\n    if (!opt) return undefined;\n\n    if (opt instanceof PDFString || opt instanceof PDFHexString) {\n      return [opt];\n    }\n\n    var values = [];\n\n    for (var idx = 0, len = opt.size(); idx < len; idx++) {\n      var value = opt.lookup(idx);\n\n      if (value instanceof PDFString || value instanceof PDFHexString) {\n        values.push(value);\n      }\n    }\n\n    return values;\n  };\n\n  PDFAcroButton.prototype.removeExportValue = function (idx) {\n    var opt = this.Opt();\n    if (!opt) return;\n\n    if (opt instanceof PDFString || opt instanceof PDFHexString) {\n      if (idx !== 0) throw new IndexOutOfBoundsError(idx, 0, 0);\n      this.setOpt([]);\n    } else {\n      if (idx < 0 || idx > opt.size()) {\n        throw new IndexOutOfBoundsError(idx, 0, opt.size());\n      }\n\n      opt.remove(idx);\n    }\n  }; // Enforce use use of /Opt even if it isn't strictly necessary\n\n\n  PDFAcroButton.prototype.normalizeExportValues = function () {\n    var _a, _b, _c, _d;\n\n    var exportValues = (_a = this.getExportValues()) !== null && _a !== void 0 ? _a : [];\n    var Opt = [];\n    var widgets = this.getWidgets();\n\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var exportVal = (_b = exportValues[idx]) !== null && _b !== void 0 ? _b : PDFHexString.fromText((_d = (_c = widget.getOnValue()) === null || _c === void 0 ? void 0 : _c.decodeText()) !== null && _d !== void 0 ? _d : '');\n      Opt.push(exportVal);\n    }\n\n    this.setOpt(Opt);\n  };\n  /**\n   * Reuses existing opt if one exists with the same value (assuming\n   * `useExistingIdx` is `true`). Returns index of existing (or new) opt.\n   */\n\n\n  PDFAcroButton.prototype.addOpt = function (opt, useExistingOptIdx) {\n    var _a;\n\n    this.normalizeExportValues();\n    var optText = opt.decodeText();\n    var existingIdx;\n\n    if (useExistingOptIdx) {\n      var exportValues = (_a = this.getExportValues()) !== null && _a !== void 0 ? _a : [];\n\n      for (var idx = 0, len = exportValues.length; idx < len; idx++) {\n        var exportVal = exportValues[idx];\n        if (exportVal.decodeText() === optText) existingIdx = idx;\n      }\n    }\n\n    var Opt = this.Opt();\n    Opt.push(opt);\n    return existingIdx !== null && existingIdx !== void 0 ? existingIdx : Opt.size() - 1;\n  };\n\n  PDFAcroButton.prototype.addWidgetWithOpt = function (widget, opt, useExistingOptIdx) {\n    var optIdx = this.addOpt(opt, useExistingOptIdx);\n    var apStateValue = PDFName.of(String(optIdx));\n    this.addWidget(widget);\n    return apStateValue;\n  };\n\n  return PDFAcroButton;\n}(PDFAcroTerminal);\n\nexport default PDFAcroButton;","map":{"version":3,"sources":["../../../src/core/acroform/PDFAcroButton.ts"],"names":[],"mappings":";AACA,OAAO,SAAP,MAAgB,sBAAhB;AACA,OAAO,YAAP,MAAmB,yBAAnB;AACA,OAAO,QAAP,MAAe,qBAAf;AACA,OAAO,OAAP,MAAc,oBAAd;AAEA,OAAO,eAAP,MAAsB,mBAAtB;AACA,SAAS,qBAAT,QAAgC,WAAhC;;AAEA,IAAA,aAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA4B,EAAA,SAAA,CAAA,aAAA,EAAA,MAAA,CAAA;;AAA5B,WAAA,aAAA,GAAA;;AAsGC;;AArGC,EAAA,aAAA,CAAA,SAAA,CAAA,GAAA,GAAA,YAAA;AACE,WAAO,KAAK,IAAL,CAAU,WAAV,CACL,OAAO,CAAC,EAAR,CAAW,KAAX,CADK,EAEL,SAFK,EAGL,YAHK,EAIL,QAJK,CAAP;AAMD,GAPD;;AASA,EAAA,aAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,GAAP,EAAuB;AACrB,SAAK,IAAL,CAAU,GAAV,CAAc,OAAO,CAAC,EAAR,CAAW,KAAX,CAAd,EAAiC,KAAK,IAAL,CAAU,OAAV,CAAkB,GAAlB,CAAsB,GAAtB,CAAjC;AACD,GAFD;;AAIA,EAAA,aAAA,CAAA,SAAA,CAAA,eAAA,GAAA,YAAA;AACE,QAAM,GAAG,GAAG,KAAK,GAAL,EAAZ;AAEA,QAAI,CAAC,GAAL,EAAU,OAAO,SAAP;;AAEV,QAAI,GAAG,YAAY,SAAf,IAA4B,GAAG,YAAY,YAA/C,EAA6D;AAC3D,aAAO,CAAC,GAAD,CAAP;AACD;;AAED,QAAM,MAAM,GAAiC,EAA7C;;AACA,SAAK,IAAI,GAAG,GAAG,CAAV,EAAa,GAAG,GAAG,GAAG,CAAC,IAAJ,EAAxB,EAAoC,GAAG,GAAG,GAA1C,EAA+C,GAAG,EAAlD,EAAsD;AACpD,UAAM,KAAK,GAAG,GAAG,CAAC,MAAJ,CAAW,GAAX,CAAd;;AACA,UAAI,KAAK,YAAY,SAAjB,IAA8B,KAAK,YAAY,YAAnD,EAAiE;AAC/D,QAAA,MAAM,CAAC,IAAP,CAAY,KAAZ;AACD;AACF;;AAED,WAAO,MAAP;AACD,GAlBD;;AAoBA,EAAA,aAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UAAkB,GAAlB,EAA6B;AAC3B,QAAM,GAAG,GAAG,KAAK,GAAL,EAAZ;AAEA,QAAI,CAAC,GAAL,EAAU;;AAEV,QAAI,GAAG,YAAY,SAAf,IAA4B,GAAG,YAAY,YAA/C,EAA6D;AAC3D,UAAI,GAAG,KAAK,CAAZ,EAAe,MAAM,IAAI,qBAAJ,CAA0B,GAA1B,EAA+B,CAA/B,EAAkC,CAAlC,CAAN;AACf,WAAK,MAAL,CAAY,EAAZ;AACD,KAHD,MAGO;AACL,UAAI,GAAG,GAAG,CAAN,IAAW,GAAG,GAAG,GAAG,CAAC,IAAJ,EAArB,EAAiC;AAC/B,cAAM,IAAI,qBAAJ,CAA0B,GAA1B,EAA+B,CAA/B,EAAkC,GAAG,CAAC,IAAJ,EAAlC,CAAN;AACD;;AACD,MAAA,GAAG,CAAC,MAAJ,CAAW,GAAX;AACD;AACF,GAdD,CAlCF,CAkDE;;;AACA,EAAA,aAAA,CAAA,SAAA,CAAA,qBAAA,GAAA,YAAA;;;AACE,QAAM,YAAY,GAAA,CAAA,EAAA,GAAG,KAAK,eAAL,EAAH,MAAyB,IAAzB,IAAyB,EAAA,KAAA,KAAA,CAAzB,GAAyB,EAAzB,GAA6B,EAA/C;AAEA,QAAM,GAAG,GAAiC,EAA1C;AAEA,QAAM,OAAO,GAAG,KAAK,UAAL,EAAhB;;AACA,SAAK,IAAI,GAAG,GAAG,CAAV,EAAa,GAAG,GAAG,OAAO,CAAC,MAAhC,EAAwC,GAAG,GAAG,GAA9C,EAAmD,GAAG,EAAtD,EAA0D;AACxD,UAAM,MAAM,GAAG,OAAO,CAAC,GAAD,CAAtB;AACA,UAAM,SAAS,GAAA,CAAA,EAAA,GACb,YAAY,CAAC,GAAD,CADC,MACI,IADJ,IACI,EAAA,KAAA,KAAA,CADJ,GACI,EADJ,GAEb,YAAY,CAAC,QAAb,CAAqB,CAAA,EAAA,GAAA,CAAA,EAAA,GAAC,MAAM,CAAC,UAAP,EAAD,MAAoB,IAApB,IAAoB,EAAA,KAAA,KAAA,CAApB,GAAoB,KAAA,CAApB,GAAoB,EAAA,CAAE,UAAF,EAApB,MAAgC,IAAhC,IAAgC,EAAA,KAAA,KAAA,CAAhC,GAAgC,EAAhC,GAAsC,EAA3D,CAFF;AAGA,MAAA,GAAG,CAAC,IAAJ,CAAS,SAAT;AACD;;AAED,SAAK,MAAL,CAAY,GAAZ;AACD,GAfD;AAiBA;;;AAGG;;;AACH,EAAA,aAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,GAAP,EAAsC,iBAAtC,EAAgE;;;AAC9D,SAAK,qBAAL;AAEA,QAAM,OAAO,GAAG,GAAG,CAAC,UAAJ,EAAhB;AAEA,QAAI,WAAJ;;AACA,QAAI,iBAAJ,EAAuB;AACrB,UAAM,YAAY,GAAA,CAAA,EAAA,GAAG,KAAK,eAAL,EAAH,MAAyB,IAAzB,IAAyB,EAAA,KAAA,KAAA,CAAzB,GAAyB,EAAzB,GAA6B,EAA/C;;AACA,WAAK,IAAI,GAAG,GAAG,CAAV,EAAa,GAAG,GAAG,YAAY,CAAC,MAArC,EAA6C,GAAG,GAAG,GAAnD,EAAwD,GAAG,EAA3D,EAA+D;AAC7D,YAAM,SAAS,GAAG,YAAY,CAAC,GAAD,CAA9B;AACA,YAAI,SAAS,CAAC,UAAV,OAA2B,OAA/B,EAAwC,WAAW,GAAG,GAAd;AACzC;AACF;;AAED,QAAM,GAAG,GAAG,KAAK,GAAL,EAAZ;AACA,IAAA,GAAG,CAAC,IAAJ,CAAS,GAAT;AAEA,WAAO,WAAW,KAAA,IAAX,IAAA,WAAW,KAAA,KAAA,CAAX,GAAA,WAAA,GAAe,GAAG,CAAC,IAAJ,KAAa,CAAnC;AACD,GAlBD;;AAoBA,EAAA,aAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,UACE,MADF,EAEE,GAFF,EAGE,iBAHF,EAG4B;AAE1B,QAAM,MAAM,GAAG,KAAK,MAAL,CAAY,GAAZ,EAAiB,iBAAjB,CAAf;AACA,QAAM,YAAY,GAAG,OAAO,CAAC,EAAR,CAAW,MAAM,CAAC,MAAD,CAAjB,CAArB;AACA,SAAK,SAAL,CAAe,MAAf;AACA,WAAO,YAAP;AACD,GATD;;AAUF,SAAA,aAAA;AAAC,CAtGD,CAA4B,eAA5B,CAAA;;AAwGA,eAAe,aAAf","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport PDFString from \"../objects/PDFString\";\nimport PDFHexString from \"../objects/PDFHexString\";\nimport PDFArray from \"../objects/PDFArray\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFAcroTerminal from \"./PDFAcroTerminal\";\nimport { IndexOutOfBoundsError } from \"../errors\";\nvar PDFAcroButton = /** @class */ (function (_super) {\n    __extends(PDFAcroButton, _super);\n    function PDFAcroButton() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    PDFAcroButton.prototype.Opt = function () {\n        return this.dict.lookupMaybe(PDFName.of('Opt'), PDFString, PDFHexString, PDFArray);\n    };\n    PDFAcroButton.prototype.setOpt = function (opt) {\n        this.dict.set(PDFName.of('Opt'), this.dict.context.obj(opt));\n    };\n    PDFAcroButton.prototype.getExportValues = function () {\n        var opt = this.Opt();\n        if (!opt)\n            return undefined;\n        if (opt instanceof PDFString || opt instanceof PDFHexString) {\n            return [opt];\n        }\n        var values = [];\n        for (var idx = 0, len = opt.size(); idx < len; idx++) {\n            var value = opt.lookup(idx);\n            if (value instanceof PDFString || value instanceof PDFHexString) {\n                values.push(value);\n            }\n        }\n        return values;\n    };\n    PDFAcroButton.prototype.removeExportValue = function (idx) {\n        var opt = this.Opt();\n        if (!opt)\n            return;\n        if (opt instanceof PDFString || opt instanceof PDFHexString) {\n            if (idx !== 0)\n                throw new IndexOutOfBoundsError(idx, 0, 0);\n            this.setOpt([]);\n        }\n        else {\n            if (idx < 0 || idx > opt.size()) {\n                throw new IndexOutOfBoundsError(idx, 0, opt.size());\n            }\n            opt.remove(idx);\n        }\n    };\n    // Enforce use use of /Opt even if it isn't strictly necessary\n    PDFAcroButton.prototype.normalizeExportValues = function () {\n        var _a, _b, _c, _d;\n        var exportValues = (_a = this.getExportValues()) !== null && _a !== void 0 ? _a : [];\n        var Opt = [];\n        var widgets = this.getWidgets();\n        for (var idx = 0, len = widgets.length; idx < len; idx++) {\n            var widget = widgets[idx];\n            var exportVal = (_b = exportValues[idx]) !== null && _b !== void 0 ? _b : PDFHexString.fromText((_d = (_c = widget.getOnValue()) === null || _c === void 0 ? void 0 : _c.decodeText()) !== null && _d !== void 0 ? _d : '');\n            Opt.push(exportVal);\n        }\n        this.setOpt(Opt);\n    };\n    /**\n     * Reuses existing opt if one exists with the same value (assuming\n     * `useExistingIdx` is `true`). Returns index of existing (or new) opt.\n     */\n    PDFAcroButton.prototype.addOpt = function (opt, useExistingOptIdx) {\n        var _a;\n        this.normalizeExportValues();\n        var optText = opt.decodeText();\n        var existingIdx;\n        if (useExistingOptIdx) {\n            var exportValues = (_a = this.getExportValues()) !== null && _a !== void 0 ? _a : [];\n            for (var idx = 0, len = exportValues.length; idx < len; idx++) {\n                var exportVal = exportValues[idx];\n                if (exportVal.decodeText() === optText)\n                    existingIdx = idx;\n            }\n        }\n        var Opt = this.Opt();\n        Opt.push(opt);\n        return existingIdx !== null && existingIdx !== void 0 ? existingIdx : Opt.size() - 1;\n    };\n    PDFAcroButton.prototype.addWidgetWithOpt = function (widget, opt, useExistingOptIdx) {\n        var optIdx = this.addOpt(opt, useExistingOptIdx);\n        var apStateValue = PDFName.of(String(optIdx));\n        this.addWidget(widget);\n        return apStateValue;\n    };\n    return PDFAcroButton;\n}(PDFAcroTerminal));\nexport default PDFAcroButton;\n//# sourceMappingURL=PDFAcroButton.js.map"]},"metadata":{},"sourceType":"module"}