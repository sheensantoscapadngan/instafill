{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFPage from \"../PDFPage\";\nimport PDFFont from \"../PDFFont\";\nimport { ImageAlignment } from \"../image/alignment\";\nimport { normalizeAppearance, defaultButtonAppearanceProvider } from \"./appearances\";\nimport PDFField, { assertFieldAppearanceOptions } from \"./PDFField\";\nimport { rgb } from \"../colors\";\nimport { degrees } from \"../rotations\";\nimport { PDFStream, PDFAcroPushButton } from \"../../core\";\nimport { assertIs, assertOrUndefined, assertPositive } from \"../../utils\";\n/**\r\n * Represents a button field of a [[PDFForm]].\r\n *\r\n * [[PDFButton]] fields are interactive controls that users can click with their\r\n * mouse. This type of [[PDFField]] is not stateful. The purpose of a button\r\n * is to perform an action when the user clicks on it, such as opening a print\r\n * modal or resetting the form. Buttons are typically rectangular in shape and\r\n * have a text label describing the action that they perform when clicked.\r\n */\n\nvar PDFButton =\n/** @class */\nfunction (_super) {\n  __extends(PDFButton, _super);\n\n  function PDFButton(acroPushButton, ref, doc) {\n    var _this = _super.call(this, acroPushButton, ref, doc) || this;\n\n    assertIs(acroPushButton, 'acroButton', [[PDFAcroPushButton, 'PDFAcroPushButton']]);\n    _this.acroField = acroPushButton;\n    return _this;\n  }\n  /**\r\n   * Display an image inside the bounds of this button's widgets. For example:\r\n   * ```js\r\n   * const pngImage = await pdfDoc.embedPng(...)\r\n   * const button = form.getButton('some.button.field')\r\n   * button.setImage(pngImage, ImageAlignment.Center)\r\n   * ```\r\n   * This will update the appearances streams for each of this button's widgets.\r\n   * @param image The image that should be displayed.\r\n   * @param alignment The alignment of the image.\r\n   */\n\n\n  PDFButton.prototype.setImage = function (image, alignment) {\n    if (alignment === void 0) {\n      alignment = ImageAlignment.Center;\n    }\n\n    var widgets = this.acroField.getWidgets();\n\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var streamRef = this.createImageAppearanceStream(widget, image, alignment);\n      this.updateWidgetAppearances(widget, {\n        normal: streamRef\n      });\n    }\n\n    this.markAsClean();\n  };\n  /**\r\n   * Set the font size for this field. Larger font sizes will result in larger\r\n   * text being displayed when PDF readers render this button. Font sizes may\r\n   * be integer or floating point numbers. Supplying a negative font size will\r\n   * cause this method to throw an error.\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * const button = form.getButton('some.button.field')\r\n   * button.setFontSize(4)\r\n   * button.setFontSize(15.7)\r\n   * ```\r\n   *\r\n   * > This method depends upon the existence of a default appearance\r\n   * > (`/DA`) string. If this field does not have a default appearance string,\r\n   * > or that string does not contain a font size (via the `Tf` operator),\r\n   * > then this method will throw an error.\r\n   *\r\n   * @param fontSize The font size to be used when rendering text in this field.\r\n   */\n\n\n  PDFButton.prototype.setFontSize = function (fontSize) {\n    assertPositive(fontSize, 'fontSize');\n    this.acroField.setFontSize(fontSize);\n    this.markAsDirty();\n  };\n  /**\r\n   * Show this button on the specified page with the given text. For example:\r\n   * ```js\r\n   * const ubuntuFont = await pdfDoc.embedFont(ubuntuFontBytes)\r\n   * const page = pdfDoc.addPage()\r\n   *\r\n   * const form = pdfDoc.getForm()\r\n   * const button = form.createButton('some.button.field')\r\n   *\r\n   * button.addToPage('Do Stuff', page, {\r\n   *   x: 50,\r\n   *   y: 75,\r\n   *   width: 200,\r\n   *   height: 100,\r\n   *   textColor: rgb(1, 0, 0),\r\n   *   backgroundColor: rgb(0, 1, 0),\r\n   *   borderColor: rgb(0, 0, 1),\r\n   *   borderWidth: 2,\r\n   *   rotate: degrees(90),\r\n   *   font: ubuntuFont,\r\n   * })\r\n   * ```\r\n   * This will create a new widget for this button field.\r\n   * @param text The text to be displayed for this button widget.\r\n   * @param page The page to which this button widget should be added.\r\n   * @param options The options to be used when adding this button widget.\r\n   */\n\n\n  PDFButton.prototype.addToPage = function ( // TODO: This needs to be optional, e.g. for image buttons\n  text, page, options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n\n    assertOrUndefined(text, 'text', ['string']);\n    assertOrUndefined(page, 'page', [[PDFPage, 'PDFPage']]);\n    assertFieldAppearanceOptions(options); // Create a widget for this button\n\n    var widget = this.createWidget({\n      x: ((_a = options === null || options === void 0 ? void 0 : options.x) !== null && _a !== void 0 ? _a : 0) - ((_b = options === null || options === void 0 ? void 0 : options.borderWidth) !== null && _b !== void 0 ? _b : 0) / 2,\n      y: ((_c = options === null || options === void 0 ? void 0 : options.y) !== null && _c !== void 0 ? _c : 0) - ((_d = options === null || options === void 0 ? void 0 : options.borderWidth) !== null && _d !== void 0 ? _d : 0) / 2,\n      width: (_e = options === null || options === void 0 ? void 0 : options.width) !== null && _e !== void 0 ? _e : 100,\n      height: (_f = options === null || options === void 0 ? void 0 : options.height) !== null && _f !== void 0 ? _f : 50,\n      textColor: (_g = options === null || options === void 0 ? void 0 : options.textColor) !== null && _g !== void 0 ? _g : rgb(0, 0, 0),\n      backgroundColor: (_h = options === null || options === void 0 ? void 0 : options.backgroundColor) !== null && _h !== void 0 ? _h : rgb(0.75, 0.75, 0.75),\n      borderColor: options === null || options === void 0 ? void 0 : options.borderColor,\n      borderWidth: (_j = options === null || options === void 0 ? void 0 : options.borderWidth) !== null && _j !== void 0 ? _j : 0,\n      rotate: (_k = options === null || options === void 0 ? void 0 : options.rotate) !== null && _k !== void 0 ? _k : degrees(0),\n      caption: text,\n      hidden: options === null || options === void 0 ? void 0 : options.hidden\n    });\n    var widgetRef = this.doc.context.register(widget.dict); // Add widget to this field\n\n    this.acroField.addWidget(widgetRef); // Set appearance streams for widget\n\n    var font = (_l = options === null || options === void 0 ? void 0 : options.font) !== null && _l !== void 0 ? _l : this.doc.getForm().getDefaultFont();\n    this.updateWidgetAppearance(widget, font); // Add widget to the given page\n\n    page.node.addAnnot(widgetRef);\n  };\n  /**\r\n   * Returns `true` if this button has been marked as dirty, or if any of this\r\n   * button's widgets do not have an appearance stream. For example:\r\n   * ```js\r\n   * const button = form.getButton('some.button.field')\r\n   * if (button.needsAppearancesUpdate()) console.log('Needs update')\r\n   * ```\r\n   * @returns Whether or not this button needs an appearance update.\r\n   */\n\n\n  PDFButton.prototype.needsAppearancesUpdate = function () {\n    var _a;\n\n    if (this.isDirty()) return true;\n    var widgets = this.acroField.getWidgets();\n\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var hasAppearances = ((_a = widget.getAppearances()) === null || _a === void 0 ? void 0 : _a.normal) instanceof PDFStream;\n      if (!hasAppearances) return true;\n    }\n\n    return false;\n  };\n  /**\r\n   * Update the appearance streams for each of this button's widgets using\r\n   * the default appearance provider for buttons. For example:\r\n   * ```js\r\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\r\n   * const button = form.getButton('some.button.field')\r\n   * button.defaultUpdateAppearances(helvetica)\r\n   * ```\r\n   * @param font The font to be used for creating the appearance streams.\r\n   */\n\n\n  PDFButton.prototype.defaultUpdateAppearances = function (font) {\n    assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n    this.updateAppearances(font);\n  };\n  /**\r\n   * Update the appearance streams for each of this button's widgets using\r\n   * the given appearance provider. If no `provider` is passed, the default\r\n   * appearance provider for buttons will be used. For example:\r\n   * ```js\r\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\r\n   * const button = form.getButton('some.button.field')\r\n   * button.updateAppearances(helvetica, (field, widget, font) => {\r\n   *   ...\r\n   *   return {\r\n   *     normal: drawButton(...),\r\n   *     down: drawButton(...),\r\n   *   }\r\n   * })\r\n   * ```\r\n   * @param font The font to be used for creating the appearance streams.\r\n   * @param provider Optionally, the appearance provider to be used for\r\n   *                 generating the contents of the appearance streams.\r\n   */\n\n\n  PDFButton.prototype.updateAppearances = function (font, provider) {\n    assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n    assertOrUndefined(provider, 'provider', [Function]);\n    var widgets = this.acroField.getWidgets();\n\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      this.updateWidgetAppearance(widget, font, provider);\n    }\n  };\n\n  PDFButton.prototype.updateWidgetAppearance = function (widget, font, provider) {\n    var apProvider = provider !== null && provider !== void 0 ? provider : defaultButtonAppearanceProvider;\n    var appearances = normalizeAppearance(apProvider(this, widget, font));\n    this.updateWidgetAppearanceWithFont(widget, font, appearances);\n  };\n  /**\r\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\r\n   * > consider using the [[PDFForm.getButton]] method, which will create an\r\n   * > instance of [[PDFButton]] for you.\r\n   *\r\n   * Create an instance of [[PDFButton]] from an existing acroPushButton and ref\r\n   *\r\n   * @param acroPushButton The underlying `PDFAcroPushButton` for this button.\r\n   * @param ref The unique reference for this button.\r\n   * @param doc The document to which this button will belong.\r\n   */\n\n\n  PDFButton.of = function (acroPushButton, ref, doc) {\n    return new PDFButton(acroPushButton, ref, doc);\n  };\n\n  return PDFButton;\n}(PDFField);\n\nexport default PDFButton;","map":{"version":3,"sources":["../../../src/api/form/PDFButton.ts"],"names":[],"mappings":";AACA,OAAO,OAAP,MAAc,YAAd;AACA,OAAO,OAAP,MAAc,YAAd;AAEA,SAAS,cAAT,QAAyB,oBAAzB;AACA,SAEE,mBAFF,EAGE,+BAHF,QAIC,eAJD;AAKA,OAAO,QAAP,IAEE,4BAFF,QAGC,YAHD;AAIA,SAAS,GAAT,QAAc,WAAd;AACA,SAAS,OAAT,QAAkB,cAAlB;AAEA,SAEE,SAFF,EAGE,iBAHF,QAKC,YALD;AAMA,SAAS,QAAT,EAAmB,iBAAnB,EAAsC,cAAtC,QAAsD,aAAtD;AAEA;;;;;;;;AAQG;;AACH,IAAA,SAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAuC,EAAA,SAAA,CAAA,SAAA,EAAA,MAAA,CAAA;;AAqBrC,WAAA,SAAA,CACE,cADF,EAEE,GAFF,EAGE,GAHF,EAGkB;AAHlB,QAAA,KAAA,GAKE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,cAAN,EAAsB,GAAtB,EAA2B,GAA3B,KAA+B,IALjC;;AAOE,IAAA,QAAQ,CAAC,cAAD,EAAiB,YAAjB,EAA+B,CACrC,CAAC,iBAAD,EAAoB,mBAApB,CADqC,CAA/B,CAAR;AAIA,IAAA,KAAI,CAAC,SAAL,GAAiB,cAAjB;;AACD;AAED;;;;;;;;;;AAUG;;;AACH,EAAA,SAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,KAAT,EAA0B,SAA1B,EAA2D;AAAjC,QAAA,SAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,SAAA,GAAY,cAAc,CAAC,MAA3B;AAAiC;;AACzD,QAAM,OAAO,GAAG,KAAK,SAAL,CAAe,UAAf,EAAhB;;AACA,SAAK,IAAI,GAAG,GAAG,CAAV,EAAa,GAAG,GAAG,OAAO,CAAC,MAAhC,EAAwC,GAAG,GAAG,GAA9C,EAAmD,GAAG,EAAtD,EAA0D;AACxD,UAAM,MAAM,GAAG,OAAO,CAAC,GAAD,CAAtB;AACA,UAAM,SAAS,GAAG,KAAK,2BAAL,CAChB,MADgB,EAEhB,KAFgB,EAGhB,SAHgB,CAAlB;AAKA,WAAK,uBAAL,CAA6B,MAA7B,EAAqC;AAAE,QAAA,MAAM,EAAE;AAAV,OAArC;AACD;;AAED,SAAK,WAAL;AACD,GAbD;AAeA;;;;;;;;;;;;;;;;;;;AAmBG;;;AACH,EAAA,SAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,QAAZ,EAA4B;AAC1B,IAAA,cAAc,CAAC,QAAD,EAAW,UAAX,CAAd;AACA,SAAK,SAAL,CAAe,WAAf,CAA2B,QAA3B;AACA,SAAK,WAAL;AACD,GAJD;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BG;;;AACH,EAAA,SAAA,CAAA,SAAA,CAAA,SAAA,GAAA,WACE;AACA,EAAA,IAFF,EAGE,IAHF,EAIE,OAJF,EAIkC;;;AAEhC,IAAA,iBAAiB,CAAC,IAAD,EAAO,MAAP,EAAe,CAAC,QAAD,CAAf,CAAjB;AACA,IAAA,iBAAiB,CAAC,IAAD,EAAO,MAAP,EAAe,CAAC,CAAC,OAAD,EAAU,SAAV,CAAD,CAAf,CAAjB;AACA,IAAA,4BAA4B,CAAC,OAAD,CAA5B,CAJgC,CAMhC;;AACA,QAAM,MAAM,GAAG,KAAK,YAAL,CAAkB;AAC/B,MAAA,CAAC,EAAE,CAAA,CAAA,EAAA,GAAC,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,CAAV,MAAW,IAAX,IAAW,EAAA,KAAA,KAAA,CAAX,GAAW,EAAX,GAAe,CAAf,IAAoB,CAAA,CAAA,EAAA,GAAC,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,WAAV,MAAqB,IAArB,IAAqB,EAAA,KAAA,KAAA,CAArB,GAAqB,EAArB,GAAyB,CAAzB,IAA8B,CADtB;AAE/B,MAAA,CAAC,EAAE,CAAA,CAAA,EAAA,GAAC,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,CAAV,MAAW,IAAX,IAAW,EAAA,KAAA,KAAA,CAAX,GAAW,EAAX,GAAe,CAAf,IAAoB,CAAA,CAAA,EAAA,GAAC,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,WAAV,MAAqB,IAArB,IAAqB,EAAA,KAAA,KAAA,CAArB,GAAqB,EAArB,GAAyB,CAAzB,IAA8B,CAFtB;AAG/B,MAAA,KAAK,EAAA,CAAA,EAAA,GAAE,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,KAAX,MAAgB,IAAhB,IAAgB,EAAA,KAAA,KAAA,CAAhB,GAAgB,EAAhB,GAAoB,GAHM;AAI/B,MAAA,MAAM,EAAA,CAAA,EAAA,GAAE,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,MAAX,MAAiB,IAAjB,IAAiB,EAAA,KAAA,KAAA,CAAjB,GAAiB,EAAjB,GAAqB,EAJI;AAK/B,MAAA,SAAS,EAAA,CAAA,EAAA,GAAE,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,SAAX,MAAoB,IAApB,IAAoB,EAAA,KAAA,KAAA,CAApB,GAAoB,EAApB,GAAwB,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CALL;AAM/B,MAAA,eAAe,EAAA,CAAA,EAAA,GAAE,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,eAAX,MAA0B,IAA1B,IAA0B,EAAA,KAAA,KAAA,CAA1B,GAA0B,EAA1B,GAA8B,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CANjB;AAO/B,MAAA,WAAW,EAAE,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,WAPS;AAQ/B,MAAA,WAAW,EAAA,CAAA,EAAA,GAAE,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,WAAX,MAAsB,IAAtB,IAAsB,EAAA,KAAA,KAAA,CAAtB,GAAsB,EAAtB,GAA0B,CARN;AAS/B,MAAA,MAAM,EAAA,CAAA,EAAA,GAAE,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,MAAX,MAAiB,IAAjB,IAAiB,EAAA,KAAA,KAAA,CAAjB,GAAiB,EAAjB,GAAqB,OAAO,CAAC,CAAD,CATH;AAU/B,MAAA,OAAO,EAAE,IAVsB;AAW/B,MAAA,MAAM,EAAE,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE;AAXc,KAAlB,CAAf;AAaA,QAAM,SAAS,GAAG,KAAK,GAAL,CAAS,OAAT,CAAiB,QAAjB,CAA0B,MAAM,CAAC,IAAjC,CAAlB,CApBgC,CAsBhC;;AACA,SAAK,SAAL,CAAe,SAAf,CAAyB,SAAzB,EAvBgC,CAyBhC;;AACA,QAAM,IAAI,GAAA,CAAA,EAAA,GAAG,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,IAAZ,MAAgB,IAAhB,IAAgB,EAAA,KAAA,KAAA,CAAhB,GAAgB,EAAhB,GAAoB,KAAK,GAAL,CAAS,OAAT,GAAmB,cAAnB,EAA9B;AACA,SAAK,sBAAL,CAA4B,MAA5B,EAAoC,IAApC,EA3BgC,CA6BhC;;AACA,IAAA,IAAI,CAAC,IAAL,CAAU,QAAV,CAAmB,SAAnB;AACD,GAnCD;AAqCA;;;;;;;;AAQG;;;AACH,EAAA,SAAA,CAAA,SAAA,CAAA,sBAAA,GAAA,YAAA;;;AACE,QAAI,KAAK,OAAL,EAAJ,EAAoB,OAAO,IAAP;AAEpB,QAAM,OAAO,GAAG,KAAK,SAAL,CAAe,UAAf,EAAhB;;AACA,SAAK,IAAI,GAAG,GAAG,CAAV,EAAa,GAAG,GAAG,OAAO,CAAC,MAAhC,EAAwC,GAAG,GAAG,GAA9C,EAAmD,GAAG,EAAtD,EAA0D;AACxD,UAAM,MAAM,GAAG,OAAO,CAAC,GAAD,CAAtB;AACA,UAAM,cAAc,GAClB,CAAA,CAAA,EAAA,GAAA,MAAM,CAAC,cAAP,EAAA,MAAuB,IAAvB,IAAuB,EAAA,KAAA,KAAA,CAAvB,GAAuB,KAAA,CAAvB,GAAuB,EAAA,CAAE,MAAzB,aAA2C,SAD7C;AAEA,UAAI,CAAC,cAAL,EAAqB,OAAO,IAAP;AACtB;;AAED,WAAO,KAAP;AACD,GAZD;AAcA;;;;;;;;;AASG;;;AACH,EAAA,SAAA,CAAA,SAAA,CAAA,wBAAA,GAAA,UAAyB,IAAzB,EAAsC;AACpC,IAAA,QAAQ,CAAC,IAAD,EAAO,MAAP,EAAe,CAAC,CAAC,OAAD,EAAU,SAAV,CAAD,CAAf,CAAR;AACA,SAAK,iBAAL,CAAuB,IAAvB;AACD,GAHD;AAKA;;;;;;;;;;;;;;;;;;AAkBG;;;AACH,EAAA,SAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UACE,IADF,EAEE,QAFF,EAE6C;AAE3C,IAAA,QAAQ,CAAC,IAAD,EAAO,MAAP,EAAe,CAAC,CAAC,OAAD,EAAU,SAAV,CAAD,CAAf,CAAR;AACA,IAAA,iBAAiB,CAAC,QAAD,EAAW,UAAX,EAAuB,CAAC,QAAD,CAAvB,CAAjB;AAEA,QAAM,OAAO,GAAG,KAAK,SAAL,CAAe,UAAf,EAAhB;;AACA,SAAK,IAAI,GAAG,GAAG,CAAV,EAAa,GAAG,GAAG,OAAO,CAAC,MAAhC,EAAwC,GAAG,GAAG,GAA9C,EAAmD,GAAG,EAAtD,EAA0D;AACxD,UAAM,MAAM,GAAG,OAAO,CAAC,GAAD,CAAtB;AACA,WAAK,sBAAL,CAA4B,MAA5B,EAAoC,IAApC,EAA0C,QAA1C;AACD;AACF,GAZD;;AAcQ,EAAA,SAAA,CAAA,SAAA,CAAA,sBAAA,GAAR,UACE,MADF,EAEE,IAFF,EAGE,QAHF,EAG6C;AAE3C,QAAM,UAAU,GAAG,QAAQ,KAAA,IAAR,IAAA,QAAQ,KAAA,KAAA,CAAR,GAAA,QAAA,GAAY,+BAA/B;AACA,QAAM,WAAW,GAAG,mBAAmB,CAAC,UAAU,CAAC,IAAD,EAAO,MAAP,EAAe,IAAf,CAAX,CAAvC;AACA,SAAK,8BAAL,CAAoC,MAApC,EAA4C,IAA5C,EAAkD,WAAlD;AACD,GARO;AA7NR;;;;;;;;;;AAUG;;;AACI,EAAA,SAAA,CAAA,EAAA,GAAK,UACV,cADU,EAEV,GAFU,EAGV,GAHU,EAGM;AACb,WAAA,IAAI,SAAJ,CAAc,cAAd,EAA8B,GAA9B,EAAA,GAAA,CAAA;AAAuC,GAJrC;;AA2NT,SAAA,SAAA;AAAC,CAvOD,CAAuC,QAAvC,CAAA;;eAAqB,S","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\r\nimport PDFPage from \"../PDFPage\";\r\nimport PDFFont from \"../PDFFont\";\r\nimport { ImageAlignment } from \"../image/alignment\";\r\nimport { normalizeAppearance, defaultButtonAppearanceProvider, } from \"./appearances\";\r\nimport PDFField, { assertFieldAppearanceOptions, } from \"./PDFField\";\r\nimport { rgb } from \"../colors\";\r\nimport { degrees } from \"../rotations\";\r\nimport { PDFStream, PDFAcroPushButton, } from \"../../core\";\r\nimport { assertIs, assertOrUndefined, assertPositive } from \"../../utils\";\r\n/**\r\n * Represents a button field of a [[PDFForm]].\r\n *\r\n * [[PDFButton]] fields are interactive controls that users can click with their\r\n * mouse. This type of [[PDFField]] is not stateful. The purpose of a button\r\n * is to perform an action when the user clicks on it, such as opening a print\r\n * modal or resetting the form. Buttons are typically rectangular in shape and\r\n * have a text label describing the action that they perform when clicked.\r\n */\r\nvar PDFButton = /** @class */ (function (_super) {\r\n    __extends(PDFButton, _super);\r\n    function PDFButton(acroPushButton, ref, doc) {\r\n        var _this = _super.call(this, acroPushButton, ref, doc) || this;\r\n        assertIs(acroPushButton, 'acroButton', [\r\n            [PDFAcroPushButton, 'PDFAcroPushButton'],\r\n        ]);\r\n        _this.acroField = acroPushButton;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Display an image inside the bounds of this button's widgets. For example:\r\n     * ```js\r\n     * const pngImage = await pdfDoc.embedPng(...)\r\n     * const button = form.getButton('some.button.field')\r\n     * button.setImage(pngImage, ImageAlignment.Center)\r\n     * ```\r\n     * This will update the appearances streams for each of this button's widgets.\r\n     * @param image The image that should be displayed.\r\n     * @param alignment The alignment of the image.\r\n     */\r\n    PDFButton.prototype.setImage = function (image, alignment) {\r\n        if (alignment === void 0) { alignment = ImageAlignment.Center; }\r\n        var widgets = this.acroField.getWidgets();\r\n        for (var idx = 0, len = widgets.length; idx < len; idx++) {\r\n            var widget = widgets[idx];\r\n            var streamRef = this.createImageAppearanceStream(widget, image, alignment);\r\n            this.updateWidgetAppearances(widget, { normal: streamRef });\r\n        }\r\n        this.markAsClean();\r\n    };\r\n    /**\r\n     * Set the font size for this field. Larger font sizes will result in larger\r\n     * text being displayed when PDF readers render this button. Font sizes may\r\n     * be integer or floating point numbers. Supplying a negative font size will\r\n     * cause this method to throw an error.\r\n     *\r\n     * For example:\r\n     * ```js\r\n     * const button = form.getButton('some.button.field')\r\n     * button.setFontSize(4)\r\n     * button.setFontSize(15.7)\r\n     * ```\r\n     *\r\n     * > This method depends upon the existence of a default appearance\r\n     * > (`/DA`) string. If this field does not have a default appearance string,\r\n     * > or that string does not contain a font size (via the `Tf` operator),\r\n     * > then this method will throw an error.\r\n     *\r\n     * @param fontSize The font size to be used when rendering text in this field.\r\n     */\r\n    PDFButton.prototype.setFontSize = function (fontSize) {\r\n        assertPositive(fontSize, 'fontSize');\r\n        this.acroField.setFontSize(fontSize);\r\n        this.markAsDirty();\r\n    };\r\n    /**\r\n     * Show this button on the specified page with the given text. For example:\r\n     * ```js\r\n     * const ubuntuFont = await pdfDoc.embedFont(ubuntuFontBytes)\r\n     * const page = pdfDoc.addPage()\r\n     *\r\n     * const form = pdfDoc.getForm()\r\n     * const button = form.createButton('some.button.field')\r\n     *\r\n     * button.addToPage('Do Stuff', page, {\r\n     *   x: 50,\r\n     *   y: 75,\r\n     *   width: 200,\r\n     *   height: 100,\r\n     *   textColor: rgb(1, 0, 0),\r\n     *   backgroundColor: rgb(0, 1, 0),\r\n     *   borderColor: rgb(0, 0, 1),\r\n     *   borderWidth: 2,\r\n     *   rotate: degrees(90),\r\n     *   font: ubuntuFont,\r\n     * })\r\n     * ```\r\n     * This will create a new widget for this button field.\r\n     * @param text The text to be displayed for this button widget.\r\n     * @param page The page to which this button widget should be added.\r\n     * @param options The options to be used when adding this button widget.\r\n     */\r\n    PDFButton.prototype.addToPage = function (\r\n    // TODO: This needs to be optional, e.g. for image buttons\r\n    text, page, options) {\r\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\r\n        assertOrUndefined(text, 'text', ['string']);\r\n        assertOrUndefined(page, 'page', [[PDFPage, 'PDFPage']]);\r\n        assertFieldAppearanceOptions(options);\r\n        // Create a widget for this button\r\n        var widget = this.createWidget({\r\n            x: ((_a = options === null || options === void 0 ? void 0 : options.x) !== null && _a !== void 0 ? _a : 0) - ((_b = options === null || options === void 0 ? void 0 : options.borderWidth) !== null && _b !== void 0 ? _b : 0) / 2,\r\n            y: ((_c = options === null || options === void 0 ? void 0 : options.y) !== null && _c !== void 0 ? _c : 0) - ((_d = options === null || options === void 0 ? void 0 : options.borderWidth) !== null && _d !== void 0 ? _d : 0) / 2,\r\n            width: (_e = options === null || options === void 0 ? void 0 : options.width) !== null && _e !== void 0 ? _e : 100,\r\n            height: (_f = options === null || options === void 0 ? void 0 : options.height) !== null && _f !== void 0 ? _f : 50,\r\n            textColor: (_g = options === null || options === void 0 ? void 0 : options.textColor) !== null && _g !== void 0 ? _g : rgb(0, 0, 0),\r\n            backgroundColor: (_h = options === null || options === void 0 ? void 0 : options.backgroundColor) !== null && _h !== void 0 ? _h : rgb(0.75, 0.75, 0.75),\r\n            borderColor: options === null || options === void 0 ? void 0 : options.borderColor,\r\n            borderWidth: (_j = options === null || options === void 0 ? void 0 : options.borderWidth) !== null && _j !== void 0 ? _j : 0,\r\n            rotate: (_k = options === null || options === void 0 ? void 0 : options.rotate) !== null && _k !== void 0 ? _k : degrees(0),\r\n            caption: text,\r\n            hidden: options === null || options === void 0 ? void 0 : options.hidden,\r\n        });\r\n        var widgetRef = this.doc.context.register(widget.dict);\r\n        // Add widget to this field\r\n        this.acroField.addWidget(widgetRef);\r\n        // Set appearance streams for widget\r\n        var font = (_l = options === null || options === void 0 ? void 0 : options.font) !== null && _l !== void 0 ? _l : this.doc.getForm().getDefaultFont();\r\n        this.updateWidgetAppearance(widget, font);\r\n        // Add widget to the given page\r\n        page.node.addAnnot(widgetRef);\r\n    };\r\n    /**\r\n     * Returns `true` if this button has been marked as dirty, or if any of this\r\n     * button's widgets do not have an appearance stream. For example:\r\n     * ```js\r\n     * const button = form.getButton('some.button.field')\r\n     * if (button.needsAppearancesUpdate()) console.log('Needs update')\r\n     * ```\r\n     * @returns Whether or not this button needs an appearance update.\r\n     */\r\n    PDFButton.prototype.needsAppearancesUpdate = function () {\r\n        var _a;\r\n        if (this.isDirty())\r\n            return true;\r\n        var widgets = this.acroField.getWidgets();\r\n        for (var idx = 0, len = widgets.length; idx < len; idx++) {\r\n            var widget = widgets[idx];\r\n            var hasAppearances = ((_a = widget.getAppearances()) === null || _a === void 0 ? void 0 : _a.normal) instanceof PDFStream;\r\n            if (!hasAppearances)\r\n                return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Update the appearance streams for each of this button's widgets using\r\n     * the default appearance provider for buttons. For example:\r\n     * ```js\r\n     * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\r\n     * const button = form.getButton('some.button.field')\r\n     * button.defaultUpdateAppearances(helvetica)\r\n     * ```\r\n     * @param font The font to be used for creating the appearance streams.\r\n     */\r\n    PDFButton.prototype.defaultUpdateAppearances = function (font) {\r\n        assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\r\n        this.updateAppearances(font);\r\n    };\r\n    /**\r\n     * Update the appearance streams for each of this button's widgets using\r\n     * the given appearance provider. If no `provider` is passed, the default\r\n     * appearance provider for buttons will be used. For example:\r\n     * ```js\r\n     * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\r\n     * const button = form.getButton('some.button.field')\r\n     * button.updateAppearances(helvetica, (field, widget, font) => {\r\n     *   ...\r\n     *   return {\r\n     *     normal: drawButton(...),\r\n     *     down: drawButton(...),\r\n     *   }\r\n     * })\r\n     * ```\r\n     * @param font The font to be used for creating the appearance streams.\r\n     * @param provider Optionally, the appearance provider to be used for\r\n     *                 generating the contents of the appearance streams.\r\n     */\r\n    PDFButton.prototype.updateAppearances = function (font, provider) {\r\n        assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\r\n        assertOrUndefined(provider, 'provider', [Function]);\r\n        var widgets = this.acroField.getWidgets();\r\n        for (var idx = 0, len = widgets.length; idx < len; idx++) {\r\n            var widget = widgets[idx];\r\n            this.updateWidgetAppearance(widget, font, provider);\r\n        }\r\n    };\r\n    PDFButton.prototype.updateWidgetAppearance = function (widget, font, provider) {\r\n        var apProvider = provider !== null && provider !== void 0 ? provider : defaultButtonAppearanceProvider;\r\n        var appearances = normalizeAppearance(apProvider(this, widget, font));\r\n        this.updateWidgetAppearanceWithFont(widget, font, appearances);\r\n    };\r\n    /**\r\n     * > **NOTE:** You probably don't want to call this method directly. Instead,\r\n     * > consider using the [[PDFForm.getButton]] method, which will create an\r\n     * > instance of [[PDFButton]] for you.\r\n     *\r\n     * Create an instance of [[PDFButton]] from an existing acroPushButton and ref\r\n     *\r\n     * @param acroPushButton The underlying `PDFAcroPushButton` for this button.\r\n     * @param ref The unique reference for this button.\r\n     * @param doc The document to which this button will belong.\r\n     */\r\n    PDFButton.of = function (acroPushButton, ref, doc) { return new PDFButton(acroPushButton, ref, doc); };\r\n    return PDFButton;\r\n}(PDFField));\r\nexport default PDFButton;\r\n//# sourceMappingURL=PDFButton.js.map"]},"metadata":{},"sourceType":"module"}