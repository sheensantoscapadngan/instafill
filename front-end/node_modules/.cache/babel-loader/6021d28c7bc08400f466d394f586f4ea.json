{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport CustomFontEmbedder from \"./CustomFontEmbedder\";\nimport PDFHexString from \"../objects/PDFHexString\";\nimport { Cache, mergeUint8Arrays, toHexStringOfMinLength } from \"../../utils\";\n/**\n * A note of thanks to the developers of https://github.com/foliojs/pdfkit, as\n * this class borrows from:\n *   https://github.com/devongovett/pdfkit/blob/e71edab0dd4657b5a767804ba86c94c58d01fbca/lib/image/jpeg.coffee\n */\n\nvar CustomFontSubsetEmbedder =\n/** @class */\nfunction (_super) {\n  __extends(CustomFontSubsetEmbedder, _super);\n\n  function CustomFontSubsetEmbedder(font, fontData, customFontName, fontFeatures) {\n    var _this = _super.call(this, font, fontData, customFontName, fontFeatures) || this;\n\n    _this.subset = _this.font.createSubset();\n    _this.glyphs = [];\n    _this.glyphCache = Cache.populatedBy(function () {\n      return _this.glyphs;\n    });\n    _this.glyphIdMap = new Map();\n    return _this;\n  }\n\n  CustomFontSubsetEmbedder.for = function (fontkit, fontData, customFontName, fontFeatures) {\n    return __awaiter(this, void 0, void 0, function () {\n      var font;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , fontkit.create(fontData)];\n\n          case 1:\n            font = _a.sent();\n            return [2\n            /*return*/\n            , new CustomFontSubsetEmbedder(font, fontData, customFontName, fontFeatures)];\n        }\n      });\n    });\n  };\n\n  CustomFontSubsetEmbedder.prototype.encodeText = function (text) {\n    var glyphs = this.font.layout(text, this.fontFeatures).glyphs;\n    var hexCodes = new Array(glyphs.length);\n\n    for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n      var glyph = glyphs[idx];\n      var subsetGlyphId = this.subset.includeGlyph(glyph);\n      this.glyphs[subsetGlyphId - 1] = glyph;\n      this.glyphIdMap.set(glyph.id, subsetGlyphId);\n      hexCodes[idx] = toHexStringOfMinLength(subsetGlyphId, 4);\n    }\n\n    this.glyphCache.invalidate();\n    return PDFHexString.of(hexCodes.join(''));\n  };\n\n  CustomFontSubsetEmbedder.prototype.isCFF = function () {\n    return this.subset.cff;\n  };\n\n  CustomFontSubsetEmbedder.prototype.glyphId = function (glyph) {\n    return glyph ? this.glyphIdMap.get(glyph.id) : -1;\n  };\n\n  CustomFontSubsetEmbedder.prototype.serializeFont = function () {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var parts = [];\n\n      _this.subset.encodeStream().on('data', function (bytes) {\n        return parts.push(bytes);\n      }).on('end', function () {\n        return resolve(mergeUint8Arrays(parts));\n      }).on('error', function (err) {\n        return reject(err);\n      });\n    });\n  };\n\n  return CustomFontSubsetEmbedder;\n}(CustomFontEmbedder);\n\nexport default CustomFontSubsetEmbedder;","map":{"version":3,"sources":["../../../src/core/embedders/CustomFontSubsetEmbedder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __awaiter, __extends, __generator } from \"tslib\";\nimport CustomFontEmbedder from \"./CustomFontEmbedder\";\nimport PDFHexString from \"../objects/PDFHexString\";\nimport { Cache, mergeUint8Arrays, toHexStringOfMinLength } from \"../../utils\";\n/**\n * A note of thanks to the developers of https://github.com/foliojs/pdfkit, as\n * this class borrows from:\n *   https://github.com/devongovett/pdfkit/blob/e71edab0dd4657b5a767804ba86c94c58d01fbca/lib/image/jpeg.coffee\n */\nvar CustomFontSubsetEmbedder = /** @class */ (function (_super) {\n    __extends(CustomFontSubsetEmbedder, _super);\n    function CustomFontSubsetEmbedder(font, fontData, customFontName, fontFeatures) {\n        var _this = _super.call(this, font, fontData, customFontName, fontFeatures) || this;\n        _this.subset = _this.font.createSubset();\n        _this.glyphs = [];\n        _this.glyphCache = Cache.populatedBy(function () { return _this.glyphs; });\n        _this.glyphIdMap = new Map();\n        return _this;\n    }\n    CustomFontSubsetEmbedder.for = function (fontkit, fontData, customFontName, fontFeatures) {\n        return __awaiter(this, void 0, void 0, function () {\n            var font;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, fontkit.create(fontData)];\n                    case 1:\n                        font = _a.sent();\n                        return [2 /*return*/, new CustomFontSubsetEmbedder(font, fontData, customFontName, fontFeatures)];\n                }\n            });\n        });\n    };\n    CustomFontSubsetEmbedder.prototype.encodeText = function (text) {\n        var glyphs = this.font.layout(text, this.fontFeatures).glyphs;\n        var hexCodes = new Array(glyphs.length);\n        for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n            var glyph = glyphs[idx];\n            var subsetGlyphId = this.subset.includeGlyph(glyph);\n            this.glyphs[subsetGlyphId - 1] = glyph;\n            this.glyphIdMap.set(glyph.id, subsetGlyphId);\n            hexCodes[idx] = toHexStringOfMinLength(subsetGlyphId, 4);\n        }\n        this.glyphCache.invalidate();\n        return PDFHexString.of(hexCodes.join(''));\n    };\n    CustomFontSubsetEmbedder.prototype.isCFF = function () {\n        return this.subset.cff;\n    };\n    CustomFontSubsetEmbedder.prototype.glyphId = function (glyph) {\n        return glyph ? this.glyphIdMap.get(glyph.id) : -1;\n    };\n    CustomFontSubsetEmbedder.prototype.serializeFont = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var parts = [];\n            _this.subset\n                .encodeStream()\n                .on('data', function (bytes) { return parts.push(bytes); })\n                .on('end', function () { return resolve(mergeUint8Arrays(parts)); })\n                .on('error', function (err) { return reject(err); });\n        });\n    };\n    return CustomFontSubsetEmbedder;\n}(CustomFontEmbedder));\nexport default CustomFontSubsetEmbedder;\n//# sourceMappingURL=CustomFontSubsetEmbedder.js.map"]},"metadata":{},"sourceType":"module"}