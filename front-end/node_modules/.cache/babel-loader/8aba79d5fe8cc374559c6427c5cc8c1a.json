{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport PDFDocument from \"../PDFDocument\";\nimport PDFButton from \"./PDFButton\";\nimport PDFCheckBox from \"./PDFCheckBox\";\nimport PDFDropdown from \"./PDFDropdown\";\nimport PDFOptionList from \"./PDFOptionList\";\nimport PDFRadioGroup from \"./PDFRadioGroup\";\nimport PDFSignature from \"./PDFSignature\";\nimport PDFTextField from \"./PDFTextField\";\nimport { NoSuchFieldError, UnexpectedFieldTypeError, FieldAlreadyExistsError, InvalidFieldNamePartError } from \"../errors\";\nimport PDFFont from \"../PDFFont\";\nimport { StandardFonts } from \"../StandardFonts\";\nimport { rotateInPlace } from \"../operations\";\nimport { drawObject, popGraphicsState, pushGraphicsState, translate } from \"../operators\";\nimport { PDFAcroForm, PDFAcroCheckBox, PDFAcroComboBox, PDFAcroListBox, PDFAcroRadioButton, PDFAcroSignature, PDFAcroText, PDFAcroPushButton, PDFAcroNonTerminal, PDFDict, PDFRef, createPDFAcroFields, PDFName } from \"../../core\";\nimport { addRandomSuffix, assertIs, Cache, assertOrUndefined } from \"../../utils\";\n/**\r\n * Represents the interactive form of a [[PDFDocument]].\r\n *\r\n * Interactive forms (sometimes called _AcroForms_) are collections of fields\r\n * designed to gather information from a user. A PDF document may contains any\r\n * number of fields that appear on various pages, all of which make up a single,\r\n * global interactive form spanning the entire document. This means that\r\n * instances of [[PDFDocument]] shall contain at most one [[PDFForm]].\r\n *\r\n * The fields of an interactive form are represented by [[PDFField]] instances.\r\n */\n\nvar PDFForm =\n/** @class */\nfunction () {\n  function PDFForm(acroForm, doc) {\n    var _this = this;\n\n    this.embedDefaultFont = function () {\n      return _this.doc.embedStandardFont(StandardFonts.Helvetica);\n    };\n\n    assertIs(acroForm, 'acroForm', [[PDFAcroForm, 'PDFAcroForm']]);\n    assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n    this.acroForm = acroForm;\n    this.doc = doc;\n    this.dirtyFields = new Set();\n    this.defaultFontCache = Cache.populatedBy(this.embedDefaultFont);\n  }\n  /**\r\n   * Returns `true` if this [[PDFForm]] has XFA data. Most PDFs with form\r\n   * fields do not use XFA as it is not widely supported by PDF readers.\r\n   *\r\n   * > `pdf-lib` does not support creation, modification, or reading of XFA\r\n   * > fields.\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * const form = pdfDoc.getForm()\r\n   * if (form.hasXFA()) console.log('PDF has XFA data')\r\n   * ```\r\n   * @returns Whether or not this form has XFA data.\r\n   */\n\n\n  PDFForm.prototype.hasXFA = function () {\n    return this.acroForm.dict.has(PDFName.of('XFA'));\n  };\n  /**\r\n   * Disconnect the XFA data from this [[PDFForm]] (if any exists). This will\r\n   * force readers to fallback to standard fields if the [[PDFDocument]]\r\n   * contains any. For example:\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * const form = pdfDoc.getForm()\r\n   * form.deleteXFA()\r\n   * ```\r\n   */\n\n\n  PDFForm.prototype.deleteXFA = function () {\n    this.acroForm.dict.delete(PDFName.of('XFA'));\n  };\n  /**\r\n   * Get all fields contained in this [[PDFForm]]. For example:\r\n   * ```js\r\n   * const form = pdfDoc.getForm()\r\n   * const fields = form.getFields()\r\n   * fields.forEach(field => {\r\n   *   const type = field.constructor.name\r\n   *   const name = field.getName()\r\n   *   console.log(`${type}: ${name}`)\r\n   * })\r\n   * ```\r\n   * @returns An array of all fields in this form.\r\n   */\n\n\n  PDFForm.prototype.getFields = function () {\n    var allFields = this.acroForm.getAllFields();\n    var fields = [];\n\n    for (var idx = 0, len = allFields.length; idx < len; idx++) {\n      var _a = allFields[idx],\n          acroField = _a[0],\n          ref = _a[1];\n      var field = convertToPDFField(acroField, ref, this.doc);\n      if (field) fields.push(field);\n    }\n\n    return fields;\n  };\n  /**\r\n   * Get the field in this [[PDFForm]] with the given name. For example:\r\n   * ```js\r\n   * const form = pdfDoc.getForm()\r\n   * const field = form.getFieldMaybe('Page1.Foo.Bar[0]')\r\n   * if (field) console.log('Field exists!')\r\n   * ```\r\n   * @param name A fully qualified field name.\r\n   * @returns The field with the specified name, if one exists.\r\n   */\n\n\n  PDFForm.prototype.getFieldMaybe = function (name) {\n    assertIs(name, 'name', ['string']);\n    var fields = this.getFields();\n\n    for (var idx = 0, len = fields.length; idx < len; idx++) {\n      var field = fields[idx];\n      if (field.getName() === name) return field;\n    }\n\n    return undefined;\n  };\n  /**\r\n   * Get the field in this [[PDFForm]] with the given name. For example:\r\n   * ```js\r\n   * const form = pdfDoc.getForm()\r\n   * const field = form.getField('Page1.Foo.Bar[0]')\r\n   * ```\r\n   * If no field exists with the provided name, an error will be thrown.\r\n   * @param name A fully qualified field name.\r\n   * @returns The field with the specified name.\r\n   */\n\n\n  PDFForm.prototype.getField = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getFieldMaybe(name);\n    if (field) return field;\n    throw new NoSuchFieldError(name);\n  };\n  /**\r\n   * Get the button field in this [[PDFForm]] with the given name. For example:\r\n   * ```js\r\n   * const form = pdfDoc.getForm()\r\n   * const button = form.getButton('Page1.Foo.Button[0]')\r\n   * ```\r\n   * An error will be thrown if no field exists with the provided name, or if\r\n   * the field exists but is not a button.\r\n   * @param name A fully qualified button name.\r\n   * @returns The button with the specified name.\r\n   */\n\n\n  PDFForm.prototype.getButton = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getField(name);\n    if (field instanceof PDFButton) return field;\n    throw new UnexpectedFieldTypeError(name, PDFButton, field);\n  };\n  /**\r\n   * Get the check box field in this [[PDFForm]] with the given name.\r\n   * For example:\r\n   * ```js\r\n   * const form = pdfDoc.getForm()\r\n   * const checkBox = form.getCheckBox('Page1.Foo.CheckBox[0]')\r\n   * checkBox.check()\r\n   * ```\r\n   * An error will be thrown if no field exists with the provided name, or if\r\n   * the field exists but is not a check box.\r\n   * @param name A fully qualified check box name.\r\n   * @returns The check box with the specified name.\r\n   */\n\n\n  PDFForm.prototype.getCheckBox = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getField(name);\n    if (field instanceof PDFCheckBox) return field;\n    throw new UnexpectedFieldTypeError(name, PDFCheckBox, field);\n  };\n  /**\r\n   * Get the dropdown field in this [[PDFForm]] with the given name.\r\n   * For example:\r\n   * ```js\r\n   * const form = pdfDoc.getForm()\r\n   * const dropdown = form.getDropdown('Page1.Foo.Dropdown[0]')\r\n   * const options = dropdown.getOptions()\r\n   * dropdown.select(options[0])\r\n   * ```\r\n   * An error will be thrown if no field exists with the provided name, or if\r\n   * the field exists but is not a dropdown.\r\n   * @param name A fully qualified dropdown name.\r\n   * @returns The dropdown with the specified name.\r\n   */\n\n\n  PDFForm.prototype.getDropdown = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getField(name);\n    if (field instanceof PDFDropdown) return field;\n    throw new UnexpectedFieldTypeError(name, PDFDropdown, field);\n  };\n  /**\r\n   * Get the option list field in this [[PDFForm]] with the given name.\r\n   * For example:\r\n   * ```js\r\n   * const form = pdfDoc.getForm()\r\n   * const optionList = form.getOptionList('Page1.Foo.OptionList[0]')\r\n   * const options = optionList.getOptions()\r\n   * optionList.select(options[0])\r\n   * ```\r\n   * An error will be thrown if no field exists with the provided name, or if\r\n   * the field exists but is not an option list.\r\n   * @param name A fully qualified option list name.\r\n   * @returns The option list with the specified name.\r\n   */\n\n\n  PDFForm.prototype.getOptionList = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getField(name);\n    if (field instanceof PDFOptionList) return field;\n    throw new UnexpectedFieldTypeError(name, PDFOptionList, field);\n  };\n  /**\r\n   * Get the radio group field in this [[PDFForm]] with the given name.\r\n   * For example:\r\n   * ```js\r\n   * const form = pdfDoc.getForm()\r\n   * const radioGroup = form.getRadioGroup('Page1.Foo.RadioGroup[0]')\r\n   * const options = radioGroup.getOptions()\r\n   * dropdown.select(options[0])\r\n   * ```\r\n   * An error will be thrown if no field exists with the provided name, or if\r\n   * the field exists but is not a radio group.\r\n   * @param name A fully qualified radio group name.\r\n   * @returns The radio group with the specified name.\r\n   */\n\n\n  PDFForm.prototype.getRadioGroup = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getField(name);\n    if (field instanceof PDFRadioGroup) return field;\n    throw new UnexpectedFieldTypeError(name, PDFRadioGroup, field);\n  };\n  /**\r\n   * Get the signature field in this [[PDFForm]] with the given name.\r\n   * For example:\r\n   * ```js\r\n   * const form = pdfDoc.getForm()\r\n   * const signature = form.getSignature('Page1.Foo.Signature[0]')\r\n   * ```\r\n   * An error will be thrown if no field exists with the provided name, or if\r\n   * the field exists but is not a signature.\r\n   * @param name A fully qualified signature name.\r\n   * @returns The signature with the specified name.\r\n   */\n\n\n  PDFForm.prototype.getSignature = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getField(name);\n    if (field instanceof PDFSignature) return field;\n    throw new UnexpectedFieldTypeError(name, PDFSignature, field);\n  };\n  /**\r\n   * Get the text field in this [[PDFForm]] with the given name.\r\n   * For example:\r\n   * ```js\r\n   * const form = pdfDoc.getForm()\r\n   * const textField = form.getTextField('Page1.Foo.TextField[0]')\r\n   * textField.setText('Are you designed to act or to be acted upon?')\r\n   * ```\r\n   * An error will be thrown if no field exists with the provided name, or if\r\n   * the field exists but is not a text field.\r\n   * @param name A fully qualified text field name.\r\n   * @returns The text field with the specified name.\r\n   */\n\n\n  PDFForm.prototype.getTextField = function (name) {\n    assertIs(name, 'name', ['string']);\n    var field = this.getField(name);\n    if (field instanceof PDFTextField) return field;\n    throw new UnexpectedFieldTypeError(name, PDFTextField, field);\n  };\n  /**\r\n   * Create a new button field in this [[PDFForm]] with the given name.\r\n   * For example:\r\n   * ```js\r\n   * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\r\n   * const page = pdfDoc.addPage()\r\n   *\r\n   * const form = pdfDoc.getForm()\r\n   * const button = form.createButton('cool.new.button')\r\n   *\r\n   * button.addToPage('Do Stuff', font, page)\r\n   * ```\r\n   * An error will be thrown if a field already exists with the provided name.\r\n   * @param name The fully qualified name for the new button.\r\n   * @returns The new button field.\r\n   */\n\n\n  PDFForm.prototype.createButton = function (name) {\n    assertIs(name, 'name', ['string']);\n    var nameParts = splitFieldName(name);\n    var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n    var button = PDFAcroPushButton.create(this.doc.context);\n    button.setPartialName(nameParts.terminal);\n    addFieldToParent(parent, [button, button.ref], nameParts.terminal);\n    return PDFButton.of(button, button.ref, this.doc);\n  };\n  /**\r\n   * Create a new check box field in this [[PDFForm]] with the given name.\r\n   * For example:\r\n   * ```js\r\n   * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\r\n   * const page = pdfDoc.addPage()\r\n   *\r\n   * const form = pdfDoc.getForm()\r\n   * const checkBox = form.createCheckBox('cool.new.checkBox')\r\n   *\r\n   * checkBox.addToPage(page)\r\n   * ```\r\n   * An error will be thrown if a field already exists with the provided name.\r\n   * @param name The fully qualified name for the new check box.\r\n   * @returns The new check box field.\r\n   */\n\n\n  PDFForm.prototype.createCheckBox = function (name) {\n    assertIs(name, 'name', ['string']);\n    var nameParts = splitFieldName(name);\n    var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n    var checkBox = PDFAcroCheckBox.create(this.doc.context);\n    checkBox.setPartialName(nameParts.terminal);\n    addFieldToParent(parent, [checkBox, checkBox.ref], nameParts.terminal);\n    return PDFCheckBox.of(checkBox, checkBox.ref, this.doc);\n  };\n  /**\r\n   * Create a new dropdown field in this [[PDFForm]] with the given name.\r\n   * For example:\r\n   * ```js\r\n   * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\r\n   * const page = pdfDoc.addPage()\r\n   *\r\n   * const form = pdfDoc.getForm()\r\n   * const dropdown = form.createDropdown('cool.new.dropdown')\r\n   *\r\n   * dropdown.addToPage(font, page)\r\n   * ```\r\n   * An error will be thrown if a field already exists with the provided name.\r\n   * @param name The fully qualified name for the new dropdown.\r\n   * @returns The new dropdown field.\r\n   */\n\n\n  PDFForm.prototype.createDropdown = function (name) {\n    assertIs(name, 'name', ['string']);\n    var nameParts = splitFieldName(name);\n    var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n    var comboBox = PDFAcroComboBox.create(this.doc.context);\n    comboBox.setPartialName(nameParts.terminal);\n    addFieldToParent(parent, [comboBox, comboBox.ref], nameParts.terminal);\n    return PDFDropdown.of(comboBox, comboBox.ref, this.doc);\n  };\n  /**\r\n   * Create a new option list field in this [[PDFForm]] with the given name.\r\n   * For example:\r\n   * ```js\r\n   * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\r\n   * const page = pdfDoc.addPage()\r\n   *\r\n   * const form = pdfDoc.getForm()\r\n   * const optionList = form.createOptionList('cool.new.optionList')\r\n   *\r\n   * optionList.addToPage(font, page)\r\n   * ```\r\n   * An error will be thrown if a field already exists with the provided name.\r\n   * @param name The fully qualified name for the new option list.\r\n   * @returns The new option list field.\r\n   */\n\n\n  PDFForm.prototype.createOptionList = function (name) {\n    assertIs(name, 'name', ['string']);\n    var nameParts = splitFieldName(name);\n    var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n    var listBox = PDFAcroListBox.create(this.doc.context);\n    listBox.setPartialName(nameParts.terminal);\n    addFieldToParent(parent, [listBox, listBox.ref], nameParts.terminal);\n    return PDFOptionList.of(listBox, listBox.ref, this.doc);\n  };\n  /**\r\n   * Create a new radio group field in this [[PDFForm]] with the given name.\r\n   * For example:\r\n   * ```js\r\n   * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\r\n   * const page = pdfDoc.addPage()\r\n   *\r\n   * const form = pdfDoc.getForm()\r\n   * const radioGroup = form.createRadioGroup('cool.new.radioGroup')\r\n   *\r\n   * radioGroup.addOptionToPage('is-dog', page, { y: 0 })\r\n   * radioGroup.addOptionToPage('is-cat', page, { y: 75 })\r\n   * ```\r\n   * An error will be thrown if a field already exists with the provided name.\r\n   * @param name The fully qualified name for the new radio group.\r\n   * @returns The new radio group field.\r\n   */\n\n\n  PDFForm.prototype.createRadioGroup = function (name) {\n    assertIs(name, 'name', ['string']);\n    var nameParts = splitFieldName(name);\n    var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n    var radioButton = PDFAcroRadioButton.create(this.doc.context);\n    radioButton.setPartialName(nameParts.terminal);\n    addFieldToParent(parent, [radioButton, radioButton.ref], nameParts.terminal);\n    return PDFRadioGroup.of(radioButton, radioButton.ref, this.doc);\n  };\n  /**\r\n   * Create a new text field in this [[PDFForm]] with the given name.\r\n   * For example:\r\n   * ```js\r\n   * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\r\n   * const page = pdfDoc.addPage()\r\n   *\r\n   * const form = pdfDoc.getForm()\r\n   * const textField = form.createTextField('cool.new.textField')\r\n   *\r\n   * textField.addToPage(font, page)\r\n   * ```\r\n   * An error will be thrown if a field already exists with the provided name.\r\n   * @param name The fully qualified name for the new radio group.\r\n   * @returns The new radio group field.\r\n   */\n\n\n  PDFForm.prototype.createTextField = function (name) {\n    assertIs(name, 'name', ['string']);\n    var nameParts = splitFieldName(name);\n    var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n    var text = PDFAcroText.create(this.doc.context);\n    text.setPartialName(nameParts.terminal);\n    addFieldToParent(parent, [text, text.ref], nameParts.terminal);\n    return PDFTextField.of(text, text.ref, this.doc);\n  };\n  /**\r\n   * Flatten all fields in this [[PDFForm]].\r\n   *\r\n   * Flattening a form field will take the current appearance for each of that\r\n   * field's widgets and make them part of their page's content stream. All form\r\n   * fields and annotations associated are then removed. Note that once a form\r\n   * has been flattened its fields can no longer be accessed or edited.\r\n   *\r\n   * This operation is often used after filling form fields to ensure a\r\n   * consistent appearance across different PDF readers and/or printers.\r\n   * Another common use case is to copy a template document with form fields\r\n   * into another document. In this scenario you would load the template\r\n   * document, fill its fields, flatten it, and then copy its pages into the\r\n   * recipient document - the filled fields will be copied over.\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * const form = pdfDoc.getForm();\r\n   * form.flatten();\r\n   * ```\r\n   */\n\n\n  PDFForm.prototype.flatten = function (options) {\n    if (options === void 0) {\n      options = {\n        updateFieldAppearances: true\n      };\n    }\n\n    if (options.updateFieldAppearances) {\n      this.updateFieldAppearances();\n    }\n\n    var fields = this.getFields();\n\n    for (var i = 0, lenFields = fields.length; i < lenFields; i++) {\n      var field = fields[i];\n      var widgets = field.acroField.getWidgets();\n\n      for (var j = 0, lenWidgets = widgets.length; j < lenWidgets; j++) {\n        var widget = widgets[j];\n        var page = this.findWidgetPage(widget);\n        var widgetRef = this.findWidgetAppearanceRef(field, widget);\n        var xObjectKey = addRandomSuffix('FlatWidget', 10);\n        page.node.setXObject(PDFName.of(xObjectKey), widgetRef);\n        var rectangle = widget.getRectangle();\n\n        var operators = __spreadArrays([pushGraphicsState(), translate(rectangle.x, rectangle.y)], rotateInPlace(__assign(__assign({}, rectangle), {\n          rotation: 0\n        })), [drawObject(xObjectKey), popGraphicsState()]).filter(Boolean);\n\n        page.pushOperators.apply(page, operators);\n      }\n\n      this.removeField(field);\n    }\n  };\n  /**\r\n   * Remove a field from this [[PDFForm]].\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * const form = pdfDoc.getForm();\r\n   * const ageField = form.getFields().find(x => x.getName() === 'Age');\r\n   * form.removeField(ageField);\r\n   * ```\r\n   */\n\n\n  PDFForm.prototype.removeField = function (field) {\n    var widgets = field.acroField.getWidgets();\n    var pages = new Set();\n\n    for (var i = 0, len = widgets.length; i < len; i++) {\n      var widget = widgets[i];\n      var widgetRef = this.findWidgetAppearanceRef(field, widget);\n      var page = this.findWidgetPage(widget);\n      pages.add(page);\n      page.node.removeAnnot(widgetRef);\n    }\n\n    pages.forEach(function (page) {\n      return page.node.removeAnnot(field.ref);\n    });\n    this.acroForm.removeField(field.acroField);\n    this.doc.context.delete(field.ref);\n  };\n  /**\r\n   * Update the appearance streams for all widgets of all fields in this\r\n   * [[PDFForm]]. Appearance streams will only be created for a widget if it\r\n   * does not have any existing appearance streams, or the field's value has\r\n   * changed (e.g. by calling [[PDFTextField.setText]] or\r\n   * [[PDFDropdown.select]]).\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * const courier = await pdfDoc.embedFont(StandardFonts.Courier)\r\n   * const form = pdfDoc.getForm()\r\n   * form.updateFieldAppearances(courier)\r\n   * ```\r\n   *\r\n   * **IMPORTANT:** The default value for the `font` parameter is\r\n   * [[StandardFonts.Helvetica]]. Note that this is a WinAnsi font. This means\r\n   * that encoding errors will be thrown if any fields contain text with\r\n   * characters outside the WinAnsi character set (the latin alphabet).\r\n   *\r\n   * Embedding a custom font and passing that as the `font`\r\n   * parameter allows you to generate appearance streams with non WinAnsi\r\n   * characters (assuming your custom font supports them).\r\n   *\r\n   * > **NOTE:** The [[PDFDocument.save]] method will call this method to\r\n   * > update appearances automatically if a form was accessed via the\r\n   * > [[PDFDocument.getForm]] method prior to saving.\r\n   *\r\n   * @param font Optionally, the font to use when creating new appearances.\r\n   */\n\n\n  PDFForm.prototype.updateFieldAppearances = function (font) {\n    assertOrUndefined(font, 'font', [[PDFFont, 'PDFFont']]);\n    font = font !== null && font !== void 0 ? font : this.getDefaultFont();\n    var fields = this.getFields();\n\n    for (var idx = 0, len = fields.length; idx < len; idx++) {\n      var field = fields[idx];\n\n      if (field.needsAppearancesUpdate()) {\n        field.defaultUpdateAppearances(font);\n      }\n    }\n  };\n  /**\r\n   * Mark a field as dirty. This will cause its appearance streams to be\r\n   * updated by [[PDFForm.updateFieldAppearances]].\r\n   * ```js\r\n   * const form = pdfDoc.getForm()\r\n   * const field = form.getField('foo.bar')\r\n   * form.markFieldAsDirty(field.ref)\r\n   * ```\r\n   * @param fieldRef The reference to the field that should be marked.\r\n   */\n\n\n  PDFForm.prototype.markFieldAsDirty = function (fieldRef) {\n    assertOrUndefined(fieldRef, 'fieldRef', [[PDFRef, 'PDFRef']]);\n    this.dirtyFields.add(fieldRef);\n  };\n  /**\r\n   * Mark a field as dirty. This will cause its appearance streams to not be\r\n   * updated by [[PDFForm.updateFieldAppearances]].\r\n   * ```js\r\n   * const form = pdfDoc.getForm()\r\n   * const field = form.getField('foo.bar')\r\n   * form.markFieldAsClean(field.ref)\r\n   * ```\r\n   * @param fieldRef The reference to the field that should be marked.\r\n   */\n\n\n  PDFForm.prototype.markFieldAsClean = function (fieldRef) {\n    assertOrUndefined(fieldRef, 'fieldRef', [[PDFRef, 'PDFRef']]);\n    this.dirtyFields.delete(fieldRef);\n  };\n  /**\r\n   * Returns `true` is the specified field has been marked as dirty.\r\n   * ```js\r\n   * const form = pdfDoc.getForm()\r\n   * const field = form.getField('foo.bar')\r\n   * if (form.fieldIsDirty(field.ref)) console.log('Field is dirty')\r\n   * ```\r\n   * @param fieldRef The reference to the field that should be checked.\r\n   * @returns Whether or not the specified field is dirty.\r\n   */\n\n\n  PDFForm.prototype.fieldIsDirty = function (fieldRef) {\n    assertOrUndefined(fieldRef, 'fieldRef', [[PDFRef, 'PDFRef']]);\n    return this.dirtyFields.has(fieldRef);\n  };\n\n  PDFForm.prototype.getDefaultFont = function () {\n    return this.defaultFontCache.access();\n  };\n\n  PDFForm.prototype.findWidgetPage = function (widget) {\n    var pageRef = widget.P();\n    var page = this.doc.getPages().find(function (x) {\n      return x.ref === pageRef;\n    });\n\n    if (page === undefined) {\n      var widgetRef = this.doc.context.getObjectRef(widget.dict);\n\n      if (widgetRef === undefined) {\n        throw new Error('Could not find PDFRef for PDFObject');\n      }\n\n      page = this.doc.findPageForAnnotationRef(widgetRef);\n\n      if (page === undefined) {\n        throw new Error(\"Could not find page for PDFRef \" + widgetRef);\n      }\n    }\n\n    return page;\n  };\n\n  PDFForm.prototype.findWidgetAppearanceRef = function (field, widget) {\n    var _a;\n\n    var refOrDict = widget.getNormalAppearance();\n\n    if (refOrDict instanceof PDFDict && (field instanceof PDFCheckBox || field instanceof PDFRadioGroup)) {\n      var value = field.acroField.getValue();\n      var ref = (_a = refOrDict.get(value)) !== null && _a !== void 0 ? _a : refOrDict.get(PDFName.of('Off'));\n\n      if (ref instanceof PDFRef) {\n        refOrDict = ref;\n      }\n    }\n\n    if (!(refOrDict instanceof PDFRef)) {\n      var name_1 = field.getName();\n      throw new Error(\"Failed to extract appearance ref for: \" + name_1);\n    }\n\n    return refOrDict;\n  };\n\n  PDFForm.prototype.findOrCreateNonTerminals = function (partialNames) {\n    var nonTerminal = [this.acroForm];\n\n    for (var idx = 0, len = partialNames.length; idx < len; idx++) {\n      var namePart = partialNames[idx];\n      if (!namePart) throw new InvalidFieldNamePartError(namePart);\n      var parent_1 = nonTerminal[0],\n          parentRef = nonTerminal[1];\n      var res = this.findNonTerminal(namePart, parent_1);\n\n      if (res) {\n        nonTerminal = res;\n      } else {\n        var node = PDFAcroNonTerminal.create(this.doc.context);\n        node.setPartialName(namePart);\n        node.setParent(parentRef);\n        var nodeRef = this.doc.context.register(node.dict);\n        parent_1.addField(nodeRef);\n        nonTerminal = [node, nodeRef];\n      }\n    }\n\n    return nonTerminal;\n  };\n\n  PDFForm.prototype.findNonTerminal = function (partialName, parent) {\n    var fields = parent instanceof PDFAcroForm ? this.acroForm.getFields() : createPDFAcroFields(parent.Kids());\n\n    for (var idx = 0, len = fields.length; idx < len; idx++) {\n      var _a = fields[idx],\n          field = _a[0],\n          ref = _a[1];\n\n      if (field.getPartialName() === partialName) {\n        if (field instanceof PDFAcroNonTerminal) return [field, ref];\n        throw new FieldAlreadyExistsError(partialName);\n      }\n    }\n\n    return undefined;\n  };\n  /**\r\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\r\n   * > consider using the [[PDFDocument.getForm]] method, which will create an\r\n   * > instance of [[PDFForm]] for you.\r\n   *\r\n   * Create an instance of [[PDFForm]] from an existing acroForm and embedder\r\n   *\r\n   * @param acroForm The underlying `PDFAcroForm` for this form.\r\n   * @param doc The document to which the form will belong.\r\n   */\n\n\n  PDFForm.of = function (acroForm, doc) {\n    return new PDFForm(acroForm, doc);\n  };\n\n  return PDFForm;\n}();\n\nexport default PDFForm;\n\nvar convertToPDFField = function (field, ref, doc) {\n  if (field instanceof PDFAcroPushButton) return PDFButton.of(field, ref, doc);\n  if (field instanceof PDFAcroCheckBox) return PDFCheckBox.of(field, ref, doc);\n  if (field instanceof PDFAcroComboBox) return PDFDropdown.of(field, ref, doc);\n  if (field instanceof PDFAcroListBox) return PDFOptionList.of(field, ref, doc);\n  if (field instanceof PDFAcroText) return PDFTextField.of(field, ref, doc);\n\n  if (field instanceof PDFAcroRadioButton) {\n    return PDFRadioGroup.of(field, ref, doc);\n  }\n\n  if (field instanceof PDFAcroSignature) {\n    return PDFSignature.of(field, ref, doc);\n  }\n\n  return undefined;\n};\n\nvar splitFieldName = function (fullyQualifiedName) {\n  if (fullyQualifiedName.length === 0) {\n    throw new Error('PDF field names must not be empty strings');\n  }\n\n  var parts = fullyQualifiedName.split('.');\n\n  for (var idx = 0, len = parts.length; idx < len; idx++) {\n    if (parts[idx] === '') {\n      throw new Error(\"Periods in PDF field names must be separated by at least one character: \\\"\" + fullyQualifiedName + \"\\\"\");\n    }\n  }\n\n  if (parts.length === 1) return {\n    nonTerminal: [],\n    terminal: parts[0]\n  };\n  return {\n    nonTerminal: parts.slice(0, parts.length - 1),\n    terminal: parts[parts.length - 1]\n  };\n};\n\nvar addFieldToParent = function (_a, _b, partialName) {\n  var parent = _a[0],\n      parentRef = _a[1];\n  var field = _b[0],\n      fieldRef = _b[1];\n  var entries = parent.normalizedEntries();\n  var fields = createPDFAcroFields('Kids' in entries ? entries.Kids : entries.Fields);\n\n  for (var idx = 0, len = fields.length; idx < len; idx++) {\n    if (fields[idx][0].getPartialName() === partialName) {\n      throw new FieldAlreadyExistsError(partialName);\n    }\n  }\n\n  parent.addField(fieldRef);\n  field.setParent(parentRef);\n};","map":{"version":3,"sources":["../../../src/api/form/PDFForm.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign, __spreadArrays } from \"tslib\";\r\nimport PDFDocument from \"../PDFDocument\";\r\nimport PDFButton from \"./PDFButton\";\r\nimport PDFCheckBox from \"./PDFCheckBox\";\r\nimport PDFDropdown from \"./PDFDropdown\";\r\nimport PDFOptionList from \"./PDFOptionList\";\r\nimport PDFRadioGroup from \"./PDFRadioGroup\";\r\nimport PDFSignature from \"./PDFSignature\";\r\nimport PDFTextField from \"./PDFTextField\";\r\nimport { NoSuchFieldError, UnexpectedFieldTypeError, FieldAlreadyExistsError, InvalidFieldNamePartError, } from \"../errors\";\r\nimport PDFFont from \"../PDFFont\";\r\nimport { StandardFonts } from \"../StandardFonts\";\r\nimport { rotateInPlace } from \"../operations\";\r\nimport { drawObject, popGraphicsState, pushGraphicsState, translate, } from \"../operators\";\r\nimport { PDFAcroForm, PDFAcroCheckBox, PDFAcroComboBox, PDFAcroListBox, PDFAcroRadioButton, PDFAcroSignature, PDFAcroText, PDFAcroPushButton, PDFAcroNonTerminal, PDFDict, PDFRef, createPDFAcroFields, PDFName, } from \"../../core\";\r\nimport { addRandomSuffix, assertIs, Cache, assertOrUndefined } from \"../../utils\";\r\n/**\r\n * Represents the interactive form of a [[PDFDocument]].\r\n *\r\n * Interactive forms (sometimes called _AcroForms_) are collections of fields\r\n * designed to gather information from a user. A PDF document may contains any\r\n * number of fields that appear on various pages, all of which make up a single,\r\n * global interactive form spanning the entire document. This means that\r\n * instances of [[PDFDocument]] shall contain at most one [[PDFForm]].\r\n *\r\n * The fields of an interactive form are represented by [[PDFField]] instances.\r\n */\r\nvar PDFForm = /** @class */ (function () {\r\n    function PDFForm(acroForm, doc) {\r\n        var _this = this;\r\n        this.embedDefaultFont = function () {\r\n            return _this.doc.embedStandardFont(StandardFonts.Helvetica);\r\n        };\r\n        assertIs(acroForm, 'acroForm', [[PDFAcroForm, 'PDFAcroForm']]);\r\n        assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\r\n        this.acroForm = acroForm;\r\n        this.doc = doc;\r\n        this.dirtyFields = new Set();\r\n        this.defaultFontCache = Cache.populatedBy(this.embedDefaultFont);\r\n    }\r\n    /**\r\n     * Returns `true` if this [[PDFForm]] has XFA data. Most PDFs with form\r\n     * fields do not use XFA as it is not widely supported by PDF readers.\r\n     *\r\n     * > `pdf-lib` does not support creation, modification, or reading of XFA\r\n     * > fields.\r\n     *\r\n     * For example:\r\n     * ```js\r\n     * const form = pdfDoc.getForm()\r\n     * if (form.hasXFA()) console.log('PDF has XFA data')\r\n     * ```\r\n     * @returns Whether or not this form has XFA data.\r\n     */\r\n    PDFForm.prototype.hasXFA = function () {\r\n        return this.acroForm.dict.has(PDFName.of('XFA'));\r\n    };\r\n    /**\r\n     * Disconnect the XFA data from this [[PDFForm]] (if any exists). This will\r\n     * force readers to fallback to standard fields if the [[PDFDocument]]\r\n     * contains any. For example:\r\n     *\r\n     * For example:\r\n     * ```js\r\n     * const form = pdfDoc.getForm()\r\n     * form.deleteXFA()\r\n     * ```\r\n     */\r\n    PDFForm.prototype.deleteXFA = function () {\r\n        this.acroForm.dict.delete(PDFName.of('XFA'));\r\n    };\r\n    /**\r\n     * Get all fields contained in this [[PDFForm]]. For example:\r\n     * ```js\r\n     * const form = pdfDoc.getForm()\r\n     * const fields = form.getFields()\r\n     * fields.forEach(field => {\r\n     *   const type = field.constructor.name\r\n     *   const name = field.getName()\r\n     *   console.log(`${type}: ${name}`)\r\n     * })\r\n     * ```\r\n     * @returns An array of all fields in this form.\r\n     */\r\n    PDFForm.prototype.getFields = function () {\r\n        var allFields = this.acroForm.getAllFields();\r\n        var fields = [];\r\n        for (var idx = 0, len = allFields.length; idx < len; idx++) {\r\n            var _a = allFields[idx], acroField = _a[0], ref = _a[1];\r\n            var field = convertToPDFField(acroField, ref, this.doc);\r\n            if (field)\r\n                fields.push(field);\r\n        }\r\n        return fields;\r\n    };\r\n    /**\r\n     * Get the field in this [[PDFForm]] with the given name. For example:\r\n     * ```js\r\n     * const form = pdfDoc.getForm()\r\n     * const field = form.getFieldMaybe('Page1.Foo.Bar[0]')\r\n     * if (field) console.log('Field exists!')\r\n     * ```\r\n     * @param name A fully qualified field name.\r\n     * @returns The field with the specified name, if one exists.\r\n     */\r\n    PDFForm.prototype.getFieldMaybe = function (name) {\r\n        assertIs(name, 'name', ['string']);\r\n        var fields = this.getFields();\r\n        for (var idx = 0, len = fields.length; idx < len; idx++) {\r\n            var field = fields[idx];\r\n            if (field.getName() === name)\r\n                return field;\r\n        }\r\n        return undefined;\r\n    };\r\n    /**\r\n     * Get the field in this [[PDFForm]] with the given name. For example:\r\n     * ```js\r\n     * const form = pdfDoc.getForm()\r\n     * const field = form.getField('Page1.Foo.Bar[0]')\r\n     * ```\r\n     * If no field exists with the provided name, an error will be thrown.\r\n     * @param name A fully qualified field name.\r\n     * @returns The field with the specified name.\r\n     */\r\n    PDFForm.prototype.getField = function (name) {\r\n        assertIs(name, 'name', ['string']);\r\n        var field = this.getFieldMaybe(name);\r\n        if (field)\r\n            return field;\r\n        throw new NoSuchFieldError(name);\r\n    };\r\n    /**\r\n     * Get the button field in this [[PDFForm]] with the given name. For example:\r\n     * ```js\r\n     * const form = pdfDoc.getForm()\r\n     * const button = form.getButton('Page1.Foo.Button[0]')\r\n     * ```\r\n     * An error will be thrown if no field exists with the provided name, or if\r\n     * the field exists but is not a button.\r\n     * @param name A fully qualified button name.\r\n     * @returns The button with the specified name.\r\n     */\r\n    PDFForm.prototype.getButton = function (name) {\r\n        assertIs(name, 'name', ['string']);\r\n        var field = this.getField(name);\r\n        if (field instanceof PDFButton)\r\n            return field;\r\n        throw new UnexpectedFieldTypeError(name, PDFButton, field);\r\n    };\r\n    /**\r\n     * Get the check box field in this [[PDFForm]] with the given name.\r\n     * For example:\r\n     * ```js\r\n     * const form = pdfDoc.getForm()\r\n     * const checkBox = form.getCheckBox('Page1.Foo.CheckBox[0]')\r\n     * checkBox.check()\r\n     * ```\r\n     * An error will be thrown if no field exists with the provided name, or if\r\n     * the field exists but is not a check box.\r\n     * @param name A fully qualified check box name.\r\n     * @returns The check box with the specified name.\r\n     */\r\n    PDFForm.prototype.getCheckBox = function (name) {\r\n        assertIs(name, 'name', ['string']);\r\n        var field = this.getField(name);\r\n        if (field instanceof PDFCheckBox)\r\n            return field;\r\n        throw new UnexpectedFieldTypeError(name, PDFCheckBox, field);\r\n    };\r\n    /**\r\n     * Get the dropdown field in this [[PDFForm]] with the given name.\r\n     * For example:\r\n     * ```js\r\n     * const form = pdfDoc.getForm()\r\n     * const dropdown = form.getDropdown('Page1.Foo.Dropdown[0]')\r\n     * const options = dropdown.getOptions()\r\n     * dropdown.select(options[0])\r\n     * ```\r\n     * An error will be thrown if no field exists with the provided name, or if\r\n     * the field exists but is not a dropdown.\r\n     * @param name A fully qualified dropdown name.\r\n     * @returns The dropdown with the specified name.\r\n     */\r\n    PDFForm.prototype.getDropdown = function (name) {\r\n        assertIs(name, 'name', ['string']);\r\n        var field = this.getField(name);\r\n        if (field instanceof PDFDropdown)\r\n            return field;\r\n        throw new UnexpectedFieldTypeError(name, PDFDropdown, field);\r\n    };\r\n    /**\r\n     * Get the option list field in this [[PDFForm]] with the given name.\r\n     * For example:\r\n     * ```js\r\n     * const form = pdfDoc.getForm()\r\n     * const optionList = form.getOptionList('Page1.Foo.OptionList[0]')\r\n     * const options = optionList.getOptions()\r\n     * optionList.select(options[0])\r\n     * ```\r\n     * An error will be thrown if no field exists with the provided name, or if\r\n     * the field exists but is not an option list.\r\n     * @param name A fully qualified option list name.\r\n     * @returns The option list with the specified name.\r\n     */\r\n    PDFForm.prototype.getOptionList = function (name) {\r\n        assertIs(name, 'name', ['string']);\r\n        var field = this.getField(name);\r\n        if (field instanceof PDFOptionList)\r\n            return field;\r\n        throw new UnexpectedFieldTypeError(name, PDFOptionList, field);\r\n    };\r\n    /**\r\n     * Get the radio group field in this [[PDFForm]] with the given name.\r\n     * For example:\r\n     * ```js\r\n     * const form = pdfDoc.getForm()\r\n     * const radioGroup = form.getRadioGroup('Page1.Foo.RadioGroup[0]')\r\n     * const options = radioGroup.getOptions()\r\n     * dropdown.select(options[0])\r\n     * ```\r\n     * An error will be thrown if no field exists with the provided name, or if\r\n     * the field exists but is not a radio group.\r\n     * @param name A fully qualified radio group name.\r\n     * @returns The radio group with the specified name.\r\n     */\r\n    PDFForm.prototype.getRadioGroup = function (name) {\r\n        assertIs(name, 'name', ['string']);\r\n        var field = this.getField(name);\r\n        if (field instanceof PDFRadioGroup)\r\n            return field;\r\n        throw new UnexpectedFieldTypeError(name, PDFRadioGroup, field);\r\n    };\r\n    /**\r\n     * Get the signature field in this [[PDFForm]] with the given name.\r\n     * For example:\r\n     * ```js\r\n     * const form = pdfDoc.getForm()\r\n     * const signature = form.getSignature('Page1.Foo.Signature[0]')\r\n     * ```\r\n     * An error will be thrown if no field exists with the provided name, or if\r\n     * the field exists but is not a signature.\r\n     * @param name A fully qualified signature name.\r\n     * @returns The signature with the specified name.\r\n     */\r\n    PDFForm.prototype.getSignature = function (name) {\r\n        assertIs(name, 'name', ['string']);\r\n        var field = this.getField(name);\r\n        if (field instanceof PDFSignature)\r\n            return field;\r\n        throw new UnexpectedFieldTypeError(name, PDFSignature, field);\r\n    };\r\n    /**\r\n     * Get the text field in this [[PDFForm]] with the given name.\r\n     * For example:\r\n     * ```js\r\n     * const form = pdfDoc.getForm()\r\n     * const textField = form.getTextField('Page1.Foo.TextField[0]')\r\n     * textField.setText('Are you designed to act or to be acted upon?')\r\n     * ```\r\n     * An error will be thrown if no field exists with the provided name, or if\r\n     * the field exists but is not a text field.\r\n     * @param name A fully qualified text field name.\r\n     * @returns The text field with the specified name.\r\n     */\r\n    PDFForm.prototype.getTextField = function (name) {\r\n        assertIs(name, 'name', ['string']);\r\n        var field = this.getField(name);\r\n        if (field instanceof PDFTextField)\r\n            return field;\r\n        throw new UnexpectedFieldTypeError(name, PDFTextField, field);\r\n    };\r\n    /**\r\n     * Create a new button field in this [[PDFForm]] with the given name.\r\n     * For example:\r\n     * ```js\r\n     * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\r\n     * const page = pdfDoc.addPage()\r\n     *\r\n     * const form = pdfDoc.getForm()\r\n     * const button = form.createButton('cool.new.button')\r\n     *\r\n     * button.addToPage('Do Stuff', font, page)\r\n     * ```\r\n     * An error will be thrown if a field already exists with the provided name.\r\n     * @param name The fully qualified name for the new button.\r\n     * @returns The new button field.\r\n     */\r\n    PDFForm.prototype.createButton = function (name) {\r\n        assertIs(name, 'name', ['string']);\r\n        var nameParts = splitFieldName(name);\r\n        var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\r\n        var button = PDFAcroPushButton.create(this.doc.context);\r\n        button.setPartialName(nameParts.terminal);\r\n        addFieldToParent(parent, [button, button.ref], nameParts.terminal);\r\n        return PDFButton.of(button, button.ref, this.doc);\r\n    };\r\n    /**\r\n     * Create a new check box field in this [[PDFForm]] with the given name.\r\n     * For example:\r\n     * ```js\r\n     * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\r\n     * const page = pdfDoc.addPage()\r\n     *\r\n     * const form = pdfDoc.getForm()\r\n     * const checkBox = form.createCheckBox('cool.new.checkBox')\r\n     *\r\n     * checkBox.addToPage(page)\r\n     * ```\r\n     * An error will be thrown if a field already exists with the provided name.\r\n     * @param name The fully qualified name for the new check box.\r\n     * @returns The new check box field.\r\n     */\r\n    PDFForm.prototype.createCheckBox = function (name) {\r\n        assertIs(name, 'name', ['string']);\r\n        var nameParts = splitFieldName(name);\r\n        var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\r\n        var checkBox = PDFAcroCheckBox.create(this.doc.context);\r\n        checkBox.setPartialName(nameParts.terminal);\r\n        addFieldToParent(parent, [checkBox, checkBox.ref], nameParts.terminal);\r\n        return PDFCheckBox.of(checkBox, checkBox.ref, this.doc);\r\n    };\r\n    /**\r\n     * Create a new dropdown field in this [[PDFForm]] with the given name.\r\n     * For example:\r\n     * ```js\r\n     * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\r\n     * const page = pdfDoc.addPage()\r\n     *\r\n     * const form = pdfDoc.getForm()\r\n     * const dropdown = form.createDropdown('cool.new.dropdown')\r\n     *\r\n     * dropdown.addToPage(font, page)\r\n     * ```\r\n     * An error will be thrown if a field already exists with the provided name.\r\n     * @param name The fully qualified name for the new dropdown.\r\n     * @returns The new dropdown field.\r\n     */\r\n    PDFForm.prototype.createDropdown = function (name) {\r\n        assertIs(name, 'name', ['string']);\r\n        var nameParts = splitFieldName(name);\r\n        var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\r\n        var comboBox = PDFAcroComboBox.create(this.doc.context);\r\n        comboBox.setPartialName(nameParts.terminal);\r\n        addFieldToParent(parent, [comboBox, comboBox.ref], nameParts.terminal);\r\n        return PDFDropdown.of(comboBox, comboBox.ref, this.doc);\r\n    };\r\n    /**\r\n     * Create a new option list field in this [[PDFForm]] with the given name.\r\n     * For example:\r\n     * ```js\r\n     * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\r\n     * const page = pdfDoc.addPage()\r\n     *\r\n     * const form = pdfDoc.getForm()\r\n     * const optionList = form.createOptionList('cool.new.optionList')\r\n     *\r\n     * optionList.addToPage(font, page)\r\n     * ```\r\n     * An error will be thrown if a field already exists with the provided name.\r\n     * @param name The fully qualified name for the new option list.\r\n     * @returns The new option list field.\r\n     */\r\n    PDFForm.prototype.createOptionList = function (name) {\r\n        assertIs(name, 'name', ['string']);\r\n        var nameParts = splitFieldName(name);\r\n        var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\r\n        var listBox = PDFAcroListBox.create(this.doc.context);\r\n        listBox.setPartialName(nameParts.terminal);\r\n        addFieldToParent(parent, [listBox, listBox.ref], nameParts.terminal);\r\n        return PDFOptionList.of(listBox, listBox.ref, this.doc);\r\n    };\r\n    /**\r\n     * Create a new radio group field in this [[PDFForm]] with the given name.\r\n     * For example:\r\n     * ```js\r\n     * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\r\n     * const page = pdfDoc.addPage()\r\n     *\r\n     * const form = pdfDoc.getForm()\r\n     * const radioGroup = form.createRadioGroup('cool.new.radioGroup')\r\n     *\r\n     * radioGroup.addOptionToPage('is-dog', page, { y: 0 })\r\n     * radioGroup.addOptionToPage('is-cat', page, { y: 75 })\r\n     * ```\r\n     * An error will be thrown if a field already exists with the provided name.\r\n     * @param name The fully qualified name for the new radio group.\r\n     * @returns The new radio group field.\r\n     */\r\n    PDFForm.prototype.createRadioGroup = function (name) {\r\n        assertIs(name, 'name', ['string']);\r\n        var nameParts = splitFieldName(name);\r\n        var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\r\n        var radioButton = PDFAcroRadioButton.create(this.doc.context);\r\n        radioButton.setPartialName(nameParts.terminal);\r\n        addFieldToParent(parent, [radioButton, radioButton.ref], nameParts.terminal);\r\n        return PDFRadioGroup.of(radioButton, radioButton.ref, this.doc);\r\n    };\r\n    /**\r\n     * Create a new text field in this [[PDFForm]] with the given name.\r\n     * For example:\r\n     * ```js\r\n     * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\r\n     * const page = pdfDoc.addPage()\r\n     *\r\n     * const form = pdfDoc.getForm()\r\n     * const textField = form.createTextField('cool.new.textField')\r\n     *\r\n     * textField.addToPage(font, page)\r\n     * ```\r\n     * An error will be thrown if a field already exists with the provided name.\r\n     * @param name The fully qualified name for the new radio group.\r\n     * @returns The new radio group field.\r\n     */\r\n    PDFForm.prototype.createTextField = function (name) {\r\n        assertIs(name, 'name', ['string']);\r\n        var nameParts = splitFieldName(name);\r\n        var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\r\n        var text = PDFAcroText.create(this.doc.context);\r\n        text.setPartialName(nameParts.terminal);\r\n        addFieldToParent(parent, [text, text.ref], nameParts.terminal);\r\n        return PDFTextField.of(text, text.ref, this.doc);\r\n    };\r\n    /**\r\n     * Flatten all fields in this [[PDFForm]].\r\n     *\r\n     * Flattening a form field will take the current appearance for each of that\r\n     * field's widgets and make them part of their page's content stream. All form\r\n     * fields and annotations associated are then removed. Note that once a form\r\n     * has been flattened its fields can no longer be accessed or edited.\r\n     *\r\n     * This operation is often used after filling form fields to ensure a\r\n     * consistent appearance across different PDF readers and/or printers.\r\n     * Another common use case is to copy a template document with form fields\r\n     * into another document. In this scenario you would load the template\r\n     * document, fill its fields, flatten it, and then copy its pages into the\r\n     * recipient document - the filled fields will be copied over.\r\n     *\r\n     * For example:\r\n     * ```js\r\n     * const form = pdfDoc.getForm();\r\n     * form.flatten();\r\n     * ```\r\n     */\r\n    PDFForm.prototype.flatten = function (options) {\r\n        if (options === void 0) { options = { updateFieldAppearances: true }; }\r\n        if (options.updateFieldAppearances) {\r\n            this.updateFieldAppearances();\r\n        }\r\n        var fields = this.getFields();\r\n        for (var i = 0, lenFields = fields.length; i < lenFields; i++) {\r\n            var field = fields[i];\r\n            var widgets = field.acroField.getWidgets();\r\n            for (var j = 0, lenWidgets = widgets.length; j < lenWidgets; j++) {\r\n                var widget = widgets[j];\r\n                var page = this.findWidgetPage(widget);\r\n                var widgetRef = this.findWidgetAppearanceRef(field, widget);\r\n                var xObjectKey = addRandomSuffix('FlatWidget', 10);\r\n                page.node.setXObject(PDFName.of(xObjectKey), widgetRef);\r\n                var rectangle = widget.getRectangle();\r\n                var operators = __spreadArrays([\r\n                    pushGraphicsState(),\r\n                    translate(rectangle.x, rectangle.y)\r\n                ], rotateInPlace(__assign(__assign({}, rectangle), { rotation: 0 })), [\r\n                    drawObject(xObjectKey),\r\n                    popGraphicsState(),\r\n                ]).filter(Boolean);\r\n                page.pushOperators.apply(page, operators);\r\n            }\r\n            this.removeField(field);\r\n        }\r\n    };\r\n    /**\r\n     * Remove a field from this [[PDFForm]].\r\n     *\r\n     * For example:\r\n     * ```js\r\n     * const form = pdfDoc.getForm();\r\n     * const ageField = form.getFields().find(x => x.getName() === 'Age');\r\n     * form.removeField(ageField);\r\n     * ```\r\n     */\r\n    PDFForm.prototype.removeField = function (field) {\r\n        var widgets = field.acroField.getWidgets();\r\n        var pages = new Set();\r\n        for (var i = 0, len = widgets.length; i < len; i++) {\r\n            var widget = widgets[i];\r\n            var widgetRef = this.findWidgetAppearanceRef(field, widget);\r\n            var page = this.findWidgetPage(widget);\r\n            pages.add(page);\r\n            page.node.removeAnnot(widgetRef);\r\n        }\r\n        pages.forEach(function (page) { return page.node.removeAnnot(field.ref); });\r\n        this.acroForm.removeField(field.acroField);\r\n        this.doc.context.delete(field.ref);\r\n    };\r\n    /**\r\n     * Update the appearance streams for all widgets of all fields in this\r\n     * [[PDFForm]]. Appearance streams will only be created for a widget if it\r\n     * does not have any existing appearance streams, or the field's value has\r\n     * changed (e.g. by calling [[PDFTextField.setText]] or\r\n     * [[PDFDropdown.select]]).\r\n     *\r\n     * For example:\r\n     * ```js\r\n     * const courier = await pdfDoc.embedFont(StandardFonts.Courier)\r\n     * const form = pdfDoc.getForm()\r\n     * form.updateFieldAppearances(courier)\r\n     * ```\r\n     *\r\n     * **IMPORTANT:** The default value for the `font` parameter is\r\n     * [[StandardFonts.Helvetica]]. Note that this is a WinAnsi font. This means\r\n     * that encoding errors will be thrown if any fields contain text with\r\n     * characters outside the WinAnsi character set (the latin alphabet).\r\n     *\r\n     * Embedding a custom font and passing that as the `font`\r\n     * parameter allows you to generate appearance streams with non WinAnsi\r\n     * characters (assuming your custom font supports them).\r\n     *\r\n     * > **NOTE:** The [[PDFDocument.save]] method will call this method to\r\n     * > update appearances automatically if a form was accessed via the\r\n     * > [[PDFDocument.getForm]] method prior to saving.\r\n     *\r\n     * @param font Optionally, the font to use when creating new appearances.\r\n     */\r\n    PDFForm.prototype.updateFieldAppearances = function (font) {\r\n        assertOrUndefined(font, 'font', [[PDFFont, 'PDFFont']]);\r\n        font = font !== null && font !== void 0 ? font : this.getDefaultFont();\r\n        var fields = this.getFields();\r\n        for (var idx = 0, len = fields.length; idx < len; idx++) {\r\n            var field = fields[idx];\r\n            if (field.needsAppearancesUpdate()) {\r\n                field.defaultUpdateAppearances(font);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Mark a field as dirty. This will cause its appearance streams to be\r\n     * updated by [[PDFForm.updateFieldAppearances]].\r\n     * ```js\r\n     * const form = pdfDoc.getForm()\r\n     * const field = form.getField('foo.bar')\r\n     * form.markFieldAsDirty(field.ref)\r\n     * ```\r\n     * @param fieldRef The reference to the field that should be marked.\r\n     */\r\n    PDFForm.prototype.markFieldAsDirty = function (fieldRef) {\r\n        assertOrUndefined(fieldRef, 'fieldRef', [[PDFRef, 'PDFRef']]);\r\n        this.dirtyFields.add(fieldRef);\r\n    };\r\n    /**\r\n     * Mark a field as dirty. This will cause its appearance streams to not be\r\n     * updated by [[PDFForm.updateFieldAppearances]].\r\n     * ```js\r\n     * const form = pdfDoc.getForm()\r\n     * const field = form.getField('foo.bar')\r\n     * form.markFieldAsClean(field.ref)\r\n     * ```\r\n     * @param fieldRef The reference to the field that should be marked.\r\n     */\r\n    PDFForm.prototype.markFieldAsClean = function (fieldRef) {\r\n        assertOrUndefined(fieldRef, 'fieldRef', [[PDFRef, 'PDFRef']]);\r\n        this.dirtyFields.delete(fieldRef);\r\n    };\r\n    /**\r\n     * Returns `true` is the specified field has been marked as dirty.\r\n     * ```js\r\n     * const form = pdfDoc.getForm()\r\n     * const field = form.getField('foo.bar')\r\n     * if (form.fieldIsDirty(field.ref)) console.log('Field is dirty')\r\n     * ```\r\n     * @param fieldRef The reference to the field that should be checked.\r\n     * @returns Whether or not the specified field is dirty.\r\n     */\r\n    PDFForm.prototype.fieldIsDirty = function (fieldRef) {\r\n        assertOrUndefined(fieldRef, 'fieldRef', [[PDFRef, 'PDFRef']]);\r\n        return this.dirtyFields.has(fieldRef);\r\n    };\r\n    PDFForm.prototype.getDefaultFont = function () {\r\n        return this.defaultFontCache.access();\r\n    };\r\n    PDFForm.prototype.findWidgetPage = function (widget) {\r\n        var pageRef = widget.P();\r\n        var page = this.doc.getPages().find(function (x) { return x.ref === pageRef; });\r\n        if (page === undefined) {\r\n            var widgetRef = this.doc.context.getObjectRef(widget.dict);\r\n            if (widgetRef === undefined) {\r\n                throw new Error('Could not find PDFRef for PDFObject');\r\n            }\r\n            page = this.doc.findPageForAnnotationRef(widgetRef);\r\n            if (page === undefined) {\r\n                throw new Error(\"Could not find page for PDFRef \" + widgetRef);\r\n            }\r\n        }\r\n        return page;\r\n    };\r\n    PDFForm.prototype.findWidgetAppearanceRef = function (field, widget) {\r\n        var _a;\r\n        var refOrDict = widget.getNormalAppearance();\r\n        if (refOrDict instanceof PDFDict &&\r\n            (field instanceof PDFCheckBox || field instanceof PDFRadioGroup)) {\r\n            var value = field.acroField.getValue();\r\n            var ref = (_a = refOrDict.get(value)) !== null && _a !== void 0 ? _a : refOrDict.get(PDFName.of('Off'));\r\n            if (ref instanceof PDFRef) {\r\n                refOrDict = ref;\r\n            }\r\n        }\r\n        if (!(refOrDict instanceof PDFRef)) {\r\n            var name_1 = field.getName();\r\n            throw new Error(\"Failed to extract appearance ref for: \" + name_1);\r\n        }\r\n        return refOrDict;\r\n    };\r\n    PDFForm.prototype.findOrCreateNonTerminals = function (partialNames) {\r\n        var nonTerminal = [\r\n            this.acroForm,\r\n        ];\r\n        for (var idx = 0, len = partialNames.length; idx < len; idx++) {\r\n            var namePart = partialNames[idx];\r\n            if (!namePart)\r\n                throw new InvalidFieldNamePartError(namePart);\r\n            var parent_1 = nonTerminal[0], parentRef = nonTerminal[1];\r\n            var res = this.findNonTerminal(namePart, parent_1);\r\n            if (res) {\r\n                nonTerminal = res;\r\n            }\r\n            else {\r\n                var node = PDFAcroNonTerminal.create(this.doc.context);\r\n                node.setPartialName(namePart);\r\n                node.setParent(parentRef);\r\n                var nodeRef = this.doc.context.register(node.dict);\r\n                parent_1.addField(nodeRef);\r\n                nonTerminal = [node, nodeRef];\r\n            }\r\n        }\r\n        return nonTerminal;\r\n    };\r\n    PDFForm.prototype.findNonTerminal = function (partialName, parent) {\r\n        var fields = parent instanceof PDFAcroForm\r\n            ? this.acroForm.getFields()\r\n            : createPDFAcroFields(parent.Kids());\r\n        for (var idx = 0, len = fields.length; idx < len; idx++) {\r\n            var _a = fields[idx], field = _a[0], ref = _a[1];\r\n            if (field.getPartialName() === partialName) {\r\n                if (field instanceof PDFAcroNonTerminal)\r\n                    return [field, ref];\r\n                throw new FieldAlreadyExistsError(partialName);\r\n            }\r\n        }\r\n        return undefined;\r\n    };\r\n    /**\r\n     * > **NOTE:** You probably don't want to call this method directly. Instead,\r\n     * > consider using the [[PDFDocument.getForm]] method, which will create an\r\n     * > instance of [[PDFForm]] for you.\r\n     *\r\n     * Create an instance of [[PDFForm]] from an existing acroForm and embedder\r\n     *\r\n     * @param acroForm The underlying `PDFAcroForm` for this form.\r\n     * @param doc The document to which the form will belong.\r\n     */\r\n    PDFForm.of = function (acroForm, doc) {\r\n        return new PDFForm(acroForm, doc);\r\n    };\r\n    return PDFForm;\r\n}());\r\nexport default PDFForm;\r\nvar convertToPDFField = function (field, ref, doc) {\r\n    if (field instanceof PDFAcroPushButton)\r\n        return PDFButton.of(field, ref, doc);\r\n    if (field instanceof PDFAcroCheckBox)\r\n        return PDFCheckBox.of(field, ref, doc);\r\n    if (field instanceof PDFAcroComboBox)\r\n        return PDFDropdown.of(field, ref, doc);\r\n    if (field instanceof PDFAcroListBox)\r\n        return PDFOptionList.of(field, ref, doc);\r\n    if (field instanceof PDFAcroText)\r\n        return PDFTextField.of(field, ref, doc);\r\n    if (field instanceof PDFAcroRadioButton) {\r\n        return PDFRadioGroup.of(field, ref, doc);\r\n    }\r\n    if (field instanceof PDFAcroSignature) {\r\n        return PDFSignature.of(field, ref, doc);\r\n    }\r\n    return undefined;\r\n};\r\nvar splitFieldName = function (fullyQualifiedName) {\r\n    if (fullyQualifiedName.length === 0) {\r\n        throw new Error('PDF field names must not be empty strings');\r\n    }\r\n    var parts = fullyQualifiedName.split('.');\r\n    for (var idx = 0, len = parts.length; idx < len; idx++) {\r\n        if (parts[idx] === '') {\r\n            throw new Error(\"Periods in PDF field names must be separated by at least one character: \\\"\" + fullyQualifiedName + \"\\\"\");\r\n        }\r\n    }\r\n    if (parts.length === 1)\r\n        return { nonTerminal: [], terminal: parts[0] };\r\n    return {\r\n        nonTerminal: parts.slice(0, parts.length - 1),\r\n        terminal: parts[parts.length - 1],\r\n    };\r\n};\r\nvar addFieldToParent = function (_a, _b, partialName) {\r\n    var parent = _a[0], parentRef = _a[1];\r\n    var field = _b[0], fieldRef = _b[1];\r\n    var entries = parent.normalizedEntries();\r\n    var fields = createPDFAcroFields('Kids' in entries ? entries.Kids : entries.Fields);\r\n    for (var idx = 0, len = fields.length; idx < len; idx++) {\r\n        if (fields[idx][0].getPartialName() === partialName) {\r\n            throw new FieldAlreadyExistsError(partialName);\r\n        }\r\n    }\r\n    parent.addField(fieldRef);\r\n    field.setParent(parentRef);\r\n};\r\n//# sourceMappingURL=PDFForm.js.map"]},"metadata":{},"sourceType":"module"}