{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { PDFName, PDFArray, PDFDict, PDFHexString } from \"../core\";\n/**\n * Represents JavaScript that has been embedded in a [[PDFDocument]].\n */\n\nvar PDFJavaScript =\n/** @class */\nfunction () {\n  function PDFJavaScript(ref, doc, embedder) {\n    this.alreadyEmbedded = false;\n    this.ref = ref;\n    this.doc = doc;\n    this.embedder = embedder;\n  }\n  /**\n   * > **NOTE:** You probably don't need to call this method directly. The\n   * > [[PDFDocument.save]] and [[PDFDocument.saveAsBase64]] methods will\n   * > automatically ensure all JavaScripts get embedded.\n   *\n   * Embed this JavaScript in its document.\n   *\n   * @returns Resolves when the embedding is complete.\n   */\n\n\n  PDFJavaScript.prototype.embed = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, catalog, context, ref, Names, Javascript, JSNames;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!!this.alreadyEmbedded) return [3\n            /*break*/\n            , 2];\n            _a = this.doc, catalog = _a.catalog, context = _a.context;\n            return [4\n            /*yield*/\n            , this.embedder.embedIntoContext(this.doc.context, this.ref)];\n\n          case 1:\n            ref = _b.sent();\n\n            if (!catalog.has(PDFName.of('Names'))) {\n              catalog.set(PDFName.of('Names'), context.obj({}));\n            }\n\n            Names = catalog.lookup(PDFName.of('Names'), PDFDict);\n\n            if (!Names.has(PDFName.of('JavaScript'))) {\n              Names.set(PDFName.of('JavaScript'), context.obj({}));\n            }\n\n            Javascript = Names.lookup(PDFName.of('JavaScript'), PDFDict);\n\n            if (!Javascript.has(PDFName.of('Names'))) {\n              Javascript.set(PDFName.of('Names'), context.obj([]));\n            }\n\n            JSNames = Javascript.lookup(PDFName.of('Names'), PDFArray);\n            JSNames.push(PDFHexString.fromText(this.embedder.scriptName));\n            JSNames.push(ref);\n            this.alreadyEmbedded = true;\n            _b.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFDocument.addJavaScript]] method, which will\n   * create instances of [[PDFJavaScript]] for you.\n   *\n   * Create an instance of [[PDFJavaScript]] from an existing ref and script\n   *\n   * @param ref The unique reference for this script.\n   * @param doc The document to which the script will belong.\n   * @param embedder The embedder that will be used to embed the script.\n   */\n\n\n  PDFJavaScript.of = function (ref, doc, embedder) {\n    return new PDFJavaScript(ref, doc, embedder);\n  };\n\n  return PDFJavaScript;\n}();\n\nexport default PDFJavaScript;","map":{"version":3,"sources":["../../src/api/PDFJavaScript.ts"],"names":[],"mappings":";AAGA,SAAS,OAAT,EAAkB,QAAlB,EAA4B,OAA5B,EAAqC,YAArC,QAA2D,SAA3D;AAEA;;AAEG;;AACH,IAAA,aAAA;AAAA;AAAA,YAAA;AAwBE,WAAA,aAAA,CACE,GADF,EAEE,GAFF,EAGE,QAHF,EAG8B;AANtB,SAAA,eAAA,GAAkB,KAAlB;AAQN,SAAK,GAAL,GAAW,GAAX;AACA,SAAK,GAAL,GAAW,GAAX;AACA,SAAK,QAAL,GAAgB,QAAhB;AACD;AAED;;;;;;;;AAQG;;;AACG,EAAA,aAAA,CAAA,SAAA,CAAA,KAAA,GAAN,YAAA;;;;;;;iBACM,CAAC,KAAK,e,EAAN,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AACI,YAAA,EAAA,GAAuB,KAAK,GAA5B,EAAE,OAAO,GAAA,EAAA,CAAA,OAAT,EAAW,OAAO,GAAA,EAAA,CAAA,OAAlB;AAEM,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,QAAL,CAAc,gBAAd,CAChB,KAAK,GAAL,CAAS,OADO,EAEhB,KAAK,GAFW,CAAN,CAAA;;;AAAN,YAAA,GAAG,GAAG,EAAA,CAAA,IAAA,EAAN;;AAKN,gBAAI,CAAC,OAAO,CAAC,GAAR,CAAY,OAAO,CAAC,EAAR,CAAW,OAAX,CAAZ,CAAL,EAAuC;AACrC,cAAA,OAAO,CAAC,GAAR,CAAY,OAAO,CAAC,EAAR,CAAW,OAAX,CAAZ,EAAiC,OAAO,CAAC,GAAR,CAAY,EAAZ,CAAjC;AACD;;AACK,YAAA,KAAK,GAAG,OAAO,CAAC,MAAR,CAAe,OAAO,CAAC,EAAR,CAAW,OAAX,CAAf,EAAoC,OAApC,CAAR;;AAEN,gBAAI,CAAC,KAAK,CAAC,GAAN,CAAU,OAAO,CAAC,EAAR,CAAW,YAAX,CAAV,CAAL,EAA0C;AACxC,cAAA,KAAK,CAAC,GAAN,CAAU,OAAO,CAAC,EAAR,CAAW,YAAX,CAAV,EAAoC,OAAO,CAAC,GAAR,CAAY,EAAZ,CAApC;AACD;;AACK,YAAA,UAAU,GAAG,KAAK,CAAC,MAAN,CAAa,OAAO,CAAC,EAAR,CAAW,YAAX,CAAb,EAAuC,OAAvC,CAAb;;AAEN,gBAAI,CAAC,UAAU,CAAC,GAAX,CAAe,OAAO,CAAC,EAAR,CAAW,OAAX,CAAf,CAAL,EAA0C;AACxC,cAAA,UAAU,CAAC,GAAX,CAAe,OAAO,CAAC,EAAR,CAAW,OAAX,CAAf,EAAoC,OAAO,CAAC,GAAR,CAAY,EAAZ,CAApC;AACD;;AACK,YAAA,OAAO,GAAG,UAAU,CAAC,MAAX,CAAkB,OAAO,CAAC,EAAR,CAAW,OAAX,CAAlB,EAAuC,QAAvC,CAAV;AAEN,YAAA,OAAO,CAAC,IAAR,CAAa,YAAY,CAAC,QAAb,CAAsB,KAAK,QAAL,CAAc,UAApC,CAAb;AACA,YAAA,OAAO,CAAC,IAAR,CAAa,GAAb;AAEA,iBAAK,eAAL,GAAuB,IAAvB;;;;;;;;;;AAEH,GA7BK;AA1CN;;;;;;;;;;AAUG;;;AACI,EAAA,aAAA,CAAA,EAAA,GAAK,UAAC,GAAD,EAAc,GAAd,EAAgC,QAAhC,EAA4D;AACtE,WAAA,IAAI,aAAJ,CAAkB,GAAlB,EAAuB,GAAvB,EAA4B,QAA5B,CAAA;AAAqC,GADhC;;AA6DT,SAAA,aAAA;AAAC,CAzED,EAAA;;eAAqB,a","sourceRoot":"","sourcesContent":["import { __awaiter, __generator } from \"tslib\";\nimport { PDFName, PDFArray, PDFDict, PDFHexString } from \"../core\";\n/**\n * Represents JavaScript that has been embedded in a [[PDFDocument]].\n */\nvar PDFJavaScript = /** @class */ (function () {\n    function PDFJavaScript(ref, doc, embedder) {\n        this.alreadyEmbedded = false;\n        this.ref = ref;\n        this.doc = doc;\n        this.embedder = embedder;\n    }\n    /**\n     * > **NOTE:** You probably don't need to call this method directly. The\n     * > [[PDFDocument.save]] and [[PDFDocument.saveAsBase64]] methods will\n     * > automatically ensure all JavaScripts get embedded.\n     *\n     * Embed this JavaScript in its document.\n     *\n     * @returns Resolves when the embedding is complete.\n     */\n    PDFJavaScript.prototype.embed = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, catalog, context, ref, Names, Javascript, JSNames;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!!this.alreadyEmbedded) return [3 /*break*/, 2];\n                        _a = this.doc, catalog = _a.catalog, context = _a.context;\n                        return [4 /*yield*/, this.embedder.embedIntoContext(this.doc.context, this.ref)];\n                    case 1:\n                        ref = _b.sent();\n                        if (!catalog.has(PDFName.of('Names'))) {\n                            catalog.set(PDFName.of('Names'), context.obj({}));\n                        }\n                        Names = catalog.lookup(PDFName.of('Names'), PDFDict);\n                        if (!Names.has(PDFName.of('JavaScript'))) {\n                            Names.set(PDFName.of('JavaScript'), context.obj({}));\n                        }\n                        Javascript = Names.lookup(PDFName.of('JavaScript'), PDFDict);\n                        if (!Javascript.has(PDFName.of('Names'))) {\n                            Javascript.set(PDFName.of('Names'), context.obj([]));\n                        }\n                        JSNames = Javascript.lookup(PDFName.of('Names'), PDFArray);\n                        JSNames.push(PDFHexString.fromText(this.embedder.scriptName));\n                        JSNames.push(ref);\n                        this.alreadyEmbedded = true;\n                        _b.label = 2;\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * > **NOTE:** You probably don't want to call this method directly. Instead,\n     * > consider using the [[PDFDocument.addJavaScript]] method, which will\n     * create instances of [[PDFJavaScript]] for you.\n     *\n     * Create an instance of [[PDFJavaScript]] from an existing ref and script\n     *\n     * @param ref The unique reference for this script.\n     * @param doc The document to which the script will belong.\n     * @param embedder The embedder that will be used to embed the script.\n     */\n    PDFJavaScript.of = function (ref, doc, embedder) {\n        return new PDFJavaScript(ref, doc, embedder);\n    };\n    return PDFJavaScript;\n}());\nexport default PDFJavaScript;\n//# sourceMappingURL=PDFJavaScript.js.map"]},"metadata":{},"sourceType":"module"}