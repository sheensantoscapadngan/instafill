{"ast":null,"code":"var flag = function (bitIndex) {\n  return 1 << bitIndex;\n};\n/** From PDF spec table 221 */\n\n\nexport var AcroFieldFlags;\n\n(function (AcroFieldFlags) {\n  /**\r\n   * If set, the user may not change the value of the field. Any associated\r\n   * widget annotations will not interact with the user; that is, they will not\r\n   * respond to mouse clicks or change their appearance in response to mouse\r\n   * motions. This flag is useful for fields whose values are computed or\r\n   * imported from a database.\r\n   */\n  AcroFieldFlags[AcroFieldFlags[\"ReadOnly\"] = flag(1 - 1)] = \"ReadOnly\";\n  /**\r\n   * If set, the field shall have a value at the time it is exported by a\r\n   * submit-form action (see 12.7.5.2, \"Submit-Form Action\").\r\n   */\n\n  AcroFieldFlags[AcroFieldFlags[\"Required\"] = flag(2 - 1)] = \"Required\";\n  /**\r\n   * If set, the field shall not be exported by a submit-form action\r\n   * (see 12.7.5.2, \"Submit-Form Action\").\r\n   */\n\n  AcroFieldFlags[AcroFieldFlags[\"NoExport\"] = flag(3 - 1)] = \"NoExport\";\n})(AcroFieldFlags || (AcroFieldFlags = {}));\n/** From PDF spec table 226 */\n\n\nexport var AcroButtonFlags;\n\n(function (AcroButtonFlags) {\n  /**\r\n   * (Radio buttons only) If set, exactly one radio button shall be selected at\r\n   * all times; selecting the currently selected button has no effect. If clear,\r\n   * clicking the selected button deselects it, leaving no button selected.\r\n   */\n  AcroButtonFlags[AcroButtonFlags[\"NoToggleToOff\"] = flag(15 - 1)] = \"NoToggleToOff\";\n  /**\r\n   * If set, the field is a set of radio buttons; if clear, the field is a check\r\n   * box. This flag may be set only if the Pushbutton flag is clear.\r\n   */\n\n  AcroButtonFlags[AcroButtonFlags[\"Radio\"] = flag(16 - 1)] = \"Radio\";\n  /**\r\n   * If set, the field is a pushbutton that does not retain a permanent value.\r\n   */\n\n  AcroButtonFlags[AcroButtonFlags[\"PushButton\"] = flag(17 - 1)] = \"PushButton\";\n  /**\r\n   * If set, a group of radio buttons within a radio button field that use the\r\n   * same value for the on state will turn on and off in unison; that is if one\r\n   * is checked, they are all checked. If clear, the buttons are mutually\r\n   * exclusive (the same behavior as HTML radio buttons).\r\n   */\n\n  AcroButtonFlags[AcroButtonFlags[\"RadiosInUnison\"] = flag(26 - 1)] = \"RadiosInUnison\";\n})(AcroButtonFlags || (AcroButtonFlags = {}));\n/** From PDF spec table 228 */\n\n\nexport var AcroTextFlags;\n\n(function (AcroTextFlags) {\n  /**\r\n   * If set, the field may contain multiple lines of text; if clear, the field's\r\n   * text shall be restricted to a single line.\r\n   */\n  AcroTextFlags[AcroTextFlags[\"Multiline\"] = flag(13 - 1)] = \"Multiline\";\n  /**\r\n   * If set, the field is intended for entering a secure password that should\r\n   * not be echoed visibly to the screen. Characters typed from the keyboard\r\n   * shall instead be echoed in some unreadable form, such as asterisks or\r\n   * bullet characters.\r\n   * > NOTE   To protect password confidentiality, readers should never store\r\n   * >        the value of the text field in the PDF file if this flag is set.\r\n   */\n\n  AcroTextFlags[AcroTextFlags[\"Password\"] = flag(14 - 1)] = \"Password\";\n  /**\r\n   * If set, the text entered in the field represents the pathname of a file\r\n   * whose contents shall be submitted as the value of the field.\r\n   */\n\n  AcroTextFlags[AcroTextFlags[\"FileSelect\"] = flag(21 - 1)] = \"FileSelect\";\n  /**\r\n   * If set, text entered in the field shall not be spell-checked.\r\n   */\n\n  AcroTextFlags[AcroTextFlags[\"DoNotSpellCheck\"] = flag(23 - 1)] = \"DoNotSpellCheck\";\n  /**\r\n   * If set, the field shall not scroll (horizontally for single-line fields,\r\n   * vertically for multiple-line fields) to accommodate more text than fits\r\n   * within its annotation rectangle. Once the field is full, no further text\r\n   * shall be accepted for interactive form filling; for non-interactive form\r\n   * filling, the filler should take care not to add more character than will\r\n   * visibly fit in the defined area.\r\n   */\n\n  AcroTextFlags[AcroTextFlags[\"DoNotScroll\"] = flag(24 - 1)] = \"DoNotScroll\";\n  /**\r\n   * May be set only if the MaxLen entry is present in the text field dictionary\r\n   * (see Table 229) and if the Multiline, Password, and FileSelect flags are\r\n   * clear. If set, the field shall be automatically divided into as many\r\n   * equally spaced positions, or combs, as the value of MaxLen, and the text\r\n   * is laid out into those combs.\r\n   */\n\n  AcroTextFlags[AcroTextFlags[\"Comb\"] = flag(25 - 1)] = \"Comb\";\n  /**\r\n   * If set, the value of this field shall be a rich text string\r\n   * (see 12.7.3.4, \"Rich Text Strings\"). If the field has a value, the RV\r\n   * entry of the field dictionary (Table 222) shall specify the rich text\r\n   * string.\r\n   */\n\n  AcroTextFlags[AcroTextFlags[\"RichText\"] = flag(26 - 1)] = \"RichText\";\n})(AcroTextFlags || (AcroTextFlags = {}));\n/** From PDF spec table 230 */\n\n\nexport var AcroChoiceFlags;\n\n(function (AcroChoiceFlags) {\n  /**\r\n   * If set, the field is a combo box; if clear, the field is a list box.\r\n   */\n  AcroChoiceFlags[AcroChoiceFlags[\"Combo\"] = flag(18 - 1)] = \"Combo\";\n  /**\r\n   * If set, the combo box shall include an editable text box as well as a\r\n   * drop-down list; if clear, it shall include only a drop-down list. This\r\n   * flag shall be used only if the Combo flag is set.\r\n   */\n\n  AcroChoiceFlags[AcroChoiceFlags[\"Edit\"] = flag(19 - 1)] = \"Edit\";\n  /**\r\n   * If set, the field's option items shall be sorted alphabetically. This flag\r\n   * is intended for use by writers, not by readers. Conforming readers shall\r\n   * display the options in the order in which they occur in the Opt array\r\n   * (see Table 231).\r\n   */\n\n  AcroChoiceFlags[AcroChoiceFlags[\"Sort\"] = flag(20 - 1)] = \"Sort\";\n  /**\r\n   * If set, more than one of the field's option items may be selected\r\n   * simultaneously; if clear, at most one item shall be selected.\r\n   */\n\n  AcroChoiceFlags[AcroChoiceFlags[\"MultiSelect\"] = flag(22 - 1)] = \"MultiSelect\";\n  /**\r\n   * If set, text entered in the field shall not be spell-checked. This flag\r\n   * shall not be used unless the Combo and Edit flags are both set.\r\n   */\n\n  AcroChoiceFlags[AcroChoiceFlags[\"DoNotSpellCheck\"] = flag(23 - 1)] = \"DoNotSpellCheck\";\n  /**\r\n   * If set, the new value shall be committed as soon as a selection is made\r\n   * (commonly with the pointing device). In this case, supplying a value for\r\n   * a field involves three actions: selecting the field for fill-in,\r\n   * selecting a choice for the fill-in value, and leaving that field, which\r\n   * finalizes or \"commits\" the data choice and triggers any actions associated\r\n   * with the entry or changing of this data. If this flag is on, then\r\n   * processing does not wait for leaving the field action to occur, but\r\n   * immediately proceeds to the third step.\r\n   *\r\n   * This option enables applications to perform an action once a selection is\r\n   * made, without requiring the user to exit the field. If clear, the new\r\n   * value is not committed until the user exits the field.\r\n   */\n\n  AcroChoiceFlags[AcroChoiceFlags[\"CommitOnSelChange\"] = flag(27 - 1)] = \"CommitOnSelChange\";\n})(AcroChoiceFlags || (AcroChoiceFlags = {}));","map":{"version":3,"sources":["../../../src/core/acroform/flags.ts"],"names":[],"mappings":"AAAA,IAAM,IAAI,GAAG,UAAC,QAAD,EAAiB;AAAK,SAAA,KAAA,QAAA;AAAa,CAAhD;AAEA;;;AACA,OAAA,IAAY,cAAZ;;AAAA,CAAA,UAAY,cAAZ,EAA0B;AACxB;;;;;;AAMG;AACH,EAAA,cAAA,CAAA,cAAA,CAAA,UAAA,CAAA,GAAW,IAAI,CAAC,IAAI,CAAL,CAAf,CAAA,GAAsB,UAAtB;AAEA;;;AAGG;;AACH,EAAA,cAAA,CAAA,cAAA,CAAA,UAAA,CAAA,GAAW,IAAI,CAAC,IAAI,CAAL,CAAf,CAAA,GAAsB,UAAtB;AAEA;;;AAGG;;AACH,EAAA,cAAA,CAAA,cAAA,CAAA,UAAA,CAAA,GAAW,IAAI,CAAC,IAAI,CAAL,CAAf,CAAA,GAAsB,UAAtB;AACD,CArBD,EAAY,cAAc,KAAd,cAAc,GAAA,EAAA,CAA1B;AAuBA;;;AACA,OAAA,IAAY,eAAZ;;AAAA,CAAA,UAAY,eAAZ,EAA2B;AACzB;;;;AAIG;AACH,EAAA,eAAA,CAAA,eAAA,CAAA,eAAA,CAAA,GAAgB,IAAI,CAAC,KAAK,CAAN,CAApB,CAAA,GAA4B,eAA5B;AAEA;;;AAGG;;AACH,EAAA,eAAA,CAAA,eAAA,CAAA,OAAA,CAAA,GAAQ,IAAI,CAAC,KAAK,CAAN,CAAZ,CAAA,GAAoB,OAApB;AAEA;;AAEG;;AACH,EAAA,eAAA,CAAA,eAAA,CAAA,YAAA,CAAA,GAAa,IAAI,CAAC,KAAK,CAAN,CAAjB,CAAA,GAAyB,YAAzB;AAEA;;;;;AAKG;;AACH,EAAA,eAAA,CAAA,eAAA,CAAA,gBAAA,CAAA,GAAiB,IAAI,CAAC,KAAK,CAAN,CAArB,CAAA,GAA6B,gBAA7B;AACD,CA1BD,EAAY,eAAe,KAAf,eAAe,GAAA,EAAA,CAA3B;AA4BA;;;AACA,OAAA,IAAY,aAAZ;;AAAA,CAAA,UAAY,aAAZ,EAAyB;AACvB;;;AAGG;AACH,EAAA,aAAA,CAAA,aAAA,CAAA,WAAA,CAAA,GAAY,IAAI,CAAC,KAAK,CAAN,CAAhB,CAAA,GAAwB,WAAxB;AAEA;;;;;;;AAOG;;AACH,EAAA,aAAA,CAAA,aAAA,CAAA,UAAA,CAAA,GAAW,IAAI,CAAC,KAAK,CAAN,CAAf,CAAA,GAAuB,UAAvB;AAEA;;;AAGG;;AACH,EAAA,aAAA,CAAA,aAAA,CAAA,YAAA,CAAA,GAAa,IAAI,CAAC,KAAK,CAAN,CAAjB,CAAA,GAAyB,YAAzB;AAEA;;AAEG;;AACH,EAAA,aAAA,CAAA,aAAA,CAAA,iBAAA,CAAA,GAAkB,IAAI,CAAC,KAAK,CAAN,CAAtB,CAAA,GAA8B,iBAA9B;AAEA;;;;;;;AAOG;;AACH,EAAA,aAAA,CAAA,aAAA,CAAA,aAAA,CAAA,GAAc,IAAI,CAAC,KAAK,CAAN,CAAlB,CAAA,GAA0B,aAA1B;AAEA;;;;;;AAMG;;AACH,EAAA,aAAA,CAAA,aAAA,CAAA,MAAA,CAAA,GAAO,IAAI,CAAC,KAAK,CAAN,CAAX,CAAA,GAAmB,MAAnB;AAEA;;;;;AAKG;;AACH,EAAA,aAAA,CAAA,aAAA,CAAA,UAAA,CAAA,GAAW,IAAI,CAAC,KAAK,CAAN,CAAf,CAAA,GAAuB,UAAvB;AACD,CAtDD,EAAY,aAAa,KAAb,aAAa,GAAA,EAAA,CAAzB;AAwDA;;;AACA,OAAA,IAAY,eAAZ;;AAAA,CAAA,UAAY,eAAZ,EAA2B;AACzB;;AAEG;AACH,EAAA,eAAA,CAAA,eAAA,CAAA,OAAA,CAAA,GAAQ,IAAI,CAAC,KAAK,CAAN,CAAZ,CAAA,GAAoB,OAApB;AAEA;;;;AAIG;;AACH,EAAA,eAAA,CAAA,eAAA,CAAA,MAAA,CAAA,GAAO,IAAI,CAAC,KAAK,CAAN,CAAX,CAAA,GAAmB,MAAnB;AAEA;;;;;AAKG;;AACH,EAAA,eAAA,CAAA,eAAA,CAAA,MAAA,CAAA,GAAO,IAAI,CAAC,KAAK,CAAN,CAAX,CAAA,GAAmB,MAAnB;AAEA;;;AAGG;;AACH,EAAA,eAAA,CAAA,eAAA,CAAA,aAAA,CAAA,GAAc,IAAI,CAAC,KAAK,CAAN,CAAlB,CAAA,GAA0B,aAA1B;AAEA;;;AAGG;;AACH,EAAA,eAAA,CAAA,eAAA,CAAA,iBAAA,CAAA,GAAkB,IAAI,CAAC,KAAK,CAAN,CAAtB,CAAA,GAA8B,iBAA9B;AAEA;;;;;;;;;;;;;AAaG;;AACH,EAAA,eAAA,CAAA,eAAA,CAAA,mBAAA,CAAA,GAAoB,IAAI,CAAC,KAAK,CAAN,CAAxB,CAAA,GAAgC,mBAAhC;AACD,CAhDD,EAAY,eAAe,KAAf,eAAe,GAAA,EAAA,CAA3B","sourceRoot":"","sourcesContent":["var flag = function (bitIndex) { return 1 << bitIndex; };\r\n/** From PDF spec table 221 */\r\nexport var AcroFieldFlags;\r\n(function (AcroFieldFlags) {\r\n    /**\r\n     * If set, the user may not change the value of the field. Any associated\r\n     * widget annotations will not interact with the user; that is, they will not\r\n     * respond to mouse clicks or change their appearance in response to mouse\r\n     * motions. This flag is useful for fields whose values are computed or\r\n     * imported from a database.\r\n     */\r\n    AcroFieldFlags[AcroFieldFlags[\"ReadOnly\"] = flag(1 - 1)] = \"ReadOnly\";\r\n    /**\r\n     * If set, the field shall have a value at the time it is exported by a\r\n     * submit-form action (see 12.7.5.2, \"Submit-Form Action\").\r\n     */\r\n    AcroFieldFlags[AcroFieldFlags[\"Required\"] = flag(2 - 1)] = \"Required\";\r\n    /**\r\n     * If set, the field shall not be exported by a submit-form action\r\n     * (see 12.7.5.2, \"Submit-Form Action\").\r\n     */\r\n    AcroFieldFlags[AcroFieldFlags[\"NoExport\"] = flag(3 - 1)] = \"NoExport\";\r\n})(AcroFieldFlags || (AcroFieldFlags = {}));\r\n/** From PDF spec table 226 */\r\nexport var AcroButtonFlags;\r\n(function (AcroButtonFlags) {\r\n    /**\r\n     * (Radio buttons only) If set, exactly one radio button shall be selected at\r\n     * all times; selecting the currently selected button has no effect. If clear,\r\n     * clicking the selected button deselects it, leaving no button selected.\r\n     */\r\n    AcroButtonFlags[AcroButtonFlags[\"NoToggleToOff\"] = flag(15 - 1)] = \"NoToggleToOff\";\r\n    /**\r\n     * If set, the field is a set of radio buttons; if clear, the field is a check\r\n     * box. This flag may be set only if the Pushbutton flag is clear.\r\n     */\r\n    AcroButtonFlags[AcroButtonFlags[\"Radio\"] = flag(16 - 1)] = \"Radio\";\r\n    /**\r\n     * If set, the field is a pushbutton that does not retain a permanent value.\r\n     */\r\n    AcroButtonFlags[AcroButtonFlags[\"PushButton\"] = flag(17 - 1)] = \"PushButton\";\r\n    /**\r\n     * If set, a group of radio buttons within a radio button field that use the\r\n     * same value for the on state will turn on and off in unison; that is if one\r\n     * is checked, they are all checked. If clear, the buttons are mutually\r\n     * exclusive (the same behavior as HTML radio buttons).\r\n     */\r\n    AcroButtonFlags[AcroButtonFlags[\"RadiosInUnison\"] = flag(26 - 1)] = \"RadiosInUnison\";\r\n})(AcroButtonFlags || (AcroButtonFlags = {}));\r\n/** From PDF spec table 228 */\r\nexport var AcroTextFlags;\r\n(function (AcroTextFlags) {\r\n    /**\r\n     * If set, the field may contain multiple lines of text; if clear, the field's\r\n     * text shall be restricted to a single line.\r\n     */\r\n    AcroTextFlags[AcroTextFlags[\"Multiline\"] = flag(13 - 1)] = \"Multiline\";\r\n    /**\r\n     * If set, the field is intended for entering a secure password that should\r\n     * not be echoed visibly to the screen. Characters typed from the keyboard\r\n     * shall instead be echoed in some unreadable form, such as asterisks or\r\n     * bullet characters.\r\n     * > NOTE   To protect password confidentiality, readers should never store\r\n     * >        the value of the text field in the PDF file if this flag is set.\r\n     */\r\n    AcroTextFlags[AcroTextFlags[\"Password\"] = flag(14 - 1)] = \"Password\";\r\n    /**\r\n     * If set, the text entered in the field represents the pathname of a file\r\n     * whose contents shall be submitted as the value of the field.\r\n     */\r\n    AcroTextFlags[AcroTextFlags[\"FileSelect\"] = flag(21 - 1)] = \"FileSelect\";\r\n    /**\r\n     * If set, text entered in the field shall not be spell-checked.\r\n     */\r\n    AcroTextFlags[AcroTextFlags[\"DoNotSpellCheck\"] = flag(23 - 1)] = \"DoNotSpellCheck\";\r\n    /**\r\n     * If set, the field shall not scroll (horizontally for single-line fields,\r\n     * vertically for multiple-line fields) to accommodate more text than fits\r\n     * within its annotation rectangle. Once the field is full, no further text\r\n     * shall be accepted for interactive form filling; for non-interactive form\r\n     * filling, the filler should take care not to add more character than will\r\n     * visibly fit in the defined area.\r\n     */\r\n    AcroTextFlags[AcroTextFlags[\"DoNotScroll\"] = flag(24 - 1)] = \"DoNotScroll\";\r\n    /**\r\n     * May be set only if the MaxLen entry is present in the text field dictionary\r\n     * (see Table 229) and if the Multiline, Password, and FileSelect flags are\r\n     * clear. If set, the field shall be automatically divided into as many\r\n     * equally spaced positions, or combs, as the value of MaxLen, and the text\r\n     * is laid out into those combs.\r\n     */\r\n    AcroTextFlags[AcroTextFlags[\"Comb\"] = flag(25 - 1)] = \"Comb\";\r\n    /**\r\n     * If set, the value of this field shall be a rich text string\r\n     * (see 12.7.3.4, \"Rich Text Strings\"). If the field has a value, the RV\r\n     * entry of the field dictionary (Table 222) shall specify the rich text\r\n     * string.\r\n     */\r\n    AcroTextFlags[AcroTextFlags[\"RichText\"] = flag(26 - 1)] = \"RichText\";\r\n})(AcroTextFlags || (AcroTextFlags = {}));\r\n/** From PDF spec table 230 */\r\nexport var AcroChoiceFlags;\r\n(function (AcroChoiceFlags) {\r\n    /**\r\n     * If set, the field is a combo box; if clear, the field is a list box.\r\n     */\r\n    AcroChoiceFlags[AcroChoiceFlags[\"Combo\"] = flag(18 - 1)] = \"Combo\";\r\n    /**\r\n     * If set, the combo box shall include an editable text box as well as a\r\n     * drop-down list; if clear, it shall include only a drop-down list. This\r\n     * flag shall be used only if the Combo flag is set.\r\n     */\r\n    AcroChoiceFlags[AcroChoiceFlags[\"Edit\"] = flag(19 - 1)] = \"Edit\";\r\n    /**\r\n     * If set, the field's option items shall be sorted alphabetically. This flag\r\n     * is intended for use by writers, not by readers. Conforming readers shall\r\n     * display the options in the order in which they occur in the Opt array\r\n     * (see Table 231).\r\n     */\r\n    AcroChoiceFlags[AcroChoiceFlags[\"Sort\"] = flag(20 - 1)] = \"Sort\";\r\n    /**\r\n     * If set, more than one of the field's option items may be selected\r\n     * simultaneously; if clear, at most one item shall be selected.\r\n     */\r\n    AcroChoiceFlags[AcroChoiceFlags[\"MultiSelect\"] = flag(22 - 1)] = \"MultiSelect\";\r\n    /**\r\n     * If set, text entered in the field shall not be spell-checked. This flag\r\n     * shall not be used unless the Combo and Edit flags are both set.\r\n     */\r\n    AcroChoiceFlags[AcroChoiceFlags[\"DoNotSpellCheck\"] = flag(23 - 1)] = \"DoNotSpellCheck\";\r\n    /**\r\n     * If set, the new value shall be committed as soon as a selection is made\r\n     * (commonly with the pointing device). In this case, supplying a value for\r\n     * a field involves three actions: selecting the field for fill-in,\r\n     * selecting a choice for the fill-in value, and leaving that field, which\r\n     * finalizes or \"commits\" the data choice and triggers any actions associated\r\n     * with the entry or changing of this data. If this flag is on, then\r\n     * processing does not wait for leaving the field action to occur, but\r\n     * immediately proceeds to the third step.\r\n     *\r\n     * This option enables applications to perform an action once a selection is\r\n     * made, without requiring the user to exit the field. If clear, the new\r\n     * value is not committed until the user exits the field.\r\n     */\r\n    AcroChoiceFlags[AcroChoiceFlags[\"CommitOnSelChange\"] = flag(27 - 1)] = \"CommitOnSelChange\";\r\n})(AcroChoiceFlags || (AcroChoiceFlags = {}));\r\n//# sourceMappingURL=flags.js.map"]},"metadata":{},"sourceType":"module"}