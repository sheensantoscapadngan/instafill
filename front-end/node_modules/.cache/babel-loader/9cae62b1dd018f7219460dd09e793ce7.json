{"ast":null,"code":"import CharCodes from \"../syntax/CharCodes\";\nimport { charFromCode, copyStringIntoBuffer } from \"../../utils\";\n\nvar PDFHeader =\n/** @class */\nfunction () {\n  function PDFHeader(major, minor) {\n    this.major = String(major);\n    this.minor = String(minor);\n  }\n\n  PDFHeader.prototype.toString = function () {\n    var bc = charFromCode(129);\n    return \"%PDF-\" + this.major + \".\" + this.minor + \"\\n%\" + bc + bc + bc + bc;\n  };\n\n  PDFHeader.prototype.sizeInBytes = function () {\n    return 12 + this.major.length + this.minor.length;\n  };\n\n  PDFHeader.prototype.copyBytesInto = function (buffer, offset) {\n    var initialOffset = offset;\n    buffer[offset++] = CharCodes.Percent;\n    buffer[offset++] = CharCodes.P;\n    buffer[offset++] = CharCodes.D;\n    buffer[offset++] = CharCodes.F;\n    buffer[offset++] = CharCodes.Dash;\n    offset += copyStringIntoBuffer(this.major, buffer, offset);\n    buffer[offset++] = CharCodes.Period;\n    offset += copyStringIntoBuffer(this.minor, buffer, offset);\n    buffer[offset++] = CharCodes.Newline;\n    buffer[offset++] = CharCodes.Percent;\n    buffer[offset++] = 129;\n    buffer[offset++] = 129;\n    buffer[offset++] = 129;\n    buffer[offset++] = 129;\n    return offset - initialOffset;\n  };\n\n  PDFHeader.forVersion = function (major, minor) {\n    return new PDFHeader(major, minor);\n  };\n\n  return PDFHeader;\n}();\n\nexport default PDFHeader;","map":{"version":3,"sources":["../../../src/core/document/PDFHeader.ts"],"names":[],"mappings":"AAAA,OAAO,SAAP,MAAgB,qBAAhB;AACA,SAAS,YAAT,EAAuB,oBAAvB,QAA6C,aAA7C;;AAEA,IAAA,SAAA;AAAA;AAAA,YAAA;AAOE,WAAA,SAAA,CAAoB,KAApB,EAAmC,KAAnC,EAAgD;AAC9C,SAAK,KAAL,GAAa,MAAM,CAAC,KAAD,CAAnB;AACA,SAAK,KAAL,GAAa,MAAM,CAAC,KAAD,CAAnB;AACD;;AAED,EAAA,SAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AACE,QAAM,EAAE,GAAG,YAAY,CAAC,GAAD,CAAvB;AACA,WAAO,UAAQ,KAAK,KAAb,GAAkB,GAAlB,GAAsB,KAAK,KAA3B,GAAgC,KAAhC,GAAsC,EAAtC,GAA2C,EAA3C,GAAgD,EAAhD,GAAqD,EAA5D;AACD,GAHD;;AAKA,EAAA,SAAA,CAAA,SAAA,CAAA,WAAA,GAAA,YAAA;AACE,WAAO,KAAK,KAAK,KAAL,CAAW,MAAhB,GAAyB,KAAK,KAAL,CAAW,MAA3C;AACD,GAFD;;AAIA,EAAA,SAAA,CAAA,SAAA,CAAA,aAAA,GAAA,UAAc,MAAd,EAAkC,MAAlC,EAAgD;AAC9C,QAAM,aAAa,GAAG,MAAtB;AAEA,IAAA,MAAM,CAAC,MAAM,EAAP,CAAN,GAAmB,SAAS,CAAC,OAA7B;AACA,IAAA,MAAM,CAAC,MAAM,EAAP,CAAN,GAAmB,SAAS,CAAC,CAA7B;AACA,IAAA,MAAM,CAAC,MAAM,EAAP,CAAN,GAAmB,SAAS,CAAC,CAA7B;AACA,IAAA,MAAM,CAAC,MAAM,EAAP,CAAN,GAAmB,SAAS,CAAC,CAA7B;AACA,IAAA,MAAM,CAAC,MAAM,EAAP,CAAN,GAAmB,SAAS,CAAC,IAA7B;AAEA,IAAA,MAAM,IAAI,oBAAoB,CAAC,KAAK,KAAN,EAAa,MAAb,EAAqB,MAArB,CAA9B;AACA,IAAA,MAAM,CAAC,MAAM,EAAP,CAAN,GAAmB,SAAS,CAAC,MAA7B;AACA,IAAA,MAAM,IAAI,oBAAoB,CAAC,KAAK,KAAN,EAAa,MAAb,EAAqB,MAArB,CAA9B;AACA,IAAA,MAAM,CAAC,MAAM,EAAP,CAAN,GAAmB,SAAS,CAAC,OAA7B;AAEA,IAAA,MAAM,CAAC,MAAM,EAAP,CAAN,GAAmB,SAAS,CAAC,OAA7B;AACA,IAAA,MAAM,CAAC,MAAM,EAAP,CAAN,GAAmB,GAAnB;AACA,IAAA,MAAM,CAAC,MAAM,EAAP,CAAN,GAAmB,GAAnB;AACA,IAAA,MAAM,CAAC,MAAM,EAAP,CAAN,GAAmB,GAAnB;AACA,IAAA,MAAM,CAAC,MAAM,EAAP,CAAN,GAAmB,GAAnB;AAEA,WAAO,MAAM,GAAG,aAAhB;AACD,GArBD;;AApBO,EAAA,SAAA,CAAA,UAAA,GAAa,UAAC,KAAD,EAAgB,KAAhB,EAA6B;AAC/C,WAAA,IAAI,SAAJ,CAAc,KAAd,EAAqB,KAArB,CAAA;AAA2B,GADtB;;AA0CT,SAAA,SAAA;AAAC,CA3CD,EAAA;;AA6CA,eAAe,SAAf","sourceRoot":"","sourcesContent":["import CharCodes from \"../syntax/CharCodes\";\nimport { charFromCode, copyStringIntoBuffer } from \"../../utils\";\nvar PDFHeader = /** @class */ (function () {\n    function PDFHeader(major, minor) {\n        this.major = String(major);\n        this.minor = String(minor);\n    }\n    PDFHeader.prototype.toString = function () {\n        var bc = charFromCode(129);\n        return \"%PDF-\" + this.major + \".\" + this.minor + \"\\n%\" + bc + bc + bc + bc;\n    };\n    PDFHeader.prototype.sizeInBytes = function () {\n        return 12 + this.major.length + this.minor.length;\n    };\n    PDFHeader.prototype.copyBytesInto = function (buffer, offset) {\n        var initialOffset = offset;\n        buffer[offset++] = CharCodes.Percent;\n        buffer[offset++] = CharCodes.P;\n        buffer[offset++] = CharCodes.D;\n        buffer[offset++] = CharCodes.F;\n        buffer[offset++] = CharCodes.Dash;\n        offset += copyStringIntoBuffer(this.major, buffer, offset);\n        buffer[offset++] = CharCodes.Period;\n        offset += copyStringIntoBuffer(this.minor, buffer, offset);\n        buffer[offset++] = CharCodes.Newline;\n        buffer[offset++] = CharCodes.Percent;\n        buffer[offset++] = 129;\n        buffer[offset++] = 129;\n        buffer[offset++] = 129;\n        buffer[offset++] = 129;\n        return offset - initialOffset;\n    };\n    PDFHeader.forVersion = function (major, minor) {\n        return new PDFHeader(major, minor);\n    };\n    return PDFHeader;\n}());\nexport default PDFHeader;\n//# sourceMappingURL=PDFHeader.js.map"]},"metadata":{},"sourceType":"module"}