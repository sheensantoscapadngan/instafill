{"ast":null,"code":"import { __rest, __assign } from 'tslib';\nimport { getBoundingBox } from '../dom/projection/measure.js';\nimport { getDefaultValueType } from '../dom/utils/value-types.js';\nimport { getOrigin, checkTargetForNewValues } from '../utils/setters.js';\nimport { isTransformProp } from './utils/transform.js';\nimport { isCSSVariable } from '../dom/utils/is-css-variable.js';\nimport { buildHTMLStyles } from './utils/build-styles.js';\nimport { visualElement } from '../index.js';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.js';\nimport { parseDomVariant } from '../dom/utils/parse-dom-variant.js';\n\nfunction getComputedStyle(element) {\n  return window.getComputedStyle(element);\n}\n\nvar htmlConfig = {\n  treeType: \"dom\",\n  readValueFromInstance: function (domElement, key) {\n    if (isTransformProp(key)) {\n      var defaultType = getDefaultValueType(key);\n      return defaultType ? defaultType.default || 0 : 0;\n    } else {\n      var computedStyle = getComputedStyle(domElement);\n      return (isCSSVariable(key) ? computedStyle.getPropertyValue(key) : computedStyle[key]) || 0;\n    }\n  },\n  sortNodePosition: function (a, b) {\n    /**\r\n     * compareDocumentPosition returns a bitmask, by using the bitwise &\r\n     * we're returning true if 2 in that bitmask is set to true. 2 is set\r\n     * to true if b preceeds a.\r\n     */\n    return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n  },\n  getBaseTarget: function (props, key) {\n    var _a;\n\n    return (_a = props.style) === null || _a === void 0 ? void 0 : _a[key];\n  },\n  measureViewportBox: function (element, _a) {\n    var transformPagePoint = _a.transformPagePoint;\n    return getBoundingBox(element, transformPagePoint);\n  },\n\n  /**\r\n   * Reset the transform on the current Element. This is called as part\r\n   * of a batched process across the entire layout tree. To remove this write\r\n   * cycle it'd be interesting to see if it's possible to \"undo\" all the current\r\n   * layout transforms up the tree in the same way this.getBoundingBoxWithoutTransforms\r\n   * works\r\n   */\n  resetTransform: function (element, domElement, props) {\n    /**\r\n     * When we reset the transform of an element, there's a fair possibility that\r\n     * the element will visually move from underneath the pointer, triggering attached\r\n     * pointerenter/leave events. We temporarily suspend these while measurement takes place.\r\n     */\n    element.suspendHoverEvents();\n    var transformTemplate = props.transformTemplate;\n    domElement.style.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\"; // Ensure that whatever happens next, we restore our transform on the next frame\n\n    element.scheduleRender();\n  },\n  restoreTransform: function (instance, mutableState) {\n    instance.style.transform = mutableState.style.transform;\n  },\n  removeValueFromRenderState: function (key, _a) {\n    var vars = _a.vars,\n        style = _a.style;\n    delete vars[key];\n    delete style[key];\n  },\n\n  /**\r\n   * Ensure that HTML and Framer-specific value types like `px`->`%` and `Color`\r\n   * can be animated by Motion.\r\n   */\n  makeTargetAnimatable: function (element, _a, _b, isMounted) {\n    var transformValues = _b.transformValues;\n\n    if (isMounted === void 0) {\n      isMounted = true;\n    }\n\n    var transition = _a.transition,\n        transitionEnd = _a.transitionEnd,\n        target = __rest(_a, [\"transition\", \"transitionEnd\"]);\n\n    var origin = getOrigin(target, transition || {}, element);\n    /**\r\n     * If Framer has provided a function to convert `Color` etc value types, convert them\r\n     */\n\n    if (transformValues) {\n      if (transitionEnd) transitionEnd = transformValues(transitionEnd);\n      if (target) target = transformValues(target);\n      if (origin) origin = transformValues(origin);\n    }\n\n    if (isMounted) {\n      checkTargetForNewValues(element, target, origin);\n      var parsed = parseDomVariant(element, target, origin, transitionEnd);\n      transitionEnd = parsed.transitionEnd;\n      target = parsed.target;\n    }\n\n    return __assign({\n      transition: transition,\n      transitionEnd: transitionEnd\n    }, target);\n  },\n  scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n  build: function (element, renderState, latestValues, projection, layoutState, options, props) {\n    if (element.isVisible !== undefined) {\n      renderState.style.visibility = element.isVisible ? \"visible\" : \"hidden\";\n    }\n\n    buildHTMLStyles(renderState, latestValues, projection, layoutState, options, props.transformTemplate);\n  },\n  render: function (element, _a) {\n    var style = _a.style,\n        vars = _a.vars; // Directly assign style into the Element's style prop. In tests Object.assign is the\n    // fastest way to assign styles.\n\n    Object.assign(element.style, style); // Loop over any CSS variables and assign those.\n\n    for (var key in vars) {\n      element.style.setProperty(key, vars[key]);\n    }\n  }\n};\nvar htmlVisualElement = visualElement(htmlConfig);\nexport { getComputedStyle, htmlConfig, htmlVisualElement };","map":{"version":3,"sources":["D:/Documents/GitHub/instafill/front-end/node_modules/framer-motion/dist/es/render/html/visual-element.js"],"names":["__rest","__assign","getBoundingBox","getDefaultValueType","getOrigin","checkTargetForNewValues","isTransformProp","isCSSVariable","buildHTMLStyles","visualElement","scrapeMotionValuesFromProps","parseDomVariant","getComputedStyle","element","window","htmlConfig","treeType","readValueFromInstance","domElement","key","defaultType","default","computedStyle","getPropertyValue","sortNodePosition","a","b","compareDocumentPosition","getBaseTarget","props","_a","style","measureViewportBox","transformPagePoint","resetTransform","suspendHoverEvents","transformTemplate","transform","scheduleRender","restoreTransform","instance","mutableState","removeValueFromRenderState","vars","makeTargetAnimatable","_b","isMounted","transformValues","transition","transitionEnd","target","origin","parsed","build","renderState","latestValues","projection","layoutState","options","isVisible","undefined","visibility","render","Object","assign","setProperty","htmlVisualElement"],"mappings":"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","sourcesContent":["import { __rest, __assign } from 'tslib';\r\nimport { getBoundingBox } from '../dom/projection/measure.js';\r\nimport { getDefaultValueType } from '../dom/utils/value-types.js';\r\nimport { getOrigin, checkTargetForNewValues } from '../utils/setters.js';\r\nimport { isTransformProp } from './utils/transform.js';\r\nimport { isCSSVariable } from '../dom/utils/is-css-variable.js';\r\nimport { buildHTMLStyles } from './utils/build-styles.js';\r\nimport { visualElement } from '../index.js';\r\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.js';\r\nimport { parseDomVariant } from '../dom/utils/parse-dom-variant.js';\r\n\r\nfunction getComputedStyle(element) {\r\n    return window.getComputedStyle(element);\r\n}\r\nvar htmlConfig = {\r\n    treeType: \"dom\",\r\n    readValueFromInstance: function (domElement, key) {\r\n        if (isTransformProp(key)) {\r\n            var defaultType = getDefaultValueType(key);\r\n            return defaultType ? defaultType.default || 0 : 0;\r\n        }\r\n        else {\r\n            var computedStyle = getComputedStyle(domElement);\r\n            return ((isCSSVariable(key)\r\n                ? computedStyle.getPropertyValue(key)\r\n                : computedStyle[key]) || 0);\r\n        }\r\n    },\r\n    sortNodePosition: function (a, b) {\r\n        /**\r\n         * compareDocumentPosition returns a bitmask, by using the bitwise &\r\n         * we're returning true if 2 in that bitmask is set to true. 2 is set\r\n         * to true if b preceeds a.\r\n         */\r\n        return a.compareDocumentPosition(b) & 2 ? 1 : -1;\r\n    },\r\n    getBaseTarget: function (props, key) {\r\n        var _a;\r\n        return (_a = props.style) === null || _a === void 0 ? void 0 : _a[key];\r\n    },\r\n    measureViewportBox: function (element, _a) {\r\n        var transformPagePoint = _a.transformPagePoint;\r\n        return getBoundingBox(element, transformPagePoint);\r\n    },\r\n    /**\r\n     * Reset the transform on the current Element. This is called as part\r\n     * of a batched process across the entire layout tree. To remove this write\r\n     * cycle it'd be interesting to see if it's possible to \"undo\" all the current\r\n     * layout transforms up the tree in the same way this.getBoundingBoxWithoutTransforms\r\n     * works\r\n     */\r\n    resetTransform: function (element, domElement, props) {\r\n        /**\r\n         * When we reset the transform of an element, there's a fair possibility that\r\n         * the element will visually move from underneath the pointer, triggering attached\r\n         * pointerenter/leave events. We temporarily suspend these while measurement takes place.\r\n         */\r\n        element.suspendHoverEvents();\r\n        var transformTemplate = props.transformTemplate;\r\n        domElement.style.transform = transformTemplate\r\n            ? transformTemplate({}, \"\")\r\n            : \"none\";\r\n        // Ensure that whatever happens next, we restore our transform on the next frame\r\n        element.scheduleRender();\r\n    },\r\n    restoreTransform: function (instance, mutableState) {\r\n        instance.style.transform = mutableState.style.transform;\r\n    },\r\n    removeValueFromRenderState: function (key, _a) {\r\n        var vars = _a.vars, style = _a.style;\r\n        delete vars[key];\r\n        delete style[key];\r\n    },\r\n    /**\r\n     * Ensure that HTML and Framer-specific value types like `px`->`%` and `Color`\r\n     * can be animated by Motion.\r\n     */\r\n    makeTargetAnimatable: function (element, _a, _b, isMounted) {\r\n        var transformValues = _b.transformValues;\r\n        if (isMounted === void 0) { isMounted = true; }\r\n        var transition = _a.transition, transitionEnd = _a.transitionEnd, target = __rest(_a, [\"transition\", \"transitionEnd\"]);\r\n        var origin = getOrigin(target, transition || {}, element);\r\n        /**\r\n         * If Framer has provided a function to convert `Color` etc value types, convert them\r\n         */\r\n        if (transformValues) {\r\n            if (transitionEnd)\r\n                transitionEnd = transformValues(transitionEnd);\r\n            if (target)\r\n                target = transformValues(target);\r\n            if (origin)\r\n                origin = transformValues(origin);\r\n        }\r\n        if (isMounted) {\r\n            checkTargetForNewValues(element, target, origin);\r\n            var parsed = parseDomVariant(element, target, origin, transitionEnd);\r\n            transitionEnd = parsed.transitionEnd;\r\n            target = parsed.target;\r\n        }\r\n        return __assign({ transition: transition,\r\n            transitionEnd: transitionEnd }, target);\r\n    },\r\n    scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\r\n    build: function (element, renderState, latestValues, projection, layoutState, options, props) {\r\n        if (element.isVisible !== undefined) {\r\n            renderState.style.visibility = element.isVisible\r\n                ? \"visible\"\r\n                : \"hidden\";\r\n        }\r\n        buildHTMLStyles(renderState, latestValues, projection, layoutState, options, props.transformTemplate);\r\n    },\r\n    render: function (element, _a) {\r\n        var style = _a.style, vars = _a.vars;\r\n        // Directly assign style into the Element's style prop. In tests Object.assign is the\r\n        // fastest way to assign styles.\r\n        Object.assign(element.style, style);\r\n        // Loop over any CSS variables and assign those.\r\n        for (var key in vars) {\r\n            element.style.setProperty(key, vars[key]);\r\n        }\r\n    },\r\n};\r\nvar htmlVisualElement = visualElement(htmlConfig);\r\n\r\nexport { getComputedStyle, htmlConfig, htmlVisualElement };\r\n"]},"metadata":{},"sourceType":"module"}