{"ast":null,"code":"import React, { useContext } from 'react';\nimport { __extends, __assign } from 'tslib';\nimport { isSharedLayout, SharedLayoutContext, FramerTreeLayoutContext } from '../../../context/SharedLayoutContext.js';\n/**\n * This component is responsible for scheduling the measuring of the motion component\n */\n\nvar Measure =\n/** @class */\nfunction (_super) {\n  __extends(Measure, _super);\n\n  function Measure() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * If this is a child of a SyncContext, register the VisualElement with it on mount.\n   */\n\n\n  Measure.prototype.componentDidMount = function () {\n    var _a = this.props,\n        syncLayout = _a.syncLayout,\n        framerSyncLayout = _a.framerSyncLayout,\n        visualElement = _a.visualElement;\n    isSharedLayout(syncLayout) && syncLayout.register(visualElement);\n    isSharedLayout(framerSyncLayout) && framerSyncLayout.register(visualElement);\n  };\n  /**\n   * If this is a child of a SyncContext, notify it that it needs to re-render. It will then\n   * handle the snapshotting.\n   *\n   * If it is stand-alone component, add it to the batcher.\n   */\n\n\n  Measure.prototype.getSnapshotBeforeUpdate = function () {\n    var _a = this.props,\n        syncLayout = _a.syncLayout,\n        visualElement = _a.visualElement;\n\n    if (isSharedLayout(syncLayout)) {\n      syncLayout.syncUpdate();\n    } else {\n      visualElement.snapshotViewportBox();\n      syncLayout.add(visualElement);\n    }\n\n    return null;\n  };\n\n  Measure.prototype.componentDidUpdate = function () {\n    var _a = this.props,\n        syncLayout = _a.syncLayout,\n        visualElement = _a.visualElement;\n    if (!isSharedLayout(syncLayout)) syncLayout.flush();\n    /**\n     * If this axis isn't animating as a result of this render we want to reset the targetBox\n     * to the measured box\n     */\n\n    visualElement.rebaseProjectionTarget();\n  };\n\n  Measure.prototype.render = function () {\n    return null;\n  };\n\n  return Measure;\n}(React.Component);\n\nfunction MeasureContextProvider(props) {\n  var syncLayout = useContext(SharedLayoutContext);\n  var framerSyncLayout = useContext(FramerTreeLayoutContext);\n  return React.createElement(Measure, __assign({}, props, {\n    syncLayout: syncLayout,\n    framerSyncLayout: framerSyncLayout\n  }));\n}\n\nvar MeasureLayout = {\n  key: \"measure-layout\",\n  shouldRender: function (props) {\n    return !!props.drag || !!props.layout || props.layoutId !== undefined;\n  },\n  getComponent: function () {\n    return MeasureContextProvider;\n  }\n};\nexport { MeasureLayout };","map":{"version":3,"sources":["F:/github_repos/instafill/front-end/node_modules/framer-motion/dist/es/motion/features/layout/Measure.js"],"names":["React","useContext","__extends","__assign","isSharedLayout","SharedLayoutContext","FramerTreeLayoutContext","Measure","_super","apply","arguments","prototype","componentDidMount","_a","props","syncLayout","framerSyncLayout","visualElement","register","getSnapshotBeforeUpdate","syncUpdate","snapshotViewportBox","add","componentDidUpdate","flush","rebaseProjectionTarget","render","Component","MeasureContextProvider","createElement","MeasureLayout","key","shouldRender","drag","layout","layoutId","undefined","getComponent"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport { __extends, __assign } from 'tslib';\nimport { isSharedLayout, SharedLayoutContext, FramerTreeLayoutContext } from '../../../context/SharedLayoutContext.js';\n\n/**\n * This component is responsible for scheduling the measuring of the motion component\n */\nvar Measure = /** @class */ (function (_super) {\n    __extends(Measure, _super);\n    function Measure() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * If this is a child of a SyncContext, register the VisualElement with it on mount.\n     */\n    Measure.prototype.componentDidMount = function () {\n        var _a = this.props, syncLayout = _a.syncLayout, framerSyncLayout = _a.framerSyncLayout, visualElement = _a.visualElement;\n        isSharedLayout(syncLayout) && syncLayout.register(visualElement);\n        isSharedLayout(framerSyncLayout) &&\n            framerSyncLayout.register(visualElement);\n    };\n    /**\n     * If this is a child of a SyncContext, notify it that it needs to re-render. It will then\n     * handle the snapshotting.\n     *\n     * If it is stand-alone component, add it to the batcher.\n     */\n    Measure.prototype.getSnapshotBeforeUpdate = function () {\n        var _a = this.props, syncLayout = _a.syncLayout, visualElement = _a.visualElement;\n        if (isSharedLayout(syncLayout)) {\n            syncLayout.syncUpdate();\n        }\n        else {\n            visualElement.snapshotViewportBox();\n            syncLayout.add(visualElement);\n        }\n        return null;\n    };\n    Measure.prototype.componentDidUpdate = function () {\n        var _a = this.props, syncLayout = _a.syncLayout, visualElement = _a.visualElement;\n        if (!isSharedLayout(syncLayout))\n            syncLayout.flush();\n        /**\n         * If this axis isn't animating as a result of this render we want to reset the targetBox\n         * to the measured box\n         */\n        visualElement.rebaseProjectionTarget();\n    };\n    Measure.prototype.render = function () {\n        return null;\n    };\n    return Measure;\n}(React.Component));\nfunction MeasureContextProvider(props) {\n    var syncLayout = useContext(SharedLayoutContext);\n    var framerSyncLayout = useContext(FramerTreeLayoutContext);\n    return (React.createElement(Measure, __assign({}, props, { syncLayout: syncLayout, framerSyncLayout: framerSyncLayout })));\n}\nvar MeasureLayout = {\n    key: \"measure-layout\",\n    shouldRender: function (props) {\n        return !!props.drag || !!props.layout || props.layoutId !== undefined;\n    },\n    getComponent: function () { return MeasureContextProvider; },\n};\n\nexport { MeasureLayout };\n"]},"metadata":{},"sourceType":"module"}