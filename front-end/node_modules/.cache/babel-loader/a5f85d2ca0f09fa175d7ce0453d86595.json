{"ast":null,"code":"/*\n * Copyright 2012 Mozilla Foundation\n *\n * The LZWStream class contained in this file is a TypeScript port of the\n * JavaScript LZWStream class in Mozilla's pdf.js project, made available\n * under the Apache 2.0 open source license.\n */\nimport { __extends } from \"tslib\";\nimport DecodeStream from \"./DecodeStream\";\n\nvar LZWStream =\n/** @class */\nfunction (_super) {\n  __extends(LZWStream, _super);\n\n  function LZWStream(stream, maybeLength, earlyChange) {\n    var _this = _super.call(this, maybeLength) || this;\n\n    _this.stream = stream;\n    _this.cachedData = 0;\n    _this.bitsCached = 0;\n    var maxLzwDictionarySize = 4096;\n    var lzwState = {\n      earlyChange: earlyChange,\n      codeLength: 9,\n      nextCode: 258,\n      dictionaryValues: new Uint8Array(maxLzwDictionarySize),\n      dictionaryLengths: new Uint16Array(maxLzwDictionarySize),\n      dictionaryPrevCodes: new Uint16Array(maxLzwDictionarySize),\n      currentSequence: new Uint8Array(maxLzwDictionarySize),\n      currentSequenceLength: 0\n    };\n\n    for (var i = 0; i < 256; ++i) {\n      lzwState.dictionaryValues[i] = i;\n      lzwState.dictionaryLengths[i] = 1;\n    }\n\n    _this.lzwState = lzwState;\n    return _this;\n  }\n\n  LZWStream.prototype.readBlock = function () {\n    var blockSize = 512;\n    var estimatedDecodedSize = blockSize * 2;\n    var decodedSizeDelta = blockSize;\n    var i;\n    var j;\n    var q;\n    var lzwState = this.lzwState;\n\n    if (!lzwState) {\n      return; // eof was found\n    }\n\n    var earlyChange = lzwState.earlyChange;\n    var nextCode = lzwState.nextCode;\n    var dictionaryValues = lzwState.dictionaryValues;\n    var dictionaryLengths = lzwState.dictionaryLengths;\n    var dictionaryPrevCodes = lzwState.dictionaryPrevCodes;\n    var codeLength = lzwState.codeLength;\n    var prevCode = lzwState.prevCode;\n    var currentSequence = lzwState.currentSequence;\n    var currentSequenceLength = lzwState.currentSequenceLength;\n    var decodedLength = 0;\n    var currentBufferLength = this.bufferLength;\n    var buffer = this.ensureBuffer(this.bufferLength + estimatedDecodedSize);\n\n    for (i = 0; i < blockSize; i++) {\n      var code = this.readBits(codeLength);\n      var hasPrev = currentSequenceLength > 0;\n\n      if (!code || code < 256) {\n        currentSequence[0] = code;\n        currentSequenceLength = 1;\n      } else if (code >= 258) {\n        if (code < nextCode) {\n          currentSequenceLength = dictionaryLengths[code];\n\n          for (j = currentSequenceLength - 1, q = code; j >= 0; j--) {\n            currentSequence[j] = dictionaryValues[q];\n            q = dictionaryPrevCodes[q];\n          }\n        } else {\n          currentSequence[currentSequenceLength++] = currentSequence[0];\n        }\n      } else if (code === 256) {\n        codeLength = 9;\n        nextCode = 258;\n        currentSequenceLength = 0;\n        continue;\n      } else {\n        this.eof = true;\n        delete this.lzwState;\n        break;\n      }\n\n      if (hasPrev) {\n        dictionaryPrevCodes[nextCode] = prevCode;\n        dictionaryLengths[nextCode] = dictionaryLengths[prevCode] + 1;\n        dictionaryValues[nextCode] = currentSequence[0];\n        nextCode++;\n        codeLength = nextCode + earlyChange & nextCode + earlyChange - 1 ? codeLength : Math.min(Math.log(nextCode + earlyChange) / 0.6931471805599453 + 1, 12) | 0;\n      }\n\n      prevCode = code;\n      decodedLength += currentSequenceLength;\n\n      if (estimatedDecodedSize < decodedLength) {\n        do {\n          estimatedDecodedSize += decodedSizeDelta;\n        } while (estimatedDecodedSize < decodedLength);\n\n        buffer = this.ensureBuffer(this.bufferLength + estimatedDecodedSize);\n      }\n\n      for (j = 0; j < currentSequenceLength; j++) {\n        buffer[currentBufferLength++] = currentSequence[j];\n      }\n    }\n\n    lzwState.nextCode = nextCode;\n    lzwState.codeLength = codeLength;\n    lzwState.prevCode = prevCode;\n    lzwState.currentSequenceLength = currentSequenceLength;\n    this.bufferLength = currentBufferLength;\n  };\n\n  LZWStream.prototype.readBits = function (n) {\n    var bitsCached = this.bitsCached;\n    var cachedData = this.cachedData;\n\n    while (bitsCached < n) {\n      var c = this.stream.getByte();\n\n      if (c === -1) {\n        this.eof = true;\n        return null;\n      }\n\n      cachedData = cachedData << 8 | c;\n      bitsCached += 8;\n    }\n\n    this.bitsCached = bitsCached -= n;\n    this.cachedData = cachedData;\n    return cachedData >>> bitsCached & (1 << n) - 1;\n  };\n\n  return LZWStream;\n}(DecodeStream);\n\nexport default LZWStream;","map":{"version":3,"sources":["../../../src/core/streams/LZWStream.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2012 Mozilla Foundation\n *\n * The LZWStream class contained in this file is a TypeScript port of the\n * JavaScript LZWStream class in Mozilla's pdf.js project, made available\n * under the Apache 2.0 open source license.\n */\nimport { __extends } from \"tslib\";\nimport DecodeStream from \"./DecodeStream\";\nvar LZWStream = /** @class */ (function (_super) {\n    __extends(LZWStream, _super);\n    function LZWStream(stream, maybeLength, earlyChange) {\n        var _this = _super.call(this, maybeLength) || this;\n        _this.stream = stream;\n        _this.cachedData = 0;\n        _this.bitsCached = 0;\n        var maxLzwDictionarySize = 4096;\n        var lzwState = {\n            earlyChange: earlyChange,\n            codeLength: 9,\n            nextCode: 258,\n            dictionaryValues: new Uint8Array(maxLzwDictionarySize),\n            dictionaryLengths: new Uint16Array(maxLzwDictionarySize),\n            dictionaryPrevCodes: new Uint16Array(maxLzwDictionarySize),\n            currentSequence: new Uint8Array(maxLzwDictionarySize),\n            currentSequenceLength: 0,\n        };\n        for (var i = 0; i < 256; ++i) {\n            lzwState.dictionaryValues[i] = i;\n            lzwState.dictionaryLengths[i] = 1;\n        }\n        _this.lzwState = lzwState;\n        return _this;\n    }\n    LZWStream.prototype.readBlock = function () {\n        var blockSize = 512;\n        var estimatedDecodedSize = blockSize * 2;\n        var decodedSizeDelta = blockSize;\n        var i;\n        var j;\n        var q;\n        var lzwState = this.lzwState;\n        if (!lzwState) {\n            return; // eof was found\n        }\n        var earlyChange = lzwState.earlyChange;\n        var nextCode = lzwState.nextCode;\n        var dictionaryValues = lzwState.dictionaryValues;\n        var dictionaryLengths = lzwState.dictionaryLengths;\n        var dictionaryPrevCodes = lzwState.dictionaryPrevCodes;\n        var codeLength = lzwState.codeLength;\n        var prevCode = lzwState.prevCode;\n        var currentSequence = lzwState.currentSequence;\n        var currentSequenceLength = lzwState.currentSequenceLength;\n        var decodedLength = 0;\n        var currentBufferLength = this.bufferLength;\n        var buffer = this.ensureBuffer(this.bufferLength + estimatedDecodedSize);\n        for (i = 0; i < blockSize; i++) {\n            var code = this.readBits(codeLength);\n            var hasPrev = currentSequenceLength > 0;\n            if (!code || code < 256) {\n                currentSequence[0] = code;\n                currentSequenceLength = 1;\n            }\n            else if (code >= 258) {\n                if (code < nextCode) {\n                    currentSequenceLength = dictionaryLengths[code];\n                    for (j = currentSequenceLength - 1, q = code; j >= 0; j--) {\n                        currentSequence[j] = dictionaryValues[q];\n                        q = dictionaryPrevCodes[q];\n                    }\n                }\n                else {\n                    currentSequence[currentSequenceLength++] = currentSequence[0];\n                }\n            }\n            else if (code === 256) {\n                codeLength = 9;\n                nextCode = 258;\n                currentSequenceLength = 0;\n                continue;\n            }\n            else {\n                this.eof = true;\n                delete this.lzwState;\n                break;\n            }\n            if (hasPrev) {\n                dictionaryPrevCodes[nextCode] = prevCode;\n                dictionaryLengths[nextCode] = dictionaryLengths[prevCode] + 1;\n                dictionaryValues[nextCode] = currentSequence[0];\n                nextCode++;\n                codeLength =\n                    (nextCode + earlyChange) & (nextCode + earlyChange - 1)\n                        ? codeLength\n                        : Math.min(Math.log(nextCode + earlyChange) / 0.6931471805599453 + 1, 12) | 0;\n            }\n            prevCode = code;\n            decodedLength += currentSequenceLength;\n            if (estimatedDecodedSize < decodedLength) {\n                do {\n                    estimatedDecodedSize += decodedSizeDelta;\n                } while (estimatedDecodedSize < decodedLength);\n                buffer = this.ensureBuffer(this.bufferLength + estimatedDecodedSize);\n            }\n            for (j = 0; j < currentSequenceLength; j++) {\n                buffer[currentBufferLength++] = currentSequence[j];\n            }\n        }\n        lzwState.nextCode = nextCode;\n        lzwState.codeLength = codeLength;\n        lzwState.prevCode = prevCode;\n        lzwState.currentSequenceLength = currentSequenceLength;\n        this.bufferLength = currentBufferLength;\n    };\n    LZWStream.prototype.readBits = function (n) {\n        var bitsCached = this.bitsCached;\n        var cachedData = this.cachedData;\n        while (bitsCached < n) {\n            var c = this.stream.getByte();\n            if (c === -1) {\n                this.eof = true;\n                return null;\n            }\n            cachedData = (cachedData << 8) | c;\n            bitsCached += 8;\n        }\n        this.bitsCached = bitsCached -= n;\n        this.cachedData = cachedData;\n        return (cachedData >>> bitsCached) & ((1 << n) - 1);\n    };\n    return LZWStream;\n}(DecodeStream));\nexport default LZWStream;\n//# sourceMappingURL=LZWStream.js.map"]},"metadata":{},"sourceType":"module"}