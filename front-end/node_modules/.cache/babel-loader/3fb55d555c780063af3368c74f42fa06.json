{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport PDFDocument from \"./PDFDocument\";\nimport { CustomFontEmbedder, PDFRef, StandardFontEmbedder } from \"../core\";\nimport { assertIs, assertOrUndefined } from \"../utils\";\n/**\n * Represents a font that has been embedded in a [[PDFDocument]].\n */\n\nvar PDFFont =\n/** @class */\nfunction () {\n  function PDFFont(ref, doc, embedder) {\n    this.modified = true;\n    assertIs(ref, 'ref', [[PDFRef, 'PDFRef']]);\n    assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n    assertIs(embedder, 'embedder', [[CustomFontEmbedder, 'CustomFontEmbedder'], [StandardFontEmbedder, 'StandardFontEmbedder']]);\n    this.ref = ref;\n    this.doc = doc;\n    this.name = embedder.fontName;\n    this.embedder = embedder;\n  }\n  /**\n   * > **NOTE:** You probably don't need to call this method directly. The\n   * > [[PDFPage.drawText]] method will automatically encode the text it is\n   * > given.\n   *\n   * Encodes a string of text in this font.\n   *\n   * @param text The text to be encoded.\n   * @returns The encoded text as a hex string.\n   */\n\n\n  PDFFont.prototype.encodeText = function (text) {\n    assertIs(text, 'text', ['string']);\n    this.modified = true;\n    return this.embedder.encodeText(text);\n  };\n  /**\n   * Measure the width of a string of text drawn in this font at a given size.\n   * For example:\n   * ```js\n   * const width = font.widthOfTextAtSize('Foo Bar Qux Baz', 36)\n   * ```\n   * @param text The string of text to be measured.\n   * @param size The font size to be used for this measurement.\n   * @returns The width of the string of text when drawn in this font at the\n   *          given size.\n   */\n\n\n  PDFFont.prototype.widthOfTextAtSize = function (text, size) {\n    assertIs(text, 'text', ['string']);\n    assertIs(size, 'size', ['number']);\n    return this.embedder.widthOfTextAtSize(text, size);\n  };\n  /**\n   * Measure the height of this font at a given size. For example:\n   * ```js\n   * const height = font.heightAtSize(24)\n   * ```\n   *\n   * The `options.descender` value controls whether or not the font's\n   * descender is included in the height calculation.\n   *\n   * @param size The font size to be used for this measurement.\n   * @param options The options to be used when computing this measurement.\n   * @returns The height of this font at the given size.\n   */\n\n\n  PDFFont.prototype.heightAtSize = function (size, options) {\n    var _a;\n\n    assertIs(size, 'size', ['number']);\n    assertOrUndefined(options === null || options === void 0 ? void 0 : options.descender, 'options.descender', ['boolean']);\n    return this.embedder.heightOfFontAtSize(size, {\n      descender: (_a = options === null || options === void 0 ? void 0 : options.descender) !== null && _a !== void 0 ? _a : true\n    });\n  };\n  /**\n   * Compute the font size at which this font is a given height. For example:\n   * ```js\n   * const fontSize = font.sizeAtHeight(12)\n   * ```\n   * @param height The height to be used for this calculation.\n   * @returns The font size at which this font is the given height.\n   */\n\n\n  PDFFont.prototype.sizeAtHeight = function (height) {\n    assertIs(height, 'height', ['number']);\n    return this.embedder.sizeOfFontAtHeight(height);\n  };\n  /**\n   * Get the set of unicode code points that can be represented by this font.\n   * @returns The set of unicode code points supported by this font.\n   */\n\n\n  PDFFont.prototype.getCharacterSet = function () {\n    if (this.embedder instanceof StandardFontEmbedder) {\n      return this.embedder.encoding.supportedCodePoints;\n    } else {\n      return this.embedder.font.characterSet;\n    }\n  };\n  /**\n   * > **NOTE:** You probably don't need to call this method directly. The\n   * > [[PDFDocument.save]] and [[PDFDocument.saveAsBase64]] methods will\n   * > automatically ensure all fonts get embedded.\n   *\n   * Embed this font in its document.\n   *\n   * @returns Resolves when the embedding is complete.\n   */\n\n\n  PDFFont.prototype.embed = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.modified) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.embedder.embedIntoContext(this.doc.context, this.ref)];\n\n          case 1:\n            _a.sent();\n\n            this.modified = false;\n            _a.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFDocument.embedFont]] and\n   * > [[PDFDocument.embedStandardFont]] methods, which will create instances\n   * > of [[PDFFont]] for you.\n   *\n   * Create an instance of [[PDFFont]] from an existing ref and embedder\n   *\n   * @param ref The unique reference for this font.\n   * @param doc The document to which the font will belong.\n   * @param embedder The embedder that will be used to embed the font.\n   */\n\n\n  PDFFont.of = function (ref, doc, embedder) {\n    return new PDFFont(ref, doc, embedder);\n  };\n\n  return PDFFont;\n}();\n\nexport default PDFFont;","map":{"version":3,"sources":["../../src/api/PDFFont.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __awaiter, __generator } from \"tslib\";\nimport PDFDocument from \"./PDFDocument\";\nimport { CustomFontEmbedder, PDFRef, StandardFontEmbedder, } from \"../core\";\nimport { assertIs, assertOrUndefined } from \"../utils\";\n/**\n * Represents a font that has been embedded in a [[PDFDocument]].\n */\nvar PDFFont = /** @class */ (function () {\n    function PDFFont(ref, doc, embedder) {\n        this.modified = true;\n        assertIs(ref, 'ref', [[PDFRef, 'PDFRef']]);\n        assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n        assertIs(embedder, 'embedder', [\n            [CustomFontEmbedder, 'CustomFontEmbedder'],\n            [StandardFontEmbedder, 'StandardFontEmbedder'],\n        ]);\n        this.ref = ref;\n        this.doc = doc;\n        this.name = embedder.fontName;\n        this.embedder = embedder;\n    }\n    /**\n     * > **NOTE:** You probably don't need to call this method directly. The\n     * > [[PDFPage.drawText]] method will automatically encode the text it is\n     * > given.\n     *\n     * Encodes a string of text in this font.\n     *\n     * @param text The text to be encoded.\n     * @returns The encoded text as a hex string.\n     */\n    PDFFont.prototype.encodeText = function (text) {\n        assertIs(text, 'text', ['string']);\n        this.modified = true;\n        return this.embedder.encodeText(text);\n    };\n    /**\n     * Measure the width of a string of text drawn in this font at a given size.\n     * For example:\n     * ```js\n     * const width = font.widthOfTextAtSize('Foo Bar Qux Baz', 36)\n     * ```\n     * @param text The string of text to be measured.\n     * @param size The font size to be used for this measurement.\n     * @returns The width of the string of text when drawn in this font at the\n     *          given size.\n     */\n    PDFFont.prototype.widthOfTextAtSize = function (text, size) {\n        assertIs(text, 'text', ['string']);\n        assertIs(size, 'size', ['number']);\n        return this.embedder.widthOfTextAtSize(text, size);\n    };\n    /**\n     * Measure the height of this font at a given size. For example:\n     * ```js\n     * const height = font.heightAtSize(24)\n     * ```\n     *\n     * The `options.descender` value controls whether or not the font's\n     * descender is included in the height calculation.\n     *\n     * @param size The font size to be used for this measurement.\n     * @param options The options to be used when computing this measurement.\n     * @returns The height of this font at the given size.\n     */\n    PDFFont.prototype.heightAtSize = function (size, options) {\n        var _a;\n        assertIs(size, 'size', ['number']);\n        assertOrUndefined(options === null || options === void 0 ? void 0 : options.descender, 'options.descender', ['boolean']);\n        return this.embedder.heightOfFontAtSize(size, {\n            descender: (_a = options === null || options === void 0 ? void 0 : options.descender) !== null && _a !== void 0 ? _a : true,\n        });\n    };\n    /**\n     * Compute the font size at which this font is a given height. For example:\n     * ```js\n     * const fontSize = font.sizeAtHeight(12)\n     * ```\n     * @param height The height to be used for this calculation.\n     * @returns The font size at which this font is the given height.\n     */\n    PDFFont.prototype.sizeAtHeight = function (height) {\n        assertIs(height, 'height', ['number']);\n        return this.embedder.sizeOfFontAtHeight(height);\n    };\n    /**\n     * Get the set of unicode code points that can be represented by this font.\n     * @returns The set of unicode code points supported by this font.\n     */\n    PDFFont.prototype.getCharacterSet = function () {\n        if (this.embedder instanceof StandardFontEmbedder) {\n            return this.embedder.encoding.supportedCodePoints;\n        }\n        else {\n            return this.embedder.font.characterSet;\n        }\n    };\n    /**\n     * > **NOTE:** You probably don't need to call this method directly. The\n     * > [[PDFDocument.save]] and [[PDFDocument.saveAsBase64]] methods will\n     * > automatically ensure all fonts get embedded.\n     *\n     * Embed this font in its document.\n     *\n     * @returns Resolves when the embedding is complete.\n     */\n    PDFFont.prototype.embed = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.modified) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.embedder.embedIntoContext(this.doc.context, this.ref)];\n                    case 1:\n                        _a.sent();\n                        this.modified = false;\n                        _a.label = 2;\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * > **NOTE:** You probably don't want to call this method directly. Instead,\n     * > consider using the [[PDFDocument.embedFont]] and\n     * > [[PDFDocument.embedStandardFont]] methods, which will create instances\n     * > of [[PDFFont]] for you.\n     *\n     * Create an instance of [[PDFFont]] from an existing ref and embedder\n     *\n     * @param ref The unique reference for this font.\n     * @param doc The document to which the font will belong.\n     * @param embedder The embedder that will be used to embed the font.\n     */\n    PDFFont.of = function (ref, doc, embedder) {\n        return new PDFFont(ref, doc, embedder);\n    };\n    return PDFFont;\n}());\nexport default PDFFont;\n//# sourceMappingURL=PDFFont.js.map"]},"metadata":{},"sourceType":"module"}