{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFAcroTerminal from \"./PDFAcroTerminal\";\nimport PDFHexString from \"../objects/PDFHexString\";\nimport PDFString from \"../objects/PDFString\";\nimport PDFArray from \"../objects/PDFArray\";\nimport PDFName from \"../objects/PDFName\";\nimport { AcroChoiceFlags } from \"./flags\";\nimport { InvalidAcroFieldValueError, MultiSelectValueError } from \"../errors\";\n\nvar PDFAcroChoice =\n/** @class */\nfunction (_super) {\n  __extends(PDFAcroChoice, _super);\n\n  function PDFAcroChoice() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  PDFAcroChoice.prototype.setValues = function (values) {\n    if (this.hasFlag(AcroChoiceFlags.Combo) && !this.hasFlag(AcroChoiceFlags.Edit) && !this.valuesAreValid(values)) {\n      throw new InvalidAcroFieldValueError();\n    }\n\n    if (values.length === 0) {\n      this.dict.delete(PDFName.of('V'));\n    }\n\n    if (values.length === 1) {\n      this.dict.set(PDFName.of('V'), values[0]);\n    }\n\n    if (values.length > 1) {\n      if (!this.hasFlag(AcroChoiceFlags.MultiSelect)) {\n        throw new MultiSelectValueError();\n      }\n\n      this.dict.set(PDFName.of('V'), this.dict.context.obj(values));\n    }\n\n    this.updateSelectedIndices(values);\n  };\n\n  PDFAcroChoice.prototype.valuesAreValid = function (values) {\n    var options = this.getOptions();\n\n    var _loop_1 = function (idx, len) {\n      var val = values[idx].decodeText();\n\n      if (!options.find(function (o) {\n        return val === (o.display || o.value).decodeText();\n      })) {\n        return {\n          value: false\n        };\n      }\n    };\n\n    for (var idx = 0, len = values.length; idx < len; idx++) {\n      var state_1 = _loop_1(idx, len);\n\n      if (typeof state_1 === \"object\") return state_1.value;\n    }\n\n    return true;\n  };\n\n  PDFAcroChoice.prototype.updateSelectedIndices = function (values) {\n    if (values.length > 1) {\n      var indices = new Array(values.length);\n      var options = this.getOptions();\n\n      var _loop_2 = function (idx, len) {\n        var val = values[idx].decodeText();\n        indices[idx] = options.findIndex(function (o) {\n          return val === (o.display || o.value).decodeText();\n        });\n      };\n\n      for (var idx = 0, len = values.length; idx < len; idx++) {\n        _loop_2(idx, len);\n      }\n\n      this.dict.set(PDFName.of('I'), this.dict.context.obj(indices.sort()));\n    } else {\n      this.dict.delete(PDFName.of('I'));\n    }\n  };\n\n  PDFAcroChoice.prototype.getValues = function () {\n    var v = this.V();\n    if (v instanceof PDFString || v instanceof PDFHexString) return [v];\n\n    if (v instanceof PDFArray) {\n      var values = [];\n\n      for (var idx = 0, len = v.size(); idx < len; idx++) {\n        var value = v.lookup(idx);\n\n        if (value instanceof PDFString || value instanceof PDFHexString) {\n          values.push(value);\n        }\n      }\n\n      return values;\n    }\n\n    return [];\n  };\n\n  PDFAcroChoice.prototype.Opt = function () {\n    return this.dict.lookupMaybe(PDFName.of('Opt'), PDFString, PDFHexString, PDFArray);\n  };\n\n  PDFAcroChoice.prototype.setOptions = function (options) {\n    var newOpt = new Array(options.length);\n\n    for (var idx = 0, len = options.length; idx < len; idx++) {\n      var _a = options[idx],\n          value = _a.value,\n          display = _a.display;\n      newOpt[idx] = this.dict.context.obj([value, display || value]);\n    }\n\n    this.dict.set(PDFName.of('Opt'), this.dict.context.obj(newOpt));\n  };\n\n  PDFAcroChoice.prototype.getOptions = function () {\n    var Opt = this.Opt(); // Not supposed to happen - Opt _should_ always be `PDFArray | undefined`\n\n    if (Opt instanceof PDFString || Opt instanceof PDFHexString) {\n      return [{\n        value: Opt,\n        display: Opt\n      }];\n    }\n\n    if (Opt instanceof PDFArray) {\n      var res = [];\n\n      for (var idx = 0, len = Opt.size(); idx < len; idx++) {\n        var item = Opt.lookup(idx); // If `item` is a string, use that as both the export and text value\n\n        if (item instanceof PDFString || item instanceof PDFHexString) {\n          res.push({\n            value: item,\n            display: item\n          });\n        } // If `item` is an array of one, treat it the same as just a string,\n        // if it's an array of two then `item[0]` is the export value and\n        // `item[1]` is the text value\n\n\n        if (item instanceof PDFArray) {\n          if (item.size() > 0) {\n            var first = item.lookup(0, PDFString, PDFHexString);\n            var second = item.lookupMaybe(1, PDFString, PDFHexString);\n            res.push({\n              value: first,\n              display: second || first\n            });\n          }\n        }\n      }\n\n      return res;\n    }\n\n    return [];\n  };\n\n  return PDFAcroChoice;\n}(PDFAcroTerminal);\n\nexport default PDFAcroChoice;","map":{"version":3,"sources":["../../../src/core/acroform/PDFAcroChoice.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport PDFAcroTerminal from \"./PDFAcroTerminal\";\nimport PDFHexString from \"../objects/PDFHexString\";\nimport PDFString from \"../objects/PDFString\";\nimport PDFArray from \"../objects/PDFArray\";\nimport PDFName from \"../objects/PDFName\";\nimport { AcroChoiceFlags } from \"./flags\";\nimport { InvalidAcroFieldValueError, MultiSelectValueError, } from \"../errors\";\nvar PDFAcroChoice = /** @class */ (function (_super) {\n    __extends(PDFAcroChoice, _super);\n    function PDFAcroChoice() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    PDFAcroChoice.prototype.setValues = function (values) {\n        if (this.hasFlag(AcroChoiceFlags.Combo) &&\n            !this.hasFlag(AcroChoiceFlags.Edit) &&\n            !this.valuesAreValid(values)) {\n            throw new InvalidAcroFieldValueError();\n        }\n        if (values.length === 0) {\n            this.dict.delete(PDFName.of('V'));\n        }\n        if (values.length === 1) {\n            this.dict.set(PDFName.of('V'), values[0]);\n        }\n        if (values.length > 1) {\n            if (!this.hasFlag(AcroChoiceFlags.MultiSelect)) {\n                throw new MultiSelectValueError();\n            }\n            this.dict.set(PDFName.of('V'), this.dict.context.obj(values));\n        }\n        this.updateSelectedIndices(values);\n    };\n    PDFAcroChoice.prototype.valuesAreValid = function (values) {\n        var options = this.getOptions();\n        var _loop_1 = function (idx, len) {\n            var val = values[idx].decodeText();\n            if (!options.find(function (o) { return val === (o.display || o.value).decodeText(); })) {\n                return { value: false };\n            }\n        };\n        for (var idx = 0, len = values.length; idx < len; idx++) {\n            var state_1 = _loop_1(idx, len);\n            if (typeof state_1 === \"object\")\n                return state_1.value;\n        }\n        return true;\n    };\n    PDFAcroChoice.prototype.updateSelectedIndices = function (values) {\n        if (values.length > 1) {\n            var indices = new Array(values.length);\n            var options = this.getOptions();\n            var _loop_2 = function (idx, len) {\n                var val = values[idx].decodeText();\n                indices[idx] = options.findIndex(function (o) { return val === (o.display || o.value).decodeText(); });\n            };\n            for (var idx = 0, len = values.length; idx < len; idx++) {\n                _loop_2(idx, len);\n            }\n            this.dict.set(PDFName.of('I'), this.dict.context.obj(indices.sort()));\n        }\n        else {\n            this.dict.delete(PDFName.of('I'));\n        }\n    };\n    PDFAcroChoice.prototype.getValues = function () {\n        var v = this.V();\n        if (v instanceof PDFString || v instanceof PDFHexString)\n            return [v];\n        if (v instanceof PDFArray) {\n            var values = [];\n            for (var idx = 0, len = v.size(); idx < len; idx++) {\n                var value = v.lookup(idx);\n                if (value instanceof PDFString || value instanceof PDFHexString) {\n                    values.push(value);\n                }\n            }\n            return values;\n        }\n        return [];\n    };\n    PDFAcroChoice.prototype.Opt = function () {\n        return this.dict.lookupMaybe(PDFName.of('Opt'), PDFString, PDFHexString, PDFArray);\n    };\n    PDFAcroChoice.prototype.setOptions = function (options) {\n        var newOpt = new Array(options.length);\n        for (var idx = 0, len = options.length; idx < len; idx++) {\n            var _a = options[idx], value = _a.value, display = _a.display;\n            newOpt[idx] = this.dict.context.obj([value, display || value]);\n        }\n        this.dict.set(PDFName.of('Opt'), this.dict.context.obj(newOpt));\n    };\n    PDFAcroChoice.prototype.getOptions = function () {\n        var Opt = this.Opt();\n        // Not supposed to happen - Opt _should_ always be `PDFArray | undefined`\n        if (Opt instanceof PDFString || Opt instanceof PDFHexString) {\n            return [{ value: Opt, display: Opt }];\n        }\n        if (Opt instanceof PDFArray) {\n            var res = [];\n            for (var idx = 0, len = Opt.size(); idx < len; idx++) {\n                var item = Opt.lookup(idx);\n                // If `item` is a string, use that as both the export and text value\n                if (item instanceof PDFString || item instanceof PDFHexString) {\n                    res.push({ value: item, display: item });\n                }\n                // If `item` is an array of one, treat it the same as just a string,\n                // if it's an array of two then `item[0]` is the export value and\n                // `item[1]` is the text value\n                if (item instanceof PDFArray) {\n                    if (item.size() > 0) {\n                        var first = item.lookup(0, PDFString, PDFHexString);\n                        var second = item.lookupMaybe(1, PDFString, PDFHexString);\n                        res.push({ value: first, display: second || first });\n                    }\n                }\n            }\n            return res;\n        }\n        return [];\n    };\n    return PDFAcroChoice;\n}(PDFAcroTerminal));\nexport default PDFAcroChoice;\n//# sourceMappingURL=PDFAcroChoice.js.map"]},"metadata":{},"sourceType":"module"}