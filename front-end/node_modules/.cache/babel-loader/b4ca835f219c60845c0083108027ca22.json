{"ast":null,"code":"import { useContext, useEffect } from 'react';\nimport { __assign } from 'tslib';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.js';\nimport { useConstant } from '../../utils/use-constant.js';\nimport { VisualElementDragControls } from './VisualElementDragControls.js';\n/**\r\n * A hook that allows an element to be dragged.\r\n *\r\n * @internal\r\n */\n\nfunction useDrag(props, visualElement) {\n  var groupDragControls = props.dragControls;\n  var transformPagePoint = useContext(MotionConfigContext).transformPagePoint;\n  var dragControls = useConstant(function () {\n    return new VisualElementDragControls({\n      visualElement: visualElement\n    });\n  });\n  dragControls.setProps(__assign(__assign({}, props), {\n    transformPagePoint: transformPagePoint\n  })); // If we've been provided a DragControls for manual control over the drag gesture,\n  // subscribe this component to it on mount.\n\n  useEffect(function () {\n    return groupDragControls && groupDragControls.subscribe(dragControls);\n  }, [dragControls]); // Mount the drag controls with the visualElement\n\n  useEffect(function () {\n    return dragControls.mount(visualElement);\n  }, []);\n}\n\nexport { useDrag };","map":{"version":3,"sources":["C:/Users/GAMER/OneDrive/Desktop/programming stuff/github_repos/instafill/front-end/node_modules/framer-motion/dist/es/gestures/drag/use-drag.js"],"names":["useContext","useEffect","__assign","MotionConfigContext","useConstant","VisualElementDragControls","useDrag","props","visualElement","groupDragControls","dragControls","transformPagePoint","setProps","subscribe","mount"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,SAArB,QAAsC,OAAtC;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,mBAAT,QAAoC,sCAApC;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,SAASC,yBAAT,QAA0C,gCAA1C;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,aAAxB,EAAuC;AACnC,MAAIC,iBAAiB,GAAGF,KAAK,CAACG,YAA9B;AACA,MAAIC,kBAAkB,GAAGX,UAAU,CAACG,mBAAD,CAAV,CAAgCQ,kBAAzD;AACA,MAAID,YAAY,GAAGN,WAAW,CAAC,YAAY;AACvC,WAAO,IAAIC,yBAAJ,CAA8B;AACjCG,MAAAA,aAAa,EAAEA;AADkB,KAA9B,CAAP;AAGH,GAJ6B,CAA9B;AAKAE,EAAAA,YAAY,CAACE,QAAb,CAAsBV,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKK,KAAL,CAAT,EAAsB;AAAEI,IAAAA,kBAAkB,EAAEA;AAAtB,GAAtB,CAA9B,EARmC,CASnC;AACA;;AACAV,EAAAA,SAAS,CAAC,YAAY;AAAE,WAAOQ,iBAAiB,IAAIA,iBAAiB,CAACI,SAAlB,CAA4BH,YAA5B,CAA5B;AAAwE,GAAvF,EAAyF,CAACA,YAAD,CAAzF,CAAT,CAXmC,CAYnC;;AACAT,EAAAA,SAAS,CAAC,YAAY;AAAE,WAAOS,YAAY,CAACI,KAAb,CAAmBN,aAAnB,CAAP;AAA2C,GAA1D,EAA4D,EAA5D,CAAT;AACH;;AAED,SAASF,OAAT","sourcesContent":["import { useContext, useEffect } from 'react';\r\nimport { __assign } from 'tslib';\r\nimport { MotionConfigContext } from '../../context/MotionConfigContext.js';\r\nimport { useConstant } from '../../utils/use-constant.js';\r\nimport { VisualElementDragControls } from './VisualElementDragControls.js';\r\n\r\n/**\r\n * A hook that allows an element to be dragged.\r\n *\r\n * @internal\r\n */\r\nfunction useDrag(props, visualElement) {\r\n    var groupDragControls = props.dragControls;\r\n    var transformPagePoint = useContext(MotionConfigContext).transformPagePoint;\r\n    var dragControls = useConstant(function () {\r\n        return new VisualElementDragControls({\r\n            visualElement: visualElement,\r\n        });\r\n    });\r\n    dragControls.setProps(__assign(__assign({}, props), { transformPagePoint: transformPagePoint }));\r\n    // If we've been provided a DragControls for manual control over the drag gesture,\r\n    // subscribe this component to it on mount.\r\n    useEffect(function () { return groupDragControls && groupDragControls.subscribe(dragControls); }, [dragControls]);\r\n    // Mount the drag controls with the visualElement\r\n    useEffect(function () { return dragControls.mount(visualElement); }, []);\r\n}\r\n\r\nexport { useDrag };\r\n"]},"metadata":{},"sourceType":"module"}