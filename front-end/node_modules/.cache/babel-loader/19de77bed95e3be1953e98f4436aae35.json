{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFAcroButton from \"./PDFAcroButton\";\nimport { InvalidAcroFieldValueError } from \"../errors\";\n\nvar PDFAcroCheckBox =\n/** @class */\nfunction (_super) {\n  __extends(PDFAcroCheckBox, _super);\n\n  function PDFAcroCheckBox() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  PDFAcroCheckBox.prototype.setValue = function (value) {\n    var _a;\n\n    var onValue = (_a = this.getOnValue()) !== null && _a !== void 0 ? _a : PDFName.of('Yes');\n\n    if (value !== onValue && value !== PDFName.of('Off')) {\n      throw new InvalidAcroFieldValueError();\n    }\n\n    this.dict.set(PDFName.of('V'), value);\n    var widgets = this.getWidgets();\n\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var state = widget.getOnValue() === value ? value : PDFName.of('Off');\n      widget.setAppearanceState(state);\n    }\n  };\n\n  PDFAcroCheckBox.prototype.getValue = function () {\n    var v = this.V();\n    if (v instanceof PDFName) return v;\n    return PDFName.of('Off');\n  };\n\n  PDFAcroCheckBox.prototype.getOnValue = function () {\n    var widget = this.getWidgets()[0];\n    return widget === null || widget === void 0 ? void 0 : widget.getOnValue();\n  };\n\n  PDFAcroCheckBox.fromDict = function (dict, ref) {\n    return new PDFAcroCheckBox(dict, ref);\n  };\n\n  PDFAcroCheckBox.create = function (context) {\n    var dict = context.obj({\n      FT: 'Btn',\n      Kids: []\n    });\n    var ref = context.register(dict);\n    return new PDFAcroCheckBox(dict, ref);\n  };\n\n  return PDFAcroCheckBox;\n}(PDFAcroButton);\n\nexport default PDFAcroCheckBox;","map":{"version":3,"sources":["../../../src/core/acroform/PDFAcroCheckBox.ts"],"names":[],"mappings":";AAGA,OAAO,OAAP,MAAc,oBAAd;AACA,OAAO,aAAP,MAAoB,iBAApB;AACA,SAAS,0BAAT,QAAqC,WAArC;;AAEA,IAAA,eAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA8B,EAAA,SAAA,CAAA,eAAA,EAAA,MAAA,CAAA;;AAA9B,WAAA,eAAA,GAAA;;AAuCC;;AA1BC,EAAA,eAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,KAAT,EAAuB;;;AACrB,QAAM,OAAO,GAAA,CAAA,EAAA,GAAG,KAAK,UAAL,EAAH,MAAoB,IAApB,IAAoB,EAAA,KAAA,KAAA,CAApB,GAAoB,EAApB,GAAwB,OAAO,CAAC,EAAR,CAAW,KAAX,CAArC;;AACA,QAAI,KAAK,KAAK,OAAV,IAAqB,KAAK,KAAK,OAAO,CAAC,EAAR,CAAW,KAAX,CAAnC,EAAsD;AACpD,YAAM,IAAI,0BAAJ,EAAN;AACD;;AAED,SAAK,IAAL,CAAU,GAAV,CAAc,OAAO,CAAC,EAAR,CAAW,GAAX,CAAd,EAA+B,KAA/B;AAEA,QAAM,OAAO,GAAG,KAAK,UAAL,EAAhB;;AACA,SAAK,IAAI,GAAG,GAAG,CAAV,EAAa,GAAG,GAAG,OAAO,CAAC,MAAhC,EAAwC,GAAG,GAAG,GAA9C,EAAmD,GAAG,EAAtD,EAA0D;AACxD,UAAM,MAAM,GAAG,OAAO,CAAC,GAAD,CAAtB;AACA,UAAM,KAAK,GAAG,MAAM,CAAC,UAAP,OAAwB,KAAxB,GAAgC,KAAhC,GAAwC,OAAO,CAAC,EAAR,CAAW,KAAX,CAAtD;AACA,MAAA,MAAM,CAAC,kBAAP,CAA0B,KAA1B;AACD;AACF,GAdD;;AAgBA,EAAA,eAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AACE,QAAM,CAAC,GAAG,KAAK,CAAL,EAAV;AACA,QAAI,CAAC,YAAY,OAAjB,EAA0B,OAAO,CAAP;AAC1B,WAAO,OAAO,CAAC,EAAR,CAAW,KAAX,CAAP;AACD,GAJD;;AAMA,EAAA,eAAA,CAAA,SAAA,CAAA,UAAA,GAAA,YAAA;AACS,QAAA,MAAM,GAAI,KAAK,UAAL,GAAJ,CAAI,CAAV;AACP,WAAO,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAA,MAAM,CAAE,UAAR,EAAP;AACD,GAHD;;AAlCO,EAAA,eAAA,CAAA,QAAA,GAAW,UAAC,IAAD,EAAgB,GAAhB,EAA2B;AAC3C,WAAA,IAAI,eAAJ,CAAoB,IAApB,EAA0B,GAA1B,CAAA;AAA8B,GADzB;;AAGA,EAAA,eAAA,CAAA,MAAA,GAAS,UAAC,OAAD,EAAoB;AAClC,QAAM,IAAI,GAAG,OAAO,CAAC,GAAR,CAAY;AACvB,MAAA,EAAE,EAAE,KADmB;AAEvB,MAAA,IAAI,EAAE;AAFiB,KAAZ,CAAb;AAIA,QAAM,GAAG,GAAG,OAAO,CAAC,QAAR,CAAiB,IAAjB,CAAZ;AACA,WAAO,IAAI,eAAJ,CAAoB,IAApB,EAA0B,GAA1B,CAAP;AACD,GAPM;;AAmCT,SAAA,eAAA;AAAC,CAvCD,CAA8B,aAA9B,CAAA;;AAyCA,eAAe,eAAf","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFAcroButton from \"./PDFAcroButton\";\nimport { InvalidAcroFieldValueError } from \"../errors\";\nvar PDFAcroCheckBox = /** @class */ (function (_super) {\n    __extends(PDFAcroCheckBox, _super);\n    function PDFAcroCheckBox() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    PDFAcroCheckBox.prototype.setValue = function (value) {\n        var _a;\n        var onValue = (_a = this.getOnValue()) !== null && _a !== void 0 ? _a : PDFName.of('Yes');\n        if (value !== onValue && value !== PDFName.of('Off')) {\n            throw new InvalidAcroFieldValueError();\n        }\n        this.dict.set(PDFName.of('V'), value);\n        var widgets = this.getWidgets();\n        for (var idx = 0, len = widgets.length; idx < len; idx++) {\n            var widget = widgets[idx];\n            var state = widget.getOnValue() === value ? value : PDFName.of('Off');\n            widget.setAppearanceState(state);\n        }\n    };\n    PDFAcroCheckBox.prototype.getValue = function () {\n        var v = this.V();\n        if (v instanceof PDFName)\n            return v;\n        return PDFName.of('Off');\n    };\n    PDFAcroCheckBox.prototype.getOnValue = function () {\n        var widget = this.getWidgets()[0];\n        return widget === null || widget === void 0 ? void 0 : widget.getOnValue();\n    };\n    PDFAcroCheckBox.fromDict = function (dict, ref) {\n        return new PDFAcroCheckBox(dict, ref);\n    };\n    PDFAcroCheckBox.create = function (context) {\n        var dict = context.obj({\n            FT: 'Btn',\n            Kids: [],\n        });\n        var ref = context.register(dict);\n        return new PDFAcroCheckBox(dict, ref);\n    };\n    return PDFAcroCheckBox;\n}(PDFAcroButton));\nexport default PDFAcroCheckBox;\n//# sourceMappingURL=PDFAcroCheckBox.js.map"]},"metadata":{},"sourceType":"module"}