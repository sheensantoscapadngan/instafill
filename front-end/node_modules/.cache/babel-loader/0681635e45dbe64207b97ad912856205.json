{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { PNG } from \"../../utils/png\";\n/**\r\n * A note of thanks to the developers of https://github.com/foliojs/pdfkit, as\r\n * this class borrows from:\r\n *   https://github.com/devongovett/pdfkit/blob/e71edab0dd4657b5a767804ba86c94c58d01fbca/lib/image/png.coffee\r\n */\n\nvar PngEmbedder =\n/** @class */\nfunction () {\n  function PngEmbedder(png) {\n    this.image = png;\n    this.bitsPerComponent = png.bitsPerComponent;\n    this.width = png.width;\n    this.height = png.height;\n    this.colorSpace = 'DeviceRGB';\n  }\n\n  PngEmbedder.for = function (imageData) {\n    return __awaiter(this, void 0, void 0, function () {\n      var png;\n      return __generator(this, function (_a) {\n        png = PNG.load(imageData);\n        return [2\n        /*return*/\n        , new PngEmbedder(png)];\n      });\n    });\n  };\n\n  PngEmbedder.prototype.embedIntoContext = function (context, ref) {\n    return __awaiter(this, void 0, void 0, function () {\n      var SMask, xObject;\n      return __generator(this, function (_a) {\n        SMask = this.embedAlphaChannel(context);\n        xObject = context.flateStream(this.image.rgbChannel, {\n          Type: 'XObject',\n          Subtype: 'Image',\n          BitsPerComponent: this.image.bitsPerComponent,\n          Width: this.image.width,\n          Height: this.image.height,\n          ColorSpace: this.colorSpace,\n          SMask: SMask\n        });\n\n        if (ref) {\n          context.assign(ref, xObject);\n          return [2\n          /*return*/\n          , ref];\n        } else {\n          return [2\n          /*return*/\n          , context.register(xObject)];\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  PngEmbedder.prototype.embedAlphaChannel = function (context) {\n    if (!this.image.alphaChannel) return undefined;\n    var xObject = context.flateStream(this.image.alphaChannel, {\n      Type: 'XObject',\n      Subtype: 'Image',\n      Height: this.image.height,\n      Width: this.image.width,\n      BitsPerComponent: this.image.bitsPerComponent,\n      ColorSpace: 'DeviceGray',\n      Decode: [0, 1]\n    });\n    return context.register(xObject);\n  };\n\n  return PngEmbedder;\n}();\n\nexport default PngEmbedder;","map":{"version":3,"sources":["../../../src/core/embedders/PngEmbedder.ts"],"names":[],"mappings":";AAEA,SAAS,GAAT,QAAc,iBAAd;AAEA;;;;AAIG;;AACH,IAAA,WAAA;AAAA;AAAA,YAAA;AAaE,WAAA,WAAA,CAAoB,GAApB,EAA4B;AAC1B,SAAK,KAAL,GAAa,GAAb;AACA,SAAK,gBAAL,GAAwB,GAAG,CAAC,gBAA5B;AACA,SAAK,KAAL,GAAa,GAAG,CAAC,KAAjB;AACA,SAAK,MAAL,GAAc,GAAG,CAAC,MAAlB;AACA,SAAK,UAAL,GAAkB,WAAlB;AACD;;AAlBY,EAAA,WAAA,CAAA,GAAA,GAAb,UAAiB,SAAjB,EAAsC;;;;AAC9B,QAAA,GAAG,GAAG,GAAG,CAAC,IAAJ,CAAS,SAAT,CAAN;AACN,eAAA,CAAA;AAAA;AAAA,UAAO,IAAI,WAAJ,CAAgB,GAAhB,CAAP,CAAA;;;AACD,GAHY;;AAoBP,EAAA,WAAA,CAAA,SAAA,CAAA,gBAAA,GAAN,UAAuB,OAAvB,EAA4C,GAA5C,EAAwD;;;;AAChD,QAAA,KAAK,GAAG,KAAK,iBAAL,CAAuB,OAAvB,CAAR;AAEA,QAAA,OAAO,GAAG,OAAO,CAAC,WAAR,CAAoB,KAAK,KAAL,CAAW,UAA/B,EAA2C;AACzD,UAAA,IAAI,EAAE,SADmD;AAEzD,UAAA,OAAO,EAAE,OAFgD;AAGzD,UAAA,gBAAgB,EAAE,KAAK,KAAL,CAAW,gBAH4B;AAIzD,UAAA,KAAK,EAAE,KAAK,KAAL,CAAW,KAJuC;AAKzD,UAAA,MAAM,EAAE,KAAK,KAAL,CAAW,MALsC;AAMzD,UAAA,UAAU,EAAE,KAAK,UANwC;AAOzD,UAAA,KAAK,EAAA;AAPoD,SAA3C,CAAV;;AAUN,YAAI,GAAJ,EAAS;AACP,UAAA,OAAO,CAAC,MAAR,CAAe,GAAf,EAAoB,OAApB;AACA,iBAAA,CAAA;AAAA;AAAA,YAAO,GAAP,CAAA;AACD,SAHD,MAGO;AACL,iBAAA,CAAA;AAAA;AAAA,YAAO,OAAO,CAAC,QAAR,CAAiB,OAAjB,CAAP,CAAA;AACD;;;;;;;AACF,GAnBK;;AAqBE,EAAA,WAAA,CAAA,SAAA,CAAA,iBAAA,GAAR,UAA0B,OAA1B,EAA6C;AAC3C,QAAI,CAAC,KAAK,KAAL,CAAW,YAAhB,EAA8B,OAAO,SAAP;AAE9B,QAAM,OAAO,GAAG,OAAO,CAAC,WAAR,CAAoB,KAAK,KAAL,CAAW,YAA/B,EAA6C;AAC3D,MAAA,IAAI,EAAE,SADqD;AAE3D,MAAA,OAAO,EAAE,OAFkD;AAG3D,MAAA,MAAM,EAAE,KAAK,KAAL,CAAW,MAHwC;AAI3D,MAAA,KAAK,EAAE,KAAK,KAAL,CAAW,KAJyC;AAK3D,MAAA,gBAAgB,EAAE,KAAK,KAAL,CAAW,gBAL8B;AAM3D,MAAA,UAAU,EAAE,YAN+C;AAO3D,MAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ;AAPmD,KAA7C,CAAhB;AAUA,WAAO,OAAO,CAAC,QAAR,CAAiB,OAAjB,CAAP;AACD,GAdO;;AAeV,SAAA,WAAA;AAAC,CAzDD,EAAA;;AA2DA,eAAe,WAAf","sourceRoot":"","sourcesContent":["import { __awaiter, __generator } from \"tslib\";\r\nimport { PNG } from \"../../utils/png\";\r\n/**\r\n * A note of thanks to the developers of https://github.com/foliojs/pdfkit, as\r\n * this class borrows from:\r\n *   https://github.com/devongovett/pdfkit/blob/e71edab0dd4657b5a767804ba86c94c58d01fbca/lib/image/png.coffee\r\n */\r\nvar PngEmbedder = /** @class */ (function () {\r\n    function PngEmbedder(png) {\r\n        this.image = png;\r\n        this.bitsPerComponent = png.bitsPerComponent;\r\n        this.width = png.width;\r\n        this.height = png.height;\r\n        this.colorSpace = 'DeviceRGB';\r\n    }\r\n    PngEmbedder.for = function (imageData) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var png;\r\n            return __generator(this, function (_a) {\r\n                png = PNG.load(imageData);\r\n                return [2 /*return*/, new PngEmbedder(png)];\r\n            });\r\n        });\r\n    };\r\n    PngEmbedder.prototype.embedIntoContext = function (context, ref) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var SMask, xObject;\r\n            return __generator(this, function (_a) {\r\n                SMask = this.embedAlphaChannel(context);\r\n                xObject = context.flateStream(this.image.rgbChannel, {\r\n                    Type: 'XObject',\r\n                    Subtype: 'Image',\r\n                    BitsPerComponent: this.image.bitsPerComponent,\r\n                    Width: this.image.width,\r\n                    Height: this.image.height,\r\n                    ColorSpace: this.colorSpace,\r\n                    SMask: SMask,\r\n                });\r\n                if (ref) {\r\n                    context.assign(ref, xObject);\r\n                    return [2 /*return*/, ref];\r\n                }\r\n                else {\r\n                    return [2 /*return*/, context.register(xObject)];\r\n                }\r\n                return [2 /*return*/];\r\n            });\r\n        });\r\n    };\r\n    PngEmbedder.prototype.embedAlphaChannel = function (context) {\r\n        if (!this.image.alphaChannel)\r\n            return undefined;\r\n        var xObject = context.flateStream(this.image.alphaChannel, {\r\n            Type: 'XObject',\r\n            Subtype: 'Image',\r\n            Height: this.image.height,\r\n            Width: this.image.width,\r\n            BitsPerComponent: this.image.bitsPerComponent,\r\n            ColorSpace: 'DeviceGray',\r\n            Decode: [0, 1],\r\n        });\r\n        return context.register(xObject);\r\n    };\r\n    return PngEmbedder;\r\n}());\r\nexport default PngEmbedder;\r\n//# sourceMappingURL=PngEmbedder.js.map"]},"metadata":{},"sourceType":"module"}