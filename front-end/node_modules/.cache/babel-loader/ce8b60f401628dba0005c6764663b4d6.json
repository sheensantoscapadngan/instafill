{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { PDFName, PDFArray, PDFDict, PDFHexString } from \"../core\";\n/**\n * Represents a file that has been embedded in a [[PDFDocument]].\n */\n\nvar PDFEmbeddedFile =\n/** @class */\nfunction () {\n  function PDFEmbeddedFile(ref, doc, embedder) {\n    this.alreadyEmbedded = false;\n    this.ref = ref;\n    this.doc = doc;\n    this.embedder = embedder;\n  }\n  /**\n   * > **NOTE:** You probably don't need to call this method directly. The\n   * > [[PDFDocument.save]] and [[PDFDocument.saveAsBase64]] methods will\n   * > automatically ensure all embeddable files get embedded.\n   *\n   * Embed this embeddable file in its document.\n   *\n   * @returns Resolves when the embedding is complete.\n   */\n\n\n  PDFEmbeddedFile.prototype.embed = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var ref, Names, EmbeddedFiles, EFNames, AF;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!this.alreadyEmbedded) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.embedder.embedIntoContext(this.doc.context, this.ref)];\n\n          case 1:\n            ref = _a.sent();\n\n            if (!this.doc.catalog.has(PDFName.of('Names'))) {\n              this.doc.catalog.set(PDFName.of('Names'), this.doc.context.obj({}));\n            }\n\n            Names = this.doc.catalog.lookup(PDFName.of('Names'), PDFDict);\n\n            if (!Names.has(PDFName.of('EmbeddedFiles'))) {\n              Names.set(PDFName.of('EmbeddedFiles'), this.doc.context.obj({}));\n            }\n\n            EmbeddedFiles = Names.lookup(PDFName.of('EmbeddedFiles'), PDFDict);\n\n            if (!EmbeddedFiles.has(PDFName.of('Names'))) {\n              EmbeddedFiles.set(PDFName.of('Names'), this.doc.context.obj([]));\n            }\n\n            EFNames = EmbeddedFiles.lookup(PDFName.of('Names'), PDFArray);\n            EFNames.push(PDFHexString.fromText(this.embedder.fileName));\n            EFNames.push(ref);\n            /**\n             * The AF-Tag is needed to achieve PDF-A3 compliance for embedded files\n             *\n             * The following document outlines the uses cases of the associated files (AF) tag.\n             * See:\n             * https://www.pdfa.org/wp-content/uploads/2018/10/PDF20_AN002-AF.pdf\n             */\n\n            if (!this.doc.catalog.has(PDFName.of('AF'))) {\n              this.doc.catalog.set(PDFName.of('AF'), this.doc.context.obj([]));\n            }\n\n            AF = this.doc.catalog.lookup(PDFName.of('AF'), PDFArray);\n            AF.push(ref);\n            this.alreadyEmbedded = true;\n            _a.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFDocument.attach]] method, which will create\n   * instances of [[PDFEmbeddedFile]] for you.\n   *\n   * Create an instance of [[PDFEmbeddedFile]] from an existing ref and embedder\n   *\n   * @param ref The unique reference for this file.\n   * @param doc The document to which the file will belong.\n   * @param embedder The embedder that will be used to embed the file.\n   */\n\n\n  PDFEmbeddedFile.of = function (ref, doc, embedder) {\n    return new PDFEmbeddedFile(ref, doc, embedder);\n  };\n\n  return PDFEmbeddedFile;\n}();\n\nexport default PDFEmbeddedFile;","map":{"version":3,"sources":["../../src/api/PDFEmbeddedFile.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __awaiter, __generator } from \"tslib\";\nimport { PDFName, PDFArray, PDFDict, PDFHexString } from \"../core\";\n/**\n * Represents a file that has been embedded in a [[PDFDocument]].\n */\nvar PDFEmbeddedFile = /** @class */ (function () {\n    function PDFEmbeddedFile(ref, doc, embedder) {\n        this.alreadyEmbedded = false;\n        this.ref = ref;\n        this.doc = doc;\n        this.embedder = embedder;\n    }\n    /**\n     * > **NOTE:** You probably don't need to call this method directly. The\n     * > [[PDFDocument.save]] and [[PDFDocument.saveAsBase64]] methods will\n     * > automatically ensure all embeddable files get embedded.\n     *\n     * Embed this embeddable file in its document.\n     *\n     * @returns Resolves when the embedding is complete.\n     */\n    PDFEmbeddedFile.prototype.embed = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var ref, Names, EmbeddedFiles, EFNames, AF;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!!this.alreadyEmbedded) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.embedder.embedIntoContext(this.doc.context, this.ref)];\n                    case 1:\n                        ref = _a.sent();\n                        if (!this.doc.catalog.has(PDFName.of('Names'))) {\n                            this.doc.catalog.set(PDFName.of('Names'), this.doc.context.obj({}));\n                        }\n                        Names = this.doc.catalog.lookup(PDFName.of('Names'), PDFDict);\n                        if (!Names.has(PDFName.of('EmbeddedFiles'))) {\n                            Names.set(PDFName.of('EmbeddedFiles'), this.doc.context.obj({}));\n                        }\n                        EmbeddedFiles = Names.lookup(PDFName.of('EmbeddedFiles'), PDFDict);\n                        if (!EmbeddedFiles.has(PDFName.of('Names'))) {\n                            EmbeddedFiles.set(PDFName.of('Names'), this.doc.context.obj([]));\n                        }\n                        EFNames = EmbeddedFiles.lookup(PDFName.of('Names'), PDFArray);\n                        EFNames.push(PDFHexString.fromText(this.embedder.fileName));\n                        EFNames.push(ref);\n                        /**\n                         * The AF-Tag is needed to achieve PDF-A3 compliance for embedded files\n                         *\n                         * The following document outlines the uses cases of the associated files (AF) tag.\n                         * See:\n                         * https://www.pdfa.org/wp-content/uploads/2018/10/PDF20_AN002-AF.pdf\n                         */\n                        if (!this.doc.catalog.has(PDFName.of('AF'))) {\n                            this.doc.catalog.set(PDFName.of('AF'), this.doc.context.obj([]));\n                        }\n                        AF = this.doc.catalog.lookup(PDFName.of('AF'), PDFArray);\n                        AF.push(ref);\n                        this.alreadyEmbedded = true;\n                        _a.label = 2;\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * > **NOTE:** You probably don't want to call this method directly. Instead,\n     * > consider using the [[PDFDocument.attach]] method, which will create\n     * instances of [[PDFEmbeddedFile]] for you.\n     *\n     * Create an instance of [[PDFEmbeddedFile]] from an existing ref and embedder\n     *\n     * @param ref The unique reference for this file.\n     * @param doc The document to which the file will belong.\n     * @param embedder The embedder that will be used to embed the file.\n     */\n    PDFEmbeddedFile.of = function (ref, doc, embedder) {\n        return new PDFEmbeddedFile(ref, doc, embedder);\n    };\n    return PDFEmbeddedFile;\n}());\nexport default PDFEmbeddedFile;\n//# sourceMappingURL=PDFEmbeddedFile.js.map"]},"metadata":{},"sourceType":"module"}