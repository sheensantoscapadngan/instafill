{"ast":null,"code":"import { degrees, PDFDocument, rgb, StandardFonts } from 'pdf-lib';\n\nfunction downloadPdf(bytes) {\n  var blob = new Blob([bytes], {\n    type: \"application/pdf\"\n  });\n  var link = document.createElement('a');\n  link.href = window.URL.createObjectURL(blob);\n  link.download = \"edited.pdf\";\n  link.click();\n}\n\nasync function modifyPdf(bytes, position_dicts) {\n  position_dicts = {\n    0: {\n      'filled': {\n        'name': {\n          'position': ((0, 0), (50, 0)),\n          'value': 'carabao'\n        }\n      },\n      'not_filled': [((x1, y1), x2, y2), ((x3, y3), (x4, y4))]\n    }\n  };\n  const existingPdfBytes = bytes;\n  const pdfDoc = await PDFDocument.load(existingPdfBytes);\n  const helveticaFont = await pdfDoc.embedFont(StandardFonts.Helvetica);\n  const pages = pdfDoc.getPages();\n  const {\n    width,\n    height\n  } = firstPage.getSize();\n  console.log(\"WIDTH AND HEIGHT:\", width, \",\", height);\n  firstPage.drawText('This text was added with JavaScript!', {\n    x: 5,\n    y: height / 2 + 300,\n    size: 12,\n    font: helveticaFont\n  });\n  const pdfBytes = await pdfDoc.save();\n  downloadPdf(pdfBytes);\n}\n\nexport function preprocessPdf(file, position_dicts) {\n  let reader = new FileReader();\n  reader.readAsArrayBuffer(file);\n\n  reader.onload = () => {\n    modifyPdf(reader.result);\n  };\n}","map":{"version":3,"sources":["E:/PROJECTS/instafill_local/instafill/front-end/src/pdflib/processPdf.js"],"names":["degrees","PDFDocument","rgb","StandardFonts","downloadPdf","bytes","blob","Blob","type","link","document","createElement","href","window","URL","createObjectURL","download","click","modifyPdf","position_dicts","x1","y1","x2","y2","x3","y3","x4","y4","existingPdfBytes","pdfDoc","load","helveticaFont","embedFont","Helvetica","pages","getPages","width","height","firstPage","getSize","console","log","drawText","x","y","size","font","pdfBytes","save","preprocessPdf","file","reader","FileReader","readAsArrayBuffer","onload","result"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,WAAlB,EAA+BC,GAA/B,EAAoCC,aAApC,QAAyD,SAAzD;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA2B;AACzB,MAAIC,IAAI,GAAC,IAAIC,IAAJ,CAAS,CAACF,KAAD,CAAT,EAAkB;AAACG,IAAAA,IAAI,EAAE;AAAP,GAAlB,CAAT;AACA,MAAIC,IAAI,GAACC,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAT;AACAF,EAAAA,IAAI,CAACG,IAAL,GAAUC,MAAM,CAACC,GAAP,CAAWC,eAAX,CAA2BT,IAA3B,CAAV;AACAG,EAAAA,IAAI,CAACO,QAAL,GAAc,YAAd;AACAP,EAAAA,IAAI,CAACQ,KAAL;AACD;;AAED,eAAeC,SAAf,CAAyBb,KAAzB,EAA+Bc,cAA/B,EAA+C;AAG7CA,EAAAA,cAAc,GAAG;AACb,OAAE;AACA,gBAAS;AACP,gBAAO;AACL,uBAAY,CAAC,GAAE,CAAH,IAAO,IAAG,CAAV,CAAZ,CADK;AAEL,mBAAS;AAFJ;AADA,OADT;AAOA,oBAAa,EAAE,CAACC,EAAE,EAACC,EAAJ,GAAQC,EAAR,EAAWC,EAAb,IAAkB,CAACC,EAAE,EAACC,EAAJ,IAASC,EAAE,EAACC,EAAZ,CAAlB;AAPb;AADW,GAAjB;AAYA,QAAMC,gBAAgB,GAAGvB,KAAzB;AAEA,QAAMwB,MAAM,GAAG,MAAM5B,WAAW,CAAC6B,IAAZ,CAAiBF,gBAAjB,CAArB;AACA,QAAMG,aAAa,GAAG,MAAMF,MAAM,CAACG,SAAP,CAAiB7B,aAAa,CAAC8B,SAA/B,CAA5B;AAEA,QAAMC,KAAK,GAAGL,MAAM,CAACM,QAAP,EAAd;AACA,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAoBC,SAAS,CAACC,OAAV,EAA1B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAgCL,KAAhC,EAAsC,GAAtC,EAA0CC,MAA1C;AAKAC,EAAAA,SAAS,CAACI,QAAV,CAAmB,sCAAnB,EAA2D;AACzDC,IAAAA,CAAC,EAAE,CADsD;AAEzDC,IAAAA,CAAC,EAAEP,MAAM,GAAG,CAAT,GAAa,GAFyC;AAGzDQ,IAAAA,IAAI,EAAE,EAHmD;AAIzDC,IAAAA,IAAI,EAAEf;AAJmD,GAA3D;AAOA,QAAMgB,QAAQ,GAAG,MAAMlB,MAAM,CAACmB,IAAP,EAAvB;AACA5C,EAAAA,WAAW,CAAC2C,QAAD,CAAX;AACD;;AAED,OAAO,SAASE,aAAT,CAAuBC,IAAvB,EAA4B/B,cAA5B,EAA2C;AAChD,MAAIgC,MAAM,GAAG,IAAIC,UAAJ,EAAb;AACAD,EAAAA,MAAM,CAACE,iBAAP,CAAyBH,IAAzB;;AAEAC,EAAAA,MAAM,CAACG,MAAP,GAAgB,MAAI;AAClBpC,IAAAA,SAAS,CAACiC,MAAM,CAACI,MAAR,CAAT;AACD,GAFD;AAGD","sourcesContent":["import { degrees, PDFDocument, rgb, StandardFonts } from 'pdf-lib';\r\n\r\nfunction downloadPdf(bytes){\r\n  var blob=new Blob([bytes], {type: \"application/pdf\"});\r\n  var link=document.createElement('a');\r\n  link.href=window.URL.createObjectURL(blob);\r\n  link.download=\"edited.pdf\";\r\n  link.click();\r\n}\r\n\r\nasync function modifyPdf(bytes,position_dicts) {\r\n\r\n\r\n  position_dicts = {\r\n      0:{\r\n        'filled':{\r\n          'name':{\r\n            'position':((0,0),(50,0)),\r\n            'value': 'carabao'\r\n          }\r\n        },\r\n        'not_filled':[((x1,y1),x2,y2),((x3,y3),(x4,y4))]\r\n      },\r\n  }\r\n\r\n  const existingPdfBytes = bytes\r\n\r\n  const pdfDoc = await PDFDocument.load(existingPdfBytes)\r\n  const helveticaFont = await pdfDoc.embedFont(StandardFonts.Helvetica)\r\n\r\n  const pages = pdfDoc.getPages()\r\n  const { width, height } = firstPage.getSize()\r\n  console.log(\"WIDTH AND HEIGHT:\",width,\",\",height)\r\n\r\n  \r\n\r\n\r\n  firstPage.drawText('This text was added with JavaScript!', {\r\n    x: 5,\r\n    y: height / 2 + 300,\r\n    size: 12,\r\n    font: helveticaFont,\r\n  })\r\n\r\n  const pdfBytes = await pdfDoc.save()\r\n  downloadPdf(pdfBytes)\r\n}\r\n \r\nexport function preprocessPdf(file,position_dicts){\r\n  let reader = new FileReader()\r\n  reader.readAsArrayBuffer(file)\r\n\r\n  reader.onload = ()=>{\r\n    modifyPdf(reader.result)\r\n  }\r\n} \r\n  "]},"metadata":{},"sourceType":"module"}