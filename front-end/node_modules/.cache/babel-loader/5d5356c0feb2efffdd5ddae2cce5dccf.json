{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFRef from \"../objects/PDFRef\";\nimport PDFFlateStream from \"./PDFFlateStream\";\nimport { bytesFor, Cache, reverseArray, sizeInBytes, sum } from \"../../utils\";\nexport var EntryType;\n\n(function (EntryType) {\n  EntryType[EntryType[\"Deleted\"] = 0] = \"Deleted\";\n  EntryType[EntryType[\"Uncompressed\"] = 1] = \"Uncompressed\";\n  EntryType[EntryType[\"Compressed\"] = 2] = \"Compressed\";\n})(EntryType || (EntryType = {}));\n/**\n * Entries should be added using the [[addDeletedEntry]],\n * [[addUncompressedEntry]], and [[addCompressedEntry]] methods\n * **in order of ascending object number**.\n */\n\n\nvar PDFCrossRefStream =\n/** @class */\nfunction (_super) {\n  __extends(PDFCrossRefStream, _super);\n\n  function PDFCrossRefStream(dict, entries, encode) {\n    if (encode === void 0) {\n      encode = true;\n    }\n\n    var _this = _super.call(this, dict, encode) || this; // Returns an array of integer pairs for each subsection of the cross ref\n    // section, where each integer pair represents:\n    //   firstObjectNumber(OfSection), length(OfSection)\n\n\n    _this.computeIndex = function () {\n      var subsections = [];\n      var subsectionLength = 0;\n\n      for (var idx = 0, len = _this.entries.length; idx < len; idx++) {\n        var currEntry = _this.entries[idx];\n        var prevEntry = _this.entries[idx - 1];\n\n        if (idx === 0) {\n          subsections.push(currEntry.ref.objectNumber);\n        } else if (currEntry.ref.objectNumber - prevEntry.ref.objectNumber > 1) {\n          subsections.push(subsectionLength);\n          subsections.push(currEntry.ref.objectNumber);\n          subsectionLength = 0;\n        }\n\n        subsectionLength += 1;\n      }\n\n      subsections.push(subsectionLength);\n      return subsections;\n    };\n\n    _this.computeEntryTuples = function () {\n      var entryTuples = new Array(_this.entries.length);\n\n      for (var idx = 0, len = _this.entries.length; idx < len; idx++) {\n        var entry = _this.entries[idx];\n\n        if (entry.type === EntryType.Deleted) {\n          var type = entry.type,\n              nextFreeObjectNumber = entry.nextFreeObjectNumber,\n              ref = entry.ref;\n          entryTuples[idx] = [type, nextFreeObjectNumber, ref.generationNumber];\n        }\n\n        if (entry.type === EntryType.Uncompressed) {\n          var type = entry.type,\n              offset = entry.offset,\n              ref = entry.ref;\n          entryTuples[idx] = [type, offset, ref.generationNumber];\n        }\n\n        if (entry.type === EntryType.Compressed) {\n          var type = entry.type,\n              objectStreamRef = entry.objectStreamRef,\n              index = entry.index;\n          entryTuples[idx] = [type, objectStreamRef.objectNumber, index];\n        }\n      }\n\n      return entryTuples;\n    };\n\n    _this.computeMaxEntryByteWidths = function () {\n      var entryTuples = _this.entryTuplesCache.access();\n\n      var widths = [0, 0, 0];\n\n      for (var idx = 0, len = entryTuples.length; idx < len; idx++) {\n        var _a = entryTuples[idx],\n            first = _a[0],\n            second = _a[1],\n            third = _a[2];\n        var firstSize = sizeInBytes(first);\n        var secondSize = sizeInBytes(second);\n        var thirdSize = sizeInBytes(third);\n        if (firstSize > widths[0]) widths[0] = firstSize;\n        if (secondSize > widths[1]) widths[1] = secondSize;\n        if (thirdSize > widths[2]) widths[2] = thirdSize;\n      }\n\n      return widths;\n    };\n\n    _this.entries = entries || [];\n    _this.entryTuplesCache = Cache.populatedBy(_this.computeEntryTuples);\n    _this.maxByteWidthsCache = Cache.populatedBy(_this.computeMaxEntryByteWidths);\n    _this.indexCache = Cache.populatedBy(_this.computeIndex);\n    dict.set(PDFName.of('Type'), PDFName.of('XRef'));\n    return _this;\n  }\n\n  PDFCrossRefStream.prototype.addDeletedEntry = function (ref, nextFreeObjectNumber) {\n    var type = EntryType.Deleted;\n    this.entries.push({\n      type: type,\n      ref: ref,\n      nextFreeObjectNumber: nextFreeObjectNumber\n    });\n    this.entryTuplesCache.invalidate();\n    this.maxByteWidthsCache.invalidate();\n    this.indexCache.invalidate();\n    this.contentsCache.invalidate();\n  };\n\n  PDFCrossRefStream.prototype.addUncompressedEntry = function (ref, offset) {\n    var type = EntryType.Uncompressed;\n    this.entries.push({\n      type: type,\n      ref: ref,\n      offset: offset\n    });\n    this.entryTuplesCache.invalidate();\n    this.maxByteWidthsCache.invalidate();\n    this.indexCache.invalidate();\n    this.contentsCache.invalidate();\n  };\n\n  PDFCrossRefStream.prototype.addCompressedEntry = function (ref, objectStreamRef, index) {\n    var type = EntryType.Compressed;\n    this.entries.push({\n      type: type,\n      ref: ref,\n      objectStreamRef: objectStreamRef,\n      index: index\n    });\n    this.entryTuplesCache.invalidate();\n    this.maxByteWidthsCache.invalidate();\n    this.indexCache.invalidate();\n    this.contentsCache.invalidate();\n  };\n\n  PDFCrossRefStream.prototype.clone = function (context) {\n    var _a = this,\n        dict = _a.dict,\n        entries = _a.entries,\n        encode = _a.encode;\n\n    return PDFCrossRefStream.of(dict.clone(context), entries.slice(), encode);\n  };\n\n  PDFCrossRefStream.prototype.getContentsString = function () {\n    var entryTuples = this.entryTuplesCache.access();\n    var byteWidths = this.maxByteWidthsCache.access();\n    var value = '';\n\n    for (var entryIdx = 0, entriesLen = entryTuples.length; entryIdx < entriesLen; entryIdx++) {\n      var _a = entryTuples[entryIdx],\n          first = _a[0],\n          second = _a[1],\n          third = _a[2];\n      var firstBytes = reverseArray(bytesFor(first));\n      var secondBytes = reverseArray(bytesFor(second));\n      var thirdBytes = reverseArray(bytesFor(third));\n\n      for (var idx = byteWidths[0] - 1; idx >= 0; idx--) {\n        value += (firstBytes[idx] || 0).toString(2);\n      }\n\n      for (var idx = byteWidths[1] - 1; idx >= 0; idx--) {\n        value += (secondBytes[idx] || 0).toString(2);\n      }\n\n      for (var idx = byteWidths[2] - 1; idx >= 0; idx--) {\n        value += (thirdBytes[idx] || 0).toString(2);\n      }\n    }\n\n    return value;\n  };\n\n  PDFCrossRefStream.prototype.getUnencodedContents = function () {\n    var entryTuples = this.entryTuplesCache.access();\n    var byteWidths = this.maxByteWidthsCache.access();\n    var buffer = new Uint8Array(this.getUnencodedContentsSize());\n    var offset = 0;\n\n    for (var entryIdx = 0, entriesLen = entryTuples.length; entryIdx < entriesLen; entryIdx++) {\n      var _a = entryTuples[entryIdx],\n          first = _a[0],\n          second = _a[1],\n          third = _a[2];\n      var firstBytes = reverseArray(bytesFor(first));\n      var secondBytes = reverseArray(bytesFor(second));\n      var thirdBytes = reverseArray(bytesFor(third));\n\n      for (var idx = byteWidths[0] - 1; idx >= 0; idx--) {\n        buffer[offset++] = firstBytes[idx] || 0;\n      }\n\n      for (var idx = byteWidths[1] - 1; idx >= 0; idx--) {\n        buffer[offset++] = secondBytes[idx] || 0;\n      }\n\n      for (var idx = byteWidths[2] - 1; idx >= 0; idx--) {\n        buffer[offset++] = thirdBytes[idx] || 0;\n      }\n    }\n\n    return buffer;\n  };\n\n  PDFCrossRefStream.prototype.getUnencodedContentsSize = function () {\n    var byteWidths = this.maxByteWidthsCache.access();\n    var entryWidth = sum(byteWidths);\n    return entryWidth * this.entries.length;\n  };\n\n  PDFCrossRefStream.prototype.updateDict = function () {\n    _super.prototype.updateDict.call(this);\n\n    var byteWidths = this.maxByteWidthsCache.access();\n    var index = this.indexCache.access();\n    var context = this.dict.context;\n    this.dict.set(PDFName.of('W'), context.obj(byteWidths));\n    this.dict.set(PDFName.of('Index'), context.obj(index));\n  };\n\n  PDFCrossRefStream.create = function (dict, encode) {\n    if (encode === void 0) {\n      encode = true;\n    }\n\n    var stream = new PDFCrossRefStream(dict, [], encode);\n    stream.addDeletedEntry(PDFRef.of(0, 65535), 0);\n    return stream;\n  };\n\n  PDFCrossRefStream.of = function (dict, entries, encode) {\n    if (encode === void 0) {\n      encode = true;\n    }\n\n    return new PDFCrossRefStream(dict, entries, encode);\n  };\n\n  return PDFCrossRefStream;\n}(PDFFlateStream);\n\nexport default PDFCrossRefStream;","map":{"version":3,"sources":["../../../src/core/structures/PDFCrossRefStream.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFRef from \"../objects/PDFRef\";\nimport PDFFlateStream from \"./PDFFlateStream\";\nimport { bytesFor, Cache, reverseArray, sizeInBytes, sum } from \"../../utils\";\nexport var EntryType;\n(function (EntryType) {\n    EntryType[EntryType[\"Deleted\"] = 0] = \"Deleted\";\n    EntryType[EntryType[\"Uncompressed\"] = 1] = \"Uncompressed\";\n    EntryType[EntryType[\"Compressed\"] = 2] = \"Compressed\";\n})(EntryType || (EntryType = {}));\n/**\n * Entries should be added using the [[addDeletedEntry]],\n * [[addUncompressedEntry]], and [[addCompressedEntry]] methods\n * **in order of ascending object number**.\n */\nvar PDFCrossRefStream = /** @class */ (function (_super) {\n    __extends(PDFCrossRefStream, _super);\n    function PDFCrossRefStream(dict, entries, encode) {\n        if (encode === void 0) { encode = true; }\n        var _this = _super.call(this, dict, encode) || this;\n        // Returns an array of integer pairs for each subsection of the cross ref\n        // section, where each integer pair represents:\n        //   firstObjectNumber(OfSection), length(OfSection)\n        _this.computeIndex = function () {\n            var subsections = [];\n            var subsectionLength = 0;\n            for (var idx = 0, len = _this.entries.length; idx < len; idx++) {\n                var currEntry = _this.entries[idx];\n                var prevEntry = _this.entries[idx - 1];\n                if (idx === 0) {\n                    subsections.push(currEntry.ref.objectNumber);\n                }\n                else if (currEntry.ref.objectNumber - prevEntry.ref.objectNumber > 1) {\n                    subsections.push(subsectionLength);\n                    subsections.push(currEntry.ref.objectNumber);\n                    subsectionLength = 0;\n                }\n                subsectionLength += 1;\n            }\n            subsections.push(subsectionLength);\n            return subsections;\n        };\n        _this.computeEntryTuples = function () {\n            var entryTuples = new Array(_this.entries.length);\n            for (var idx = 0, len = _this.entries.length; idx < len; idx++) {\n                var entry = _this.entries[idx];\n                if (entry.type === EntryType.Deleted) {\n                    var type = entry.type, nextFreeObjectNumber = entry.nextFreeObjectNumber, ref = entry.ref;\n                    entryTuples[idx] = [type, nextFreeObjectNumber, ref.generationNumber];\n                }\n                if (entry.type === EntryType.Uncompressed) {\n                    var type = entry.type, offset = entry.offset, ref = entry.ref;\n                    entryTuples[idx] = [type, offset, ref.generationNumber];\n                }\n                if (entry.type === EntryType.Compressed) {\n                    var type = entry.type, objectStreamRef = entry.objectStreamRef, index = entry.index;\n                    entryTuples[idx] = [type, objectStreamRef.objectNumber, index];\n                }\n            }\n            return entryTuples;\n        };\n        _this.computeMaxEntryByteWidths = function () {\n            var entryTuples = _this.entryTuplesCache.access();\n            var widths = [0, 0, 0];\n            for (var idx = 0, len = entryTuples.length; idx < len; idx++) {\n                var _a = entryTuples[idx], first = _a[0], second = _a[1], third = _a[2];\n                var firstSize = sizeInBytes(first);\n                var secondSize = sizeInBytes(second);\n                var thirdSize = sizeInBytes(third);\n                if (firstSize > widths[0])\n                    widths[0] = firstSize;\n                if (secondSize > widths[1])\n                    widths[1] = secondSize;\n                if (thirdSize > widths[2])\n                    widths[2] = thirdSize;\n            }\n            return widths;\n        };\n        _this.entries = entries || [];\n        _this.entryTuplesCache = Cache.populatedBy(_this.computeEntryTuples);\n        _this.maxByteWidthsCache = Cache.populatedBy(_this.computeMaxEntryByteWidths);\n        _this.indexCache = Cache.populatedBy(_this.computeIndex);\n        dict.set(PDFName.of('Type'), PDFName.of('XRef'));\n        return _this;\n    }\n    PDFCrossRefStream.prototype.addDeletedEntry = function (ref, nextFreeObjectNumber) {\n        var type = EntryType.Deleted;\n        this.entries.push({ type: type, ref: ref, nextFreeObjectNumber: nextFreeObjectNumber });\n        this.entryTuplesCache.invalidate();\n        this.maxByteWidthsCache.invalidate();\n        this.indexCache.invalidate();\n        this.contentsCache.invalidate();\n    };\n    PDFCrossRefStream.prototype.addUncompressedEntry = function (ref, offset) {\n        var type = EntryType.Uncompressed;\n        this.entries.push({ type: type, ref: ref, offset: offset });\n        this.entryTuplesCache.invalidate();\n        this.maxByteWidthsCache.invalidate();\n        this.indexCache.invalidate();\n        this.contentsCache.invalidate();\n    };\n    PDFCrossRefStream.prototype.addCompressedEntry = function (ref, objectStreamRef, index) {\n        var type = EntryType.Compressed;\n        this.entries.push({ type: type, ref: ref, objectStreamRef: objectStreamRef, index: index });\n        this.entryTuplesCache.invalidate();\n        this.maxByteWidthsCache.invalidate();\n        this.indexCache.invalidate();\n        this.contentsCache.invalidate();\n    };\n    PDFCrossRefStream.prototype.clone = function (context) {\n        var _a = this, dict = _a.dict, entries = _a.entries, encode = _a.encode;\n        return PDFCrossRefStream.of(dict.clone(context), entries.slice(), encode);\n    };\n    PDFCrossRefStream.prototype.getContentsString = function () {\n        var entryTuples = this.entryTuplesCache.access();\n        var byteWidths = this.maxByteWidthsCache.access();\n        var value = '';\n        for (var entryIdx = 0, entriesLen = entryTuples.length; entryIdx < entriesLen; entryIdx++) {\n            var _a = entryTuples[entryIdx], first = _a[0], second = _a[1], third = _a[2];\n            var firstBytes = reverseArray(bytesFor(first));\n            var secondBytes = reverseArray(bytesFor(second));\n            var thirdBytes = reverseArray(bytesFor(third));\n            for (var idx = byteWidths[0] - 1; idx >= 0; idx--) {\n                value += (firstBytes[idx] || 0).toString(2);\n            }\n            for (var idx = byteWidths[1] - 1; idx >= 0; idx--) {\n                value += (secondBytes[idx] || 0).toString(2);\n            }\n            for (var idx = byteWidths[2] - 1; idx >= 0; idx--) {\n                value += (thirdBytes[idx] || 0).toString(2);\n            }\n        }\n        return value;\n    };\n    PDFCrossRefStream.prototype.getUnencodedContents = function () {\n        var entryTuples = this.entryTuplesCache.access();\n        var byteWidths = this.maxByteWidthsCache.access();\n        var buffer = new Uint8Array(this.getUnencodedContentsSize());\n        var offset = 0;\n        for (var entryIdx = 0, entriesLen = entryTuples.length; entryIdx < entriesLen; entryIdx++) {\n            var _a = entryTuples[entryIdx], first = _a[0], second = _a[1], third = _a[2];\n            var firstBytes = reverseArray(bytesFor(first));\n            var secondBytes = reverseArray(bytesFor(second));\n            var thirdBytes = reverseArray(bytesFor(third));\n            for (var idx = byteWidths[0] - 1; idx >= 0; idx--) {\n                buffer[offset++] = firstBytes[idx] || 0;\n            }\n            for (var idx = byteWidths[1] - 1; idx >= 0; idx--) {\n                buffer[offset++] = secondBytes[idx] || 0;\n            }\n            for (var idx = byteWidths[2] - 1; idx >= 0; idx--) {\n                buffer[offset++] = thirdBytes[idx] || 0;\n            }\n        }\n        return buffer;\n    };\n    PDFCrossRefStream.prototype.getUnencodedContentsSize = function () {\n        var byteWidths = this.maxByteWidthsCache.access();\n        var entryWidth = sum(byteWidths);\n        return entryWidth * this.entries.length;\n    };\n    PDFCrossRefStream.prototype.updateDict = function () {\n        _super.prototype.updateDict.call(this);\n        var byteWidths = this.maxByteWidthsCache.access();\n        var index = this.indexCache.access();\n        var context = this.dict.context;\n        this.dict.set(PDFName.of('W'), context.obj(byteWidths));\n        this.dict.set(PDFName.of('Index'), context.obj(index));\n    };\n    PDFCrossRefStream.create = function (dict, encode) {\n        if (encode === void 0) { encode = true; }\n        var stream = new PDFCrossRefStream(dict, [], encode);\n        stream.addDeletedEntry(PDFRef.of(0, 65535), 0);\n        return stream;\n    };\n    PDFCrossRefStream.of = function (dict, entries, encode) {\n        if (encode === void 0) { encode = true; }\n        return new PDFCrossRefStream(dict, entries, encode);\n    };\n    return PDFCrossRefStream;\n}(PDFFlateStream));\nexport default PDFCrossRefStream;\n//# sourceMappingURL=PDFCrossRefStream.js.map"]},"metadata":{},"sourceType":"module"}