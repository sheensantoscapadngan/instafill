{"ast":null,"code":"import { degrees, PDFDocument, rgb, StandardFonts } from 'pdf-lib';\n\nfunction downloadPdf(bytes) {\n  var blob = new Blob([bytes], {\n    type: \"application/pdf\"\n  });\n  var link = document.createElement('a');\n  link.href = window.URL.createObjectURL(blob);\n  link.download = \"edited.pdf\";\n  link.click();\n}\n\nasync function modifyPdf(bytes, position_dicts) {\n  position_dicts = {\n    0: [{\n      position: (10, 10),\n      value: \"carabao\"\n    }]\n  };\n  const existingPdfBytes = bytes;\n  const pdfDoc = await PDFDocument.load(existingPdfBytes);\n  const helveticaFont = await pdfDoc.embedFont(StandardFonts.Helvetica);\n  const pages = pdfDoc.getPages();\n  const {\n    width,\n    height\n  } = firstPage.getSize();\n  console.log(\"WIDTH AND HEIGHT:\", width, \",\", height);\n\n  for (var page_number in position_dicts) {\n    fill_objects = position_dicts[page_number];\n\n    for (var fill_object in fill_objects) {\n      page = pages[page_number];\n      value = fill_object['value'];\n      position = fill_object['position'];\n    }\n\n    console.log(\"FILL OBJECTS ARE\", fill_objects);\n  }\n\n  firstPage.drawText('This text was added with JavaScript!', {\n    x: 5,\n    y: height / 2 + 300,\n    size: 12,\n    font: helveticaFont\n  });\n  const pdfBytes = await pdfDoc.save();\n  downloadPdf(pdfBytes);\n}\n\nexport function preprocessPdf(file, position_dicts) {\n  let reader = new FileReader();\n  reader.readAsArrayBuffer(file);\n\n  reader.onload = () => {\n    modifyPdf(reader.result);\n  };\n}","map":{"version":3,"sources":["E:/PROJECTS/instafill_local/instafill/front-end/src/pdflib/processPdf.js"],"names":["degrees","PDFDocument","rgb","StandardFonts","downloadPdf","bytes","blob","Blob","type","link","document","createElement","href","window","URL","createObjectURL","download","click","modifyPdf","position_dicts","position","value","existingPdfBytes","pdfDoc","load","helveticaFont","embedFont","Helvetica","pages","getPages","width","height","firstPage","getSize","console","log","page_number","fill_objects","fill_object","page","drawText","x","y","size","font","pdfBytes","save","preprocessPdf","file","reader","FileReader","readAsArrayBuffer","onload","result"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,WAAlB,EAA+BC,GAA/B,EAAoCC,aAApC,QAAyD,SAAzD;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA2B;AACzB,MAAIC,IAAI,GAAC,IAAIC,IAAJ,CAAS,CAACF,KAAD,CAAT,EAAkB;AAACG,IAAAA,IAAI,EAAE;AAAP,GAAlB,CAAT;AACA,MAAIC,IAAI,GAACC,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAT;AACAF,EAAAA,IAAI,CAACG,IAAL,GAAUC,MAAM,CAACC,GAAP,CAAWC,eAAX,CAA2BT,IAA3B,CAAV;AACAG,EAAAA,IAAI,CAACO,QAAL,GAAc,YAAd;AACAP,EAAAA,IAAI,CAACQ,KAAL;AACD;;AAED,eAAeC,SAAf,CAAyBb,KAAzB,EAA+Bc,cAA/B,EAA+C;AAE7CA,EAAAA,cAAc,GAAG;AACb,OAAE,CAAC;AAACC,MAAAA,QAAQ,GAAE,IAAG,EAAL,CAAT;AAAkBC,MAAAA,KAAK,EAAC;AAAxB,KAAD;AADW,GAAjB;AAIA,QAAMC,gBAAgB,GAAGjB,KAAzB;AAEA,QAAMkB,MAAM,GAAG,MAAMtB,WAAW,CAACuB,IAAZ,CAAiBF,gBAAjB,CAArB;AACA,QAAMG,aAAa,GAAG,MAAMF,MAAM,CAACG,SAAP,CAAiBvB,aAAa,CAACwB,SAA/B,CAA5B;AAEA,QAAMC,KAAK,GAAGL,MAAM,CAACM,QAAP,EAAd;AACA,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAoBC,SAAS,CAACC,OAAV,EAA1B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAgCL,KAAhC,EAAsC,GAAtC,EAA0CC,MAA1C;;AAEA,OAAI,IAAIK,WAAR,IAAuBjB,cAAvB,EAAsC;AACpCkB,IAAAA,YAAY,GAAGlB,cAAc,CAACiB,WAAD,CAA7B;;AACA,SAAI,IAAIE,WAAR,IAAuBD,YAAvB,EAAoC;AAClCE,MAAAA,IAAI,GAAGX,KAAK,CAACQ,WAAD,CAAZ;AACAf,MAAAA,KAAK,GAAGiB,WAAW,CAAC,OAAD,CAAnB;AACAlB,MAAAA,QAAQ,GAAGkB,WAAW,CAAC,UAAD,CAAtB;AAED;;AACDJ,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAA+BE,YAA/B;AACD;;AAEDL,EAAAA,SAAS,CAACQ,QAAV,CAAmB,sCAAnB,EAA2D;AACzDC,IAAAA,CAAC,EAAE,CADsD;AAEzDC,IAAAA,CAAC,EAAEX,MAAM,GAAG,CAAT,GAAa,GAFyC;AAGzDY,IAAAA,IAAI,EAAE,EAHmD;AAIzDC,IAAAA,IAAI,EAAEnB;AAJmD,GAA3D;AAOA,QAAMoB,QAAQ,GAAG,MAAMtB,MAAM,CAACuB,IAAP,EAAvB;AACA1C,EAAAA,WAAW,CAACyC,QAAD,CAAX;AACD;;AAED,OAAO,SAASE,aAAT,CAAuBC,IAAvB,EAA4B7B,cAA5B,EAA2C;AAChD,MAAI8B,MAAM,GAAG,IAAIC,UAAJ,EAAb;AACAD,EAAAA,MAAM,CAACE,iBAAP,CAAyBH,IAAzB;;AAEAC,EAAAA,MAAM,CAACG,MAAP,GAAgB,MAAI;AAClBlC,IAAAA,SAAS,CAAC+B,MAAM,CAACI,MAAR,CAAT;AACD,GAFD;AAGD","sourcesContent":["import { degrees, PDFDocument, rgb, StandardFonts } from 'pdf-lib';\r\n\r\nfunction downloadPdf(bytes){\r\n  var blob=new Blob([bytes], {type: \"application/pdf\"});\r\n  var link=document.createElement('a');\r\n  link.href=window.URL.createObjectURL(blob);\r\n  link.download=\"edited.pdf\";\r\n  link.click();\r\n}\r\n\r\nasync function modifyPdf(bytes,position_dicts) {\r\n\r\n  position_dicts = {\r\n      0:[{position:(10,10),value:\"carabao\"}]\r\n  }\r\n\r\n  const existingPdfBytes = bytes\r\n\r\n  const pdfDoc = await PDFDocument.load(existingPdfBytes)\r\n  const helveticaFont = await pdfDoc.embedFont(StandardFonts.Helvetica)\r\n\r\n  const pages = pdfDoc.getPages()\r\n  const { width, height } = firstPage.getSize()\r\n  console.log(\"WIDTH AND HEIGHT:\",width,\",\",height)\r\n\r\n  for(var page_number in position_dicts){\r\n    fill_objects = position_dicts[page_number]\r\n    for(var fill_object in fill_objects){\r\n      page = pages[page_number]\r\n      value = fill_object['value']\r\n      position = fill_object['position']\r\n      \r\n    }\r\n    console.log(\"FILL OBJECTS ARE\",fill_objects)\r\n  }\r\n\r\n  firstPage.drawText('This text was added with JavaScript!', {\r\n    x: 5,\r\n    y: height / 2 + 300,\r\n    size: 12,\r\n    font: helveticaFont,\r\n  })\r\n\r\n  const pdfBytes = await pdfDoc.save()\r\n  downloadPdf(pdfBytes)\r\n}\r\n \r\nexport function preprocessPdf(file,position_dicts){\r\n  let reader = new FileReader()\r\n  reader.readAsArrayBuffer(file)\r\n\r\n  reader.onload = ()=>{\r\n    modifyPdf(reader.result)\r\n  }\r\n} \r\n  "]},"metadata":{},"sourceType":"module"}