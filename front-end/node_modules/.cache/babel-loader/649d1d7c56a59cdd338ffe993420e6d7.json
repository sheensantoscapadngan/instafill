{"ast":null,"code":"import UPNG from '@pdf-lib/upng';\n\nvar getImageType = function (ctype) {\n  if (ctype === 0) return PngType.Greyscale;\n  if (ctype === 2) return PngType.Truecolour;\n  if (ctype === 3) return PngType.IndexedColour;\n  if (ctype === 4) return PngType.GreyscaleWithAlpha;\n  if (ctype === 6) return PngType.TruecolourWithAlpha;\n  throw new Error(\"Unknown color type: \" + ctype);\n};\n\nvar splitAlphaChannel = function (rgbaChannel) {\n  var pixelCount = Math.floor(rgbaChannel.length / 4);\n  var rgbChannel = new Uint8Array(pixelCount * 3);\n  var alphaChannel = new Uint8Array(pixelCount * 1);\n  var rgbaOffset = 0;\n  var rgbOffset = 0;\n  var alphaOffset = 0;\n\n  while (rgbaOffset < rgbaChannel.length) {\n    rgbChannel[rgbOffset++] = rgbaChannel[rgbaOffset++];\n    rgbChannel[rgbOffset++] = rgbaChannel[rgbaOffset++];\n    rgbChannel[rgbOffset++] = rgbaChannel[rgbaOffset++];\n    alphaChannel[alphaOffset++] = rgbaChannel[rgbaOffset++];\n  }\n\n  return {\n    rgbChannel: rgbChannel,\n    alphaChannel: alphaChannel\n  };\n};\n\nexport var PngType;\n\n(function (PngType) {\n  PngType[\"Greyscale\"] = \"Greyscale\";\n  PngType[\"Truecolour\"] = \"Truecolour\";\n  PngType[\"IndexedColour\"] = \"IndexedColour\";\n  PngType[\"GreyscaleWithAlpha\"] = \"GreyscaleWithAlpha\";\n  PngType[\"TruecolourWithAlpha\"] = \"TruecolourWithAlpha\";\n})(PngType || (PngType = {}));\n\nvar PNG =\n/** @class */\nfunction () {\n  function PNG(pngData) {\n    var upng = UPNG.decode(pngData);\n    var frames = UPNG.toRGBA8(upng);\n    if (frames.length > 1) throw new Error(\"Animated PNGs are not supported\");\n    var frame = new Uint8Array(frames[0]);\n\n    var _a = splitAlphaChannel(frame),\n        rgbChannel = _a.rgbChannel,\n        alphaChannel = _a.alphaChannel;\n\n    this.rgbChannel = rgbChannel;\n    var hasAlphaValues = alphaChannel.some(function (a) {\n      return a < 255;\n    });\n    if (hasAlphaValues) this.alphaChannel = alphaChannel;\n    this.type = getImageType(upng.ctype);\n    this.width = upng.width;\n    this.height = upng.height;\n    this.bitsPerComponent = 8;\n  }\n\n  PNG.load = function (pngData) {\n    return new PNG(pngData);\n  };\n\n  return PNG;\n}();\n\nexport { PNG };","map":{"version":3,"sources":["../../src/utils/png.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import UPNG from '@pdf-lib/upng';\nvar getImageType = function (ctype) {\n    if (ctype === 0)\n        return PngType.Greyscale;\n    if (ctype === 2)\n        return PngType.Truecolour;\n    if (ctype === 3)\n        return PngType.IndexedColour;\n    if (ctype === 4)\n        return PngType.GreyscaleWithAlpha;\n    if (ctype === 6)\n        return PngType.TruecolourWithAlpha;\n    throw new Error(\"Unknown color type: \" + ctype);\n};\nvar splitAlphaChannel = function (rgbaChannel) {\n    var pixelCount = Math.floor(rgbaChannel.length / 4);\n    var rgbChannel = new Uint8Array(pixelCount * 3);\n    var alphaChannel = new Uint8Array(pixelCount * 1);\n    var rgbaOffset = 0;\n    var rgbOffset = 0;\n    var alphaOffset = 0;\n    while (rgbaOffset < rgbaChannel.length) {\n        rgbChannel[rgbOffset++] = rgbaChannel[rgbaOffset++];\n        rgbChannel[rgbOffset++] = rgbaChannel[rgbaOffset++];\n        rgbChannel[rgbOffset++] = rgbaChannel[rgbaOffset++];\n        alphaChannel[alphaOffset++] = rgbaChannel[rgbaOffset++];\n    }\n    return { rgbChannel: rgbChannel, alphaChannel: alphaChannel };\n};\nexport var PngType;\n(function (PngType) {\n    PngType[\"Greyscale\"] = \"Greyscale\";\n    PngType[\"Truecolour\"] = \"Truecolour\";\n    PngType[\"IndexedColour\"] = \"IndexedColour\";\n    PngType[\"GreyscaleWithAlpha\"] = \"GreyscaleWithAlpha\";\n    PngType[\"TruecolourWithAlpha\"] = \"TruecolourWithAlpha\";\n})(PngType || (PngType = {}));\nvar PNG = /** @class */ (function () {\n    function PNG(pngData) {\n        var upng = UPNG.decode(pngData);\n        var frames = UPNG.toRGBA8(upng);\n        if (frames.length > 1)\n            throw new Error(\"Animated PNGs are not supported\");\n        var frame = new Uint8Array(frames[0]);\n        var _a = splitAlphaChannel(frame), rgbChannel = _a.rgbChannel, alphaChannel = _a.alphaChannel;\n        this.rgbChannel = rgbChannel;\n        var hasAlphaValues = alphaChannel.some(function (a) { return a < 255; });\n        if (hasAlphaValues)\n            this.alphaChannel = alphaChannel;\n        this.type = getImageType(upng.ctype);\n        this.width = upng.width;\n        this.height = upng.height;\n        this.bitsPerComponent = 8;\n    }\n    PNG.load = function (pngData) { return new PNG(pngData); };\n    return PNG;\n}());\nexport { PNG };\n//# sourceMappingURL=png.js.map"]},"metadata":{},"sourceType":"module"}