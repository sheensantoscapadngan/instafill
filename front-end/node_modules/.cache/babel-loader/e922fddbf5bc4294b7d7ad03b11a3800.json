{"ast":null,"code":"import { decodeFromBase64DataUri } from \"./base64\";\nimport { charFromCode } from \"./strings\";\nexport var last = function (array) {\n  return array[array.length - 1];\n}; // export const dropLast = <T>(array: T[]): T[] =>\n// array.slice(0, array.length - 1);\n\nexport var typedArrayFor = function (value) {\n  if (value instanceof Uint8Array) return value;\n  var length = value.length;\n  var typedArray = new Uint8Array(length);\n\n  for (var idx = 0; idx < length; idx++) {\n    typedArray[idx] = value.charCodeAt(idx);\n  }\n\n  return typedArray;\n};\nexport var mergeIntoTypedArray = function () {\n  var arrays = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    arrays[_i] = arguments[_i];\n  }\n\n  var arrayCount = arrays.length;\n  var typedArrays = [];\n\n  for (var idx = 0; idx < arrayCount; idx++) {\n    var element = arrays[idx];\n    typedArrays[idx] = element instanceof Uint8Array ? element : typedArrayFor(element);\n  }\n\n  var totalSize = 0;\n\n  for (var idx = 0; idx < arrayCount; idx++) {\n    totalSize += arrays[idx].length;\n  }\n\n  var merged = new Uint8Array(totalSize);\n  var offset = 0;\n\n  for (var arrIdx = 0; arrIdx < arrayCount; arrIdx++) {\n    var arr = typedArrays[arrIdx];\n\n    for (var byteIdx = 0, arrLen = arr.length; byteIdx < arrLen; byteIdx++) {\n      merged[offset++] = arr[byteIdx];\n    }\n  }\n\n  return merged;\n};\nexport var mergeUint8Arrays = function (arrays) {\n  var totalSize = 0;\n\n  for (var idx = 0, len = arrays.length; idx < len; idx++) {\n    totalSize += arrays[idx].length;\n  }\n\n  var mergedBuffer = new Uint8Array(totalSize);\n  var offset = 0;\n\n  for (var idx = 0, len = arrays.length; idx < len; idx++) {\n    var array = arrays[idx];\n    mergedBuffer.set(array, offset);\n    offset += array.length;\n  }\n\n  return mergedBuffer;\n};\nexport var arrayAsString = function (array) {\n  var str = '';\n\n  for (var idx = 0, len = array.length; idx < len; idx++) {\n    str += charFromCode(array[idx]);\n  }\n\n  return str;\n};\nexport var byAscendingId = function (a, b) {\n  return a.id - b.id;\n};\nexport var sortedUniq = function (array, indexer) {\n  var uniq = [];\n\n  for (var idx = 0, len = array.length; idx < len; idx++) {\n    var curr = array[idx];\n    var prev = array[idx - 1];\n\n    if (idx === 0 || indexer(curr) !== indexer(prev)) {\n      uniq.push(curr);\n    }\n  }\n\n  return uniq;\n}; // Arrays and TypedArrays in JS both have .reverse() methods, which would seem\n// to negate the need for this function. However, not all runtimes support this\n// method (e.g. React Native). This function compensates for that fact.\n\nexport var reverseArray = function (array) {\n  var arrayLen = array.length;\n\n  for (var idx = 0, len = Math.floor(arrayLen / 2); idx < len; idx++) {\n    var leftIdx = idx;\n    var rightIdx = arrayLen - idx - 1;\n    var temp = array[idx];\n    array[leftIdx] = array[rightIdx];\n    array[rightIdx] = temp;\n  }\n\n  return array;\n};\nexport var sum = function (array) {\n  var total = 0;\n\n  for (var idx = 0, len = array.length; idx < len; idx++) {\n    total += array[idx];\n  }\n\n  return total;\n};\nexport var range = function (start, end) {\n  var arr = new Array(end - start);\n\n  for (var idx = 0, len = arr.length; idx < len; idx++) {\n    arr[idx] = start + idx;\n  }\n\n  return arr;\n};\nexport var pluckIndices = function (arr, indices) {\n  var plucked = new Array(indices.length);\n\n  for (var idx = 0, len = indices.length; idx < len; idx++) {\n    plucked[idx] = arr[indices[idx]];\n  }\n\n  return plucked;\n};\nexport var canBeConvertedToUint8Array = function (input) {\n  return input instanceof Uint8Array || input instanceof ArrayBuffer || typeof input === 'string';\n};\nexport var toUint8Array = function (input) {\n  if (typeof input === 'string') {\n    return decodeFromBase64DataUri(input);\n  } else if (input instanceof ArrayBuffer) {\n    return new Uint8Array(input);\n  } else if (input instanceof Uint8Array) {\n    return input;\n  } else {\n    throw new TypeError('`input` must be one of `string | ArrayBuffer | Uint8Array`');\n  }\n};","map":{"version":3,"sources":["../../src/utils/arrays.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { decodeFromBase64DataUri } from \"./base64\";\nimport { charFromCode } from \"./strings\";\nexport var last = function (array) { return array[array.length - 1]; };\n// export const dropLast = <T>(array: T[]): T[] =>\n// array.slice(0, array.length - 1);\nexport var typedArrayFor = function (value) {\n    if (value instanceof Uint8Array)\n        return value;\n    var length = value.length;\n    var typedArray = new Uint8Array(length);\n    for (var idx = 0; idx < length; idx++) {\n        typedArray[idx] = value.charCodeAt(idx);\n    }\n    return typedArray;\n};\nexport var mergeIntoTypedArray = function () {\n    var arrays = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        arrays[_i] = arguments[_i];\n    }\n    var arrayCount = arrays.length;\n    var typedArrays = [];\n    for (var idx = 0; idx < arrayCount; idx++) {\n        var element = arrays[idx];\n        typedArrays[idx] =\n            element instanceof Uint8Array ? element : typedArrayFor(element);\n    }\n    var totalSize = 0;\n    for (var idx = 0; idx < arrayCount; idx++) {\n        totalSize += arrays[idx].length;\n    }\n    var merged = new Uint8Array(totalSize);\n    var offset = 0;\n    for (var arrIdx = 0; arrIdx < arrayCount; arrIdx++) {\n        var arr = typedArrays[arrIdx];\n        for (var byteIdx = 0, arrLen = arr.length; byteIdx < arrLen; byteIdx++) {\n            merged[offset++] = arr[byteIdx];\n        }\n    }\n    return merged;\n};\nexport var mergeUint8Arrays = function (arrays) {\n    var totalSize = 0;\n    for (var idx = 0, len = arrays.length; idx < len; idx++) {\n        totalSize += arrays[idx].length;\n    }\n    var mergedBuffer = new Uint8Array(totalSize);\n    var offset = 0;\n    for (var idx = 0, len = arrays.length; idx < len; idx++) {\n        var array = arrays[idx];\n        mergedBuffer.set(array, offset);\n        offset += array.length;\n    }\n    return mergedBuffer;\n};\nexport var arrayAsString = function (array) {\n    var str = '';\n    for (var idx = 0, len = array.length; idx < len; idx++) {\n        str += charFromCode(array[idx]);\n    }\n    return str;\n};\nexport var byAscendingId = function (a, b) { return a.id - b.id; };\nexport var sortedUniq = function (array, indexer) {\n    var uniq = [];\n    for (var idx = 0, len = array.length; idx < len; idx++) {\n        var curr = array[idx];\n        var prev = array[idx - 1];\n        if (idx === 0 || indexer(curr) !== indexer(prev)) {\n            uniq.push(curr);\n        }\n    }\n    return uniq;\n};\n// Arrays and TypedArrays in JS both have .reverse() methods, which would seem\n// to negate the need for this function. However, not all runtimes support this\n// method (e.g. React Native). This function compensates for that fact.\nexport var reverseArray = function (array) {\n    var arrayLen = array.length;\n    for (var idx = 0, len = Math.floor(arrayLen / 2); idx < len; idx++) {\n        var leftIdx = idx;\n        var rightIdx = arrayLen - idx - 1;\n        var temp = array[idx];\n        array[leftIdx] = array[rightIdx];\n        array[rightIdx] = temp;\n    }\n    return array;\n};\nexport var sum = function (array) {\n    var total = 0;\n    for (var idx = 0, len = array.length; idx < len; idx++) {\n        total += array[idx];\n    }\n    return total;\n};\nexport var range = function (start, end) {\n    var arr = new Array(end - start);\n    for (var idx = 0, len = arr.length; idx < len; idx++) {\n        arr[idx] = start + idx;\n    }\n    return arr;\n};\nexport var pluckIndices = function (arr, indices) {\n    var plucked = new Array(indices.length);\n    for (var idx = 0, len = indices.length; idx < len; idx++) {\n        plucked[idx] = arr[indices[idx]];\n    }\n    return plucked;\n};\nexport var canBeConvertedToUint8Array = function (input) {\n    return input instanceof Uint8Array ||\n        input instanceof ArrayBuffer ||\n        typeof input === 'string';\n};\nexport var toUint8Array = function (input) {\n    if (typeof input === 'string') {\n        return decodeFromBase64DataUri(input);\n    }\n    else if (input instanceof ArrayBuffer) {\n        return new Uint8Array(input);\n    }\n    else if (input instanceof Uint8Array) {\n        return input;\n    }\n    else {\n        throw new TypeError('`input` must be one of `string | ArrayBuffer | Uint8Array`');\n    }\n};\n//# sourceMappingURL=arrays.js.map"]},"metadata":{},"sourceType":"module"}